<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" version="2.0">
  <channel>
    <title>Elixir Sips</title>
    <link>https://elixirsips.dpdcart.com/</link>
    <description/>
    <pubDate>Fri, 03 Jul 2015 14:49:00 -0400</pubDate>
    <managingEditor>josh.rubyist@gmail.com (Josh Adams)</managingEditor>
    <language>en</language>
    <copyright>Copyright 2015 Elixir Sips</copyright>
    <generator>getdpd.com</generator>
    <itunes:summary>ElixirSips is a twice-weekly small dose of knowledge related to the Elixir programming language.</itunes:summary>
    <item>
      <title><![CDATA[174 - ElixirFriends: Saving Tweets with Streams and Filters]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=822</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><h1 style="box-sizing: border-box; font-size: 2.25em; margin-right: 0px; margin-bottom: 16px; margin-left: 0px; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; margin-top: 0px !important;">Episode 174: ElixirFriends - Saving Tweets with Streams and Filters</h1>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">In today&#39;s episode we&#39;re going to update the ElixirFriends application that we used for our Continuous Integration and Continuous Deployment episodes to constantly save any tweets that are tagged with #elixirfriends into the database as posts so we can display them. We&#39;ll only be storing tweets that have attached images. Let&#39;s get started.</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Project</h2>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">We&#39;re going to start off by adding ExTwitter to our project. We&#39;ve done previous episodes on ExTwitter, so if you don&#39;t know how it works you can check those out.</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:extwitter</span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>~&gt; 0.4<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>},
  {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:oauth</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">github:</span> <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>tim/erlang-oauth<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>},</pre>
</div>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
mix deps.get</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">We also need to configure it, so open up config/config.exs:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
config <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:ex_twitter</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:oauth</span>, [
  <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">consumer_key:</span> <span class="pl-vo" style="box-sizing: border-box;">System</span>.get_env(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>TWITTER_CONSUMER_KEY<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>),
  <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">consumer_secret:</span> <span class="pl-vo" style="box-sizing: border-box;">System</span>.get_env(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>TWITTER_CONSUMER_SECRET<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>),
  <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">access_token:</span> <span class="pl-vo" style="box-sizing: border-box;">System</span>.get_env(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>TWITTER_ACCESS_TOKEN<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>),
  <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">access_token_secret:</span> <span class="pl-vo" style="box-sizing: border-box;">System</span>.get_env(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>TWITTER_ACCESS_SECRET<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>)
]</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">We are going to be streaming ExTwitter.Model.Tweets into our database. The structure of one of those is as follows:</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">((( open the README and paste this in )))</p>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">%ExTwitter.Model.Tweet{contributors: nil, coordinates: nil,
 created_at: "Thu Jul 02 12:41:00 +0000 2015",
 entities: %{hashtags: [], symbols: [],
   urls: [%{display_url: "bit.ly/1GQjkm6",
      expanded_url: "http://bit.ly/1GQjkm6", indices: 'Qg',
      url: "http://t.co/glk1sfwhDz"}], user_mentions: []}, favorite_count: 0,
 favorited: false, geo: nil, id: 616587375062290432,
 id_str: "616587375062290432", in_reply_to_screen_name: nil,
 in_reply_to_status_id: nil, in_reply_to_status_id_str: nil,
 in_reply_to_user_id: nil, in_reply_to_user_id_str: nil, lang: "en", place: nil,
 retweet_count: 0, retweeted: false,
 source: "&lt;a href=\"http://twitterfeed.com\" rel=\"nofollow\"&gt;twitterfeed&lt;/a&gt;",
 text: "lang/elixir/bsd.elixir.mk @ 391136: Add helper makefile for Elixir applications. http://t.co/glk1sfwhDz",
 truncated: false,
 user: %ExTwitter.Model.User{contributors_enabled: false, utc_offset: -14400,
  following: false, follow_request_sent: false, id_str: "2218195068",
  profile_background_color: "C0DEED",
  profile_image_url: "http://pbs.twimg.com/profile_images/378800000812206542/e0e817590ddd46782ffbe848a4244d88_normal.png",
  followers_count: 39,
  description: "Tweets of FreeBSD Ports code changes, managed by @swills",
  default_profile: true,
  entities: %{description: %{urls: []},
    url: %{urls: [%{display_url: "src.mouf.net/ports",
         expanded_url: "http://src.mouf.net/ports", indices: [0, 22],
         url: "http://t.co/ZYzYhwEh4z"}]}},
  created_at: "Wed Nov 27 17:54:25 +0000 2013", location: "",
  geo_enabled: false, statuses_count: 567, name: "FreeBSD Ports",
  screen_name: "fbsdports", profile_sidebar_border_color: "C0DEED",
  profile_background_tile: false, time_zone: "Eastern Time (US &amp; Canada)",
  default_profile_image: false, friends_count: 1, favourites_count: 0,
  is_translator: false, id: 2218195068, lang: "en",
  profile_background_image_url_https: "https://abs.twimg.com/images/themes/theme1/bg.png",
  notifications: false,
  profile_background_image_url: "http://abs.twimg.com/images/themes/theme1/bg.png",
  listed_count: 6, is_translation_enabled: false, protected: false,
  profile_image_url_https: "https://pbs.twimg.com/profile_images/378800000812206542/e0e817590ddd46782ffbe848a4244d88_normal.png",
  profile_text_color: "333333", profile_sidebar_fill_color: "DDEEF6",
  verified: false, profile_link_color: "0084B4",
  profile_use_background_image: true, url: "http://t.co/ZYzYhwEh4z"}}
</code></pre>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Now we&#39;ll write the meat of the streamer, which we&#39;ll put in<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">lib/elixir_friends/image_tweet_streamer.ex</code>:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defmodule</span> <span class="pl-en" style="box-sizing: border-box; color: rgb(121, 93, 163);">ElixirFriends.ImageTweetStreamer</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # We want to allow you to pass a search term in...</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> stream(search_term) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # We&#39;ll search for that with a stream filter</span>
    <span class="pl-vo" style="box-sizing: border-box;">ExTwitter</span>.stream_filter(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">track:</span> search_term)
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # We&#39;ll filter out any tweets that don&#39;t have images</span>
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> <span class="pl-vo" style="box-sizing: border-box;">Stream</span>.filter(<span class="pl-vo" style="box-sizing: border-box;">&amp;</span>has_images?<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">/</span><span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">1</span>)
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # And we&#39;ll store them in our database</span>
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> <span class="pl-vo" style="box-sizing: border-box;">Stream</span>.map(<span class="pl-vo" style="box-sizing: border-box;">&amp;</span>store_tweet<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">/</span><span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">1</span>)
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # Checking a tweet for images is easy:</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defp</span> has_images?(%<span class="pl-vo" style="box-sizing: border-box;">ExTwitter</span>.<span class="pl-vo" style="box-sizing: border-box;">Model</span>.<span class="pl-vo" style="box-sizing: border-box;">Tweet</span>{}<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span>tweet) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    <span class="pl-vo" style="box-sizing: border-box;">Map</span>.has_key?(tweet.entities, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:media</span>) <span class="pl-vo" style="box-sizing: border-box;">&amp;&amp;</span>
    <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.any?(photos(tweet))
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # Storing a tweet just consists of grabbing the first photo from the tweet and</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # creating a Post in our database</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defp</span> store_tweet(%<span class="pl-vo" style="box-sizing: border-box;">ExTwitter</span>.<span class="pl-vo" style="box-sizing: border-box;">Model</span>.<span class="pl-vo" style="box-sizing: border-box;">Tweet</span>{}<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span>tweet) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    <span class="pl-vo" style="box-sizing: border-box;">IO</span>.puts <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>storing this tweet: <span class="pl-s2" style="box-sizing: border-box; color: rgb(51, 51, 51);"><span class="pl-pse" style="box-sizing: border-box;">#{</span>inspect(tweet, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">pretty:</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">true</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">limit:</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">2_000</span>)<span class="pl-pse" style="box-sizing: border-box;">}</span></span><span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>
    post <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> %<span class="pl-vo" style="box-sizing: border-box;">ElixirFriends</span>.<span class="pl-vo" style="box-sizing: border-box;">Post</span>{
      <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">image_url:</span> first_photo(tweet).media_url,
      <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">content:</span> tweet.text,
      <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">source_url:</span> first_photo(tweet).expanded_url
    }
    <span class="pl-vo" style="box-sizing: border-box;">IO</span>.puts <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>storing this post: <span class="pl-s2" style="box-sizing: border-box; color: rgb(51, 51, 51);"><span class="pl-pse" style="box-sizing: border-box;">#{</span>inspect post<span class="pl-pse" style="box-sizing: border-box;">}</span></span><span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>
    <span class="pl-vo" style="box-sizing: border-box;">ElixirFriends</span>.<span class="pl-vo" style="box-sizing: border-box;">Repo</span>.insert(post)
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # Now we need to write the `photos` function, which will return a list of the</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # photos attached to a tweet.  These are media under the entities key.</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defp</span> photos(%<span class="pl-vo" style="box-sizing: border-box;">ExTwitter</span>.<span class="pl-vo" style="box-sizing: border-box;">Model</span>.<span class="pl-vo" style="box-sizing: border-box;">Tweet</span>{}<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span>tweet) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    tweet.entities.media
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.filter(<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">fn</span>(medium) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span>
      medium.type <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">==</span> <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>photo<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>)
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # Finally, we want a convenience function to grab the first photo</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defp</span> first_photo(%<span class="pl-vo" style="box-sizing: border-box;">ExTwitter</span>.<span class="pl-vo" style="box-sizing: border-box;">Model</span>.<span class="pl-vo" style="box-sizing: border-box;">Tweet</span>{}<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span>tweet) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    photos(tweet)
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> hd
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">This is pretty much it, and will push a stream of tweets into our database. Now, we want to start this up when our application starts, and supervise it. I was going to create a GenServer for this but it seemed so very very wrong, because it wouldn&#39;t be able to handle any messages as it would be blocked on this stream. Luckily, Jose is a much smarter man than I am and he graced us with Supervisable Tasks, so let&#39;s see what adding a worker looks like. Open up&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">lib/elixir_friends.ex</code>:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">import</span> <span class="pl-vo" style="box-sizing: border-box;">Supervisor</span>.<span class="pl-vo" style="box-sizing: border-box;">Spec</span>

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # For now we&#39;ll use the term &#39;nintendo&#39; for our search, since no one is</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # tweeting with #elixirfriends yet!</span>
  <span class="pl-vo" style="box-sizing: border-box;">@term</span> <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>nintendo<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  #...</span>
      worker(<span class="pl-vo" style="box-sizing: border-box;">Task</span>, [<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">fn</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> <span class="pl-vo" style="box-sizing: border-box;">ElixirFriends</span>.<span class="pl-vo" style="box-sizing: border-box;">ImageTweetStreamer</span>.stream(<span class="pl-vo" style="box-sizing: border-box;">@term</span>) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.to_list <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>])</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">That&#39;s the core idea. Let&#39;s go ahead and run it and see what happens:</p>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
iex -S mix phoenix.server</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">We can watch the console for a bit here and we should see some images being stored. Once some come through we&#39;ll look at the frontend.</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">((( do it )))</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Summary</h2>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">And there we have it. Elixir makes building something like this so absurdly easy. I hope you enjoyed learning about the Supervisable Tasks - I know I plan on using them constantly. See you soon!</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Resources</h2>

<ul class="task-list" style="box-sizing: border-box; padding-right: 0px; padding-left: 2em; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">
	<li style="box-sizing: border-box;"><a href="https://github.com/parroty/extwitter" rel="noreferrer" style="box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;">parroty/extwitter</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=53597">174_ElixirFriends_Saving_Tweets_with_Streams_and_Filters.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=53598">174_ElixirFriends_Saving_Tweets_with_Streams_and_Filters.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-73c6ee1f9042c55bac7db761699d3871e6727c5e</guid>
      <pubDate>Fri, 03 Jul 2015 14:49:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/53597/174_ElixirFriends_Saving_Tweets_with_Streams_and_Filters.mp4" length="48912121" type="video/mp4"/>
    </item>
    <item>
      <title><![CDATA[173 - Continuous Deployment]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=821</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><h1 style="box-sizing: border-box; font-size: 2.25em; margin: 1em 0px 16px; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Episode 173: Deploying Phoenix Applications to Heroku</h1>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">We&#39;d like to introduce Continuous Deployment. Before that happens, we need to get our application manually deployable to Heroku. Let&#39;s get started.</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Project</h2>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">One of the things we need to start with is allowing the production secret to go up to Heroku. For the record, storing secrets in your git repo is absolutely against my principles. I just don&#39;t know a better way around this for heroku apps with phoenix for now. So let&#39;s open up the .gitignore and allow the prod secret:</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">((( do it )))</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">For what it&#39;s worth, this isn&#39;t the secret that our app will use in production since we&#39;ll be setting an environment variable for the secret...so it&#39;s not so bad.</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Alright, next let&#39;s add it to the repository:</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">((( do it )))</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Next we&#39;ll create a heroku app for it:</p>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
heroku create elixir-friends --buildpack=https://github.com/HashNuke/heroku-buildpack-elixir</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Now we&#39;ll add the phoenix static buildpack:</p>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">heroku buildpacks:add https://github.com/gjaldon/phoenix-static-buildpack
</code></pre>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Now the phoenix static buildpack will give us a good-enough default Procfile, so we don&#39;t need one of those. If we wanted to do something more interesting we could add one.</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">You also need to make sure your production environment uses the&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">DATABASE_URL</code>&nbsp;that heroku provides. You can see mine at&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">config/prod.secret.exs</code></p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);"># Configure your database</span>
config <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:elixir_friends</span>, <span class="pl-vo" style="box-sizing: border-box;">ElixirFriends</span>.<span class="pl-vo" style="box-sizing: border-box;">Repo</span>,
  <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">adapter:</span> <span class="pl-vo" style="box-sizing: border-box;">Ecto</span>.<span class="pl-vo" style="box-sizing: border-box;">Adapters</span>.<span class="pl-vo" style="box-sizing: border-box;">Postgres</span>,
  <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">url:</span> <span class="pl-vo" style="box-sizing: border-box;">System</span>.get_env(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>DATABASE_URL<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>)</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Next we&#39;ll just push it up to heroku, and we&#39;ll get a successful deploy.</p>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
git push heroku master</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">We also need to run the migrations:</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">``sh heroku run mix ecto.migrate</p>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">
Finally our app is up and running, and we can verify it by visiting it at
http://elixir-friends.herokuapp.com/posts

We'll come in here and add a post.

### Continuous Deployment

Now that we've got the core heroku deployment working, we can get to the point
of this episode, which is to show off Phoenix continuous deployment with
Semaphore CI.  The first step there is to add the semaphore addon in heroku:

```sh
heroku addons:create semaphore
</code></pre>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Next we can look at the docs for the addon:</p>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
heroku addons:docs semaphore</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">We&#39;ll just go to our apps list in semaphore now and add a deployment. There&#39;s a nice wizard that walks us through everything. I&#39;ll cut out the bit where I plug in my API key, but you get this from heroku. Now we pick the branch to deploy and we&#39;re done. Now, every time we push to that branch it will be automatically deployed after the tests pass.</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Let&#39;s test it out by modifying the posts index to show the images in the table for each post.</p>

<div class="highlight highlight-html" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
&lt;<span class="pl-ent" style="box-sizing: border-box; color: rgb(99, 163, 92);">h2</span>&gt;Listing posts&lt;/<span class="pl-ent" style="box-sizing: border-box; color: rgb(99, 163, 92);">h2</span>&gt;

&lt;<span class="pl-ent" style="box-sizing: border-box; color: rgb(99, 163, 92);">table</span> <span class="pl-e" style="box-sizing: border-box; color: rgb(121, 93, 163);">class</span>=<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>table<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>&gt;
  &lt;<span class="pl-ent" style="box-sizing: border-box; color: rgb(99, 163, 92);">thead</span>&gt;
    &lt;<span class="pl-ent" style="box-sizing: border-box; color: rgb(99, 163, 92);">tr</span>&gt;
      &lt;<span class="pl-ent" style="box-sizing: border-box; color: rgb(99, 163, 92);">th</span>&gt;Image&lt;/<span class="pl-ent" style="box-sizing: border-box; color: rgb(99, 163, 92);">th</span>&gt;
      &lt;<span class="pl-ent" style="box-sizing: border-box; color: rgb(99, 163, 92);">th</span>&gt;ImageUrl&lt;/<span class="pl-ent" style="box-sizing: border-box; color: rgb(99, 163, 92);">th</span>&gt;
      &lt;<span class="pl-ent" style="box-sizing: border-box; color: rgb(99, 163, 92);">th</span>&gt;Content&lt;/<span class="pl-ent" style="box-sizing: border-box; color: rgb(99, 163, 92);">th</span>&gt;
      &lt;<span class="pl-ent" style="box-sizing: border-box; color: rgb(99, 163, 92);">th</span>&gt;SourceUrl&lt;/<span class="pl-ent" style="box-sizing: border-box; color: rgb(99, 163, 92);">th</span>&gt;

      &lt;<span class="pl-ent" style="box-sizing: border-box; color: rgb(99, 163, 92);">th</span>&gt;&lt;/<span class="pl-ent" style="box-sizing: border-box; color: rgb(99, 163, 92);">th</span>&gt;
    &lt;/<span class="pl-ent" style="box-sizing: border-box; color: rgb(99, 163, 92);">tr</span>&gt;
  &lt;/<span class="pl-ent" style="box-sizing: border-box; color: rgb(99, 163, 92);">thead</span>&gt;
  &lt;<span class="pl-ent" style="box-sizing: border-box; color: rgb(99, 163, 92);">tbody</span>&gt;
    &lt;%= for post &lt;- @posts do %&gt;
      &lt;<span class="pl-ent" style="box-sizing: border-box; color: rgb(99, 163, 92);">tr</span>&gt;
        &lt;<span class="pl-ent" style="box-sizing: border-box; color: rgb(99, 163, 92);">td</span>&gt;&lt;<span class="pl-ent" style="box-sizing: border-box; color: rgb(99, 163, 92);">img</span> <span class="pl-e" style="box-sizing: border-box; color: rgb(121, 93, 163);">src</span>=<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&#39;</span>&lt;%= post.image_url %&gt;<span class="pl-pds" style="box-sizing: border-box;">&#39;</span></span> /&gt;&lt;/<span class="pl-ent" style="box-sizing: border-box; color: rgb(99, 163, 92);">td</span>&gt;
        &lt;<span class="pl-ent" style="box-sizing: border-box; color: rgb(99, 163, 92);">td</span>&gt;&lt;%= post.image_url %&gt;&lt;/<span class="pl-ent" style="box-sizing: border-box; color: rgb(99, 163, 92);">td</span>&gt;
        &lt;<span class="pl-ent" style="box-sizing: border-box; color: rgb(99, 163, 92);">td</span>&gt;&lt;%= post.content %&gt;&lt;/<span class="pl-ent" style="box-sizing: border-box; color: rgb(99, 163, 92);">td</span>&gt;
        &lt;<span class="pl-ent" style="box-sizing: border-box; color: rgb(99, 163, 92);">td</span>&gt;&lt;%= post.source_url %&gt;&lt;/<span class="pl-ent" style="box-sizing: border-box; color: rgb(99, 163, 92);">td</span>&gt;

        &lt;<span class="pl-ent" style="box-sizing: border-box; color: rgb(99, 163, 92);">td</span> <span class="pl-e" style="box-sizing: border-box; color: rgb(121, 93, 163);">class</span>=<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>text-right<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>&gt;
          &lt;%= link &quot;Show&quot;, to: post_path(@conn, :show, post), class: &quot;btn btn-default btn-xs&quot; %&gt;
          &lt;%= link &quot;Edit&quot;, to: post_path(@conn, :edit, post), class: &quot;btn btn-default btn-xs&quot; %&gt;
          &lt;%= link &quot;Delete&quot;, to: post_path(@conn, :delete, post), method: :delete, class: &quot;btn btn-danger btn-xs&quot; %&gt;
        &lt;/<span class="pl-ent" style="box-sizing: border-box; color: rgb(99, 163, 92);">td</span>&gt;
      &lt;/<span class="pl-ent" style="box-sizing: border-box; color: rgb(99, 163, 92);">tr</span>&gt;
    &lt;% end %&gt;
  &lt;/<span class="pl-ent" style="box-sizing: border-box; color: rgb(99, 163, 92);">tbody</span>&gt;
&lt;/<span class="pl-ent" style="box-sizing: border-box; color: rgb(99, 163, 92);">table</span>&gt;

&lt;%= link &quot;New post&quot;, to: post_path(@conn, :new) %&gt;</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Now let&#39;s push this up to github and let semaphore deploy it for us.</p>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
git add <span class="pl-s3" style="box-sizing: border-box; color: rgb(0, 134, 179);">.</span>
git commit -m<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>images on posts index<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>
git push origin master</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">We can click into semaphore and watch it kick off the build ((( do that and wait )))</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Now we&#39;ll load the index again and see an image in the table.</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Summary</h2>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">So there we go. In today&#39;s episode we saw how easy it is to set up semaphore to handle Continuous Deployment for your projects. See you soon!</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Resources</h2>

<ul class="task-list" style="box-sizing: border-box; padding-right: 0px; padding-left: 2em; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">
	<li style="box-sizing: border-box;"><a href="https://github.com/HashNuke/heroku-buildpack-elixir" rel="noreferrer" style="box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;">HashNuke/heroku-buildpack-elixir</a></li>
	<li style="box-sizing: border-box;"><a href="https://github.com/gjaldon/phoenix-static-buildpack" rel="noreferrer" style="box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;">gjaldon/phoenix-static-buildpack</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=53340">173_Continuous_Deployment.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=53341">173_Continuous_Deployment.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-b49e1e04b7a47bee866c63837bb98c824e47225d</guid>
      <pubDate>Wed, 01 Jul 2015 07:34:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/53340/173_Continuous_Deployment.mp4" length="53635882" type="video/mp4"/>
    </item>
    <item>
      <title><![CDATA[172 - Arc File Uploads]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=819</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><h1 style="box-sizing: border-box; font-size: 2.25em; margin-right: 0px; margin-bottom: 16px; margin-left: 0px; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; margin-top: 0px !important;">Episode 172: Arc File Uploads</h1>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">In this episode we&#39;re going to look at arc, which is a tool for handling file uploads in Phoenix. Let&#39;s get started.</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Project</h2>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">We&#39;ll start a new phoenix project:</p>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
mix phoenix.new arc_playground
<span class="pl-s3" style="box-sizing: border-box; color: rgb(0, 134, 179);">cd</span> arc_playground</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">and add the dependencies for&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">arc</code>&nbsp;and&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">arc_ecto</code>:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:arc</span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>~&gt; 0.1<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>},
{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:arc_ecto</span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>~&gt; 0.1<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>},</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Then we&#39;ll fetch the dependencies:</p>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
mix deps.get</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;"><code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">arc_ecto</code>&nbsp;is an addition to arc that allows it to integrate nicely with ecto models, by the way. It&#39;s not necessary if you just want to use arc to handle uploads more generally, but it makes storing uploads on a given ecto model a bit easier.</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Now we&#39;ll generate an avatar uploader with arc&#39;s generator:</p>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
mix arc.g avatar
vim web/uploaders/avatar.ex</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Here&#39;s the default uploader with inlined documentation. We&#39;ll make a few changes.</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defmodule</span> <span class="pl-en" style="box-sizing: border-box; color: rgb(121, 93, 163);">ArcPlayground.Avatar</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # NOTE: This assumes you&#39;ve already gotten an s3 bucket in place in the Standard</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # Region.  If you&#39;re using IAM, you&#39;ll also need to grant permissions to</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # authenticated users.</span>

  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">use</span> <span class="pl-vo" style="box-sizing: border-box;">Arc</span>.<span class="pl-vo" style="box-sizing: border-box;">Definition</span>

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # Include ecto support (requires package arc_ecto installed):</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">use</span> <span class="pl-vo" style="box-sizing: border-box;">Arc</span>.<span class="pl-vo" style="box-sizing: border-box;">Ecto</span>.<span class="pl-vo" style="box-sizing: border-box;">Definition</span>

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # To add a thumbnail version:</span>
  <span class="pl-vo" style="box-sizing: border-box;">@versions</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:original</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:thumb</span>]

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # Everyone can see uploaded files.  If you want anything other than the</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # default, which is files being private to unauthenticated users, your IAM</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # user will need to have the ability to write ACL policies for files as well.</span>
  <span class="pl-vo" style="box-sizing: border-box;">@acl</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:public_read</span>

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # Whitelist file extensions:</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> validate({file, _}) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">~w(</span>.jpg .jpeg .gif .png<span class="pl-pds" style="box-sizing: border-box;">)</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.member?(<span class="pl-vo" style="box-sizing: border-box;">Path</span>.extname(file.file_name))
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # Define a thumbnail transformation:</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # NOTE: If you specify the -format png as is described in the documentation, it</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # doesn&#39;t actually get converted into a png but writes .png as the extension,</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # which will certainly confuse your image viewer if it uses the extension to</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # determine the image type.  I&#39;ve removed that option here for what it&#39;s</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # worth.</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> transform(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:thumb</span>, _) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:convert</span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>-strip -thumbnail 250x250^ -gravity center -extent 250x250<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>}
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # Override the persisted filenames:</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # def filename(version, _) do</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  #   version</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # end</span>

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # Override the storage directory:</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # def storage_dir(version, {file, scope}) do</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  #   &quot;uploads/user/avatars/#{scope.id}&quot;</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # end</span>

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # Provide a default URL if there hasn&#39;t been a file uploaded</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # def default_url(version) do</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  #   &quot;/images/avatars/default_#{version}.png&quot;</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # end</span>
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Next we need to configure ARC. I&#39;m going to use environment variables here to avoid showing off my IAM user&#39;s credentials.</p>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
vim config/config.exs</pre>
</div>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
config <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:arc</span>,
  <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">access_key_id:</span> <span class="pl-vo" style="box-sizing: border-box;">System</span>.get_env(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>AWS_ACCESS_KEY_ID<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>),
  <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">secret_access_key:</span> <span class="pl-vo" style="box-sizing: border-box;">System</span>.get_env(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>AWS_SECRET_ACCESS_KEY<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>),
  <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">bucket:</span> <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>arc-playground-2<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Now I&#39;m going to copy an .envrc in which contains these variables.</p>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
cp xx_arc_playground/.envrc <span class="pl-s3" style="box-sizing: border-box; color: rgb(0, 134, 179);">.</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Now we can upload a file and fetch it again:</p>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">iex(2)&gt; ArcPlayground.Avatar.store("/home/jadams/elixir/arc_playground/files/gracie2.jpg")
#...
iex(3)&gt; ArcPlayground.Avatar.url("gracie2.jpg", :thumb)
"https://s3.amazonaws.com/arc-playground-2/uploads/gracie2.jpg_thumb.jpg"
</code></pre>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Summary</h2>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">So this is pretty good, and shows off&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">arc</code>. What about&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">arc_ecto</code>&nbsp;though? In some of my testing, I had issues doing anything more than the exact example provided in the&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">arc_ecto</code>&nbsp;README, based around issues caused by the&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">cast_attachments</code>&nbsp;function when using non-attachment parameters. Given that, I didn&#39;t want to show this piece off yet as I expect a few changes to happen, I&#39;ll save that for a later episode. See you soon!</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Resources</h2>

<ul class="task-list" style="box-sizing: border-box; padding-right: 0px; padding-left: 2em; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">
	<li style="box-sizing: border-box;"><a href="https://github.com/stavro/arc" rel="noreferrer" style="box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;">stavro/arc</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=52978">172_Arc_File_Uploads.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=52979">172_Arc_File_Uploads.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-36d06370d0b0796c87c6a6b56de85a2d66d780af</guid>
      <pubDate>Sat, 27 Jun 2015 09:22:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/52978/172_Arc_File_Uploads.mp4" length="50023297" type="video/mp4"/>
    </item>
    <item>
      <title><![CDATA[171 - Erlang 18 and Time]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=815</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><h1 style="box-sizing: border-box; font-size: 2.25em; margin-right: 0px; margin-bottom: 16px; margin-left: 0px; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; margin-top: 0px !important;">Episode 171: Erlang 18 and time</h1>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Erlang 18.0 was officially released today. There are a lot of interesting changes in this release. The most interesting three are:</p>

<ul class="task-list" style="box-sizing: border-box; padding-right: 0px; padding-left: 2em; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">
	<li style="box-sizing: border-box;">a change of license to the Apache Public License 2.0</li>
	<li style="box-sizing: border-box;">support for big maps</li>
	<li style="box-sizing: border-box;">a new API for time</li>
</ul>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">In this episode I&#39;m going to focus on looking at the differences in time, as these changes will help performance and scalability of our systems and because we have to learn the new API sometime, so why not now? Let&#39;s get started.</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Installing Erlang 18</h2>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">I figured this might give me a good opportunity to show my strategy for handling multiple erlang releases in my system. I use kerl as my version manager for erlang.</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">If you&#39;ve got kerl installed, you can update the list of releases with:</p>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
kerl update releases</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Then you can list the releases to see what you can install with it:</p>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
kerl list releases</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">We want to install 18.0. Because you can build releases with different options for various purposes, kerl makes you name your releases. Let&#39;s build 18.0 with the default options:</p>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
kerl build 18.0 18.0</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">This took way longer than the video makes it seem :)</p>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">...
Building Erlang/OTP 18.0 (18.0), please wait...
Erlang/OTP 18.0 (18.0) has been successfully built
</code></pre>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Alright, now that the release is built we&#39;ll install it.</p>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">[jadams:~] $ kerl install 18.0 ~/erlang/erlangs/18.0
Installing Erlang/OTP 18.0 (18.0) in /home/jadams/erlang/erlangs/18.0...
</code></pre>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Finally, we activate it, with:</p>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-s3" style="box-sizing: border-box; color: rgb(0, 134, 179);">.</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">~</span>/erlang/erlangs/18.0/activate</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Now we can see that we&#39;re using the newer erlang:</p>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
erl</pre>
</div>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">[jadams:~] $ erl
Erlang/OTP 18 [erts-7.0] [source] [64-bit] [smp:8:8] [async-threads:10] [hipe] [kernel-poll:false]

Eshell V7.0  (abort with ^G)
1&gt;
</code></pre>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">OK, so now we&#39;re in erlang 18. Fantastic. We&#39;ll go ahead and run an iex shell to play with it from elixir:</p>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
iex</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">So the old time api, which we&#39;re familiar with, centers around the call to&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">:erlang.now</code>:</p>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">iex(7)&gt; :erlang.now
{1435, 156474, 180776}
</code></pre>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">The problem with this is that a lot of calls to it will give incorrect times. It also handles system time warps very poorly. These could be caused by POSIX time jumping, which happens during a leap second insertion, or by the underlying system time changing, which could be caused by anything from a manual time change to a clock that skews and is corrected by NTP.</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">There is a lot of detail in the erlang manual page for time correction, which I encourage you to read. It would be very boring to hear me rattle it off in my own words, and I&#39;d be likely to explain some things worse than the fine folks at ericsson, so I won&#39;t even try. What we will do, though, is look at some of the Do&#39;s and Don&#39;ts of the new api.</p>

<h3 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.43; font-size: 1.5em; position: relative; font-weight: bold; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">System time</h3>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">If you want to retrieve the system time, you used to use&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">:erlang.now</code>. Now you should use<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">:erlang.system_time</code>&nbsp;instead:</p>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">iex(8)&gt; :erlang.system_time
1435157397480748777
</code></pre>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Of course this isn&#39;t the format you&#39;re used to. If you want the same format that&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">now</code>&nbsp;returned, use<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">:erlang.timestamp</code>:</p>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">iex(11)&gt; :erlang.timestamp
{1435, 157439, 504701}
</code></pre>

<h3 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.43; font-size: 1.5em; position: relative; font-weight: bold; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Measuring Elapsed Time</h3>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Previously, to measure elapsed time (for benchmarks, for instance), you would use&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">now</code>. For this use case, it&#39;s better to take timestamps with&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">:erlang.monotonic_time</code>&nbsp;and use subtraction to calculate the difference.</p>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">timing = fn() -&gt;
  time1 = :erlang.monotonic_time
  :timer.sleep(5000)
  time2 = :erlang.monotonic_time
  time2 - time1
end
time = timing.()
</code></pre>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">This reports the time in the native runtime time units. If you want to see how many native time units there are in a given named time unit, you can use&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">:erlang.convert_time_unit</code>. Let&#39;s see how many there are in a second on this system:</p>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">iex(22)&gt; :erlang.convert_time_unit(1, :seconds, :native)
1000000000
</code></pre>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">So for now, this means the native time units are nanoseconds. We should not make assumptions about this, because it&#39;s not guaranteed. To convert your time to nanoseconds, you can use<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">convert_time_unit</code>&nbsp;with our time as the input. That&#39;s not that exciting because it will return the same value presently, so we&#39;ll just use this value to convert it to a floating point representation in seconds for now:</p>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">iex(26)&gt; time / :erlang.convert_time_unit(1, :seconds, :native)
5.004091314
</code></pre>

<h3 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.43; font-size: 1.5em; position: relative; font-weight: bold; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Determine Order of Events</h3>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">It&#39;s also common presently to use&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">:erlang.now</code>&nbsp;to determine which order various events happened in. Instead, there&#39;s a new api called&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">erlang:unique_integer\1</code>&nbsp;that we can use for this purpose:</p>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">iex(29)&gt; :erlang.unique_integer([:monotonic])
-576460752303423488
</code></pre>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">This will help with ordering of events, but only on the same runtime system instance. This doesn&#39;t magically solve ordering events in a distributed system (but how neat would that be? Sadly, science...)</p>

<h3 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.43; font-size: 1.5em; position: relative; font-weight: bold; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Determine Order of Events with Time of Event</h3>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">If you want to record both the order of events and the time of the event, you should record a 2-tuple that has the monotonic time first and a unique monotonic integer second:</p>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">iex(30)&gt; {:erlang.monotonic_time, :erlang.unique_integer([:monotonic])}
{-576458615893212445, -576460752303423487}
</code></pre>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">If you also want to record the system time, it should come third in a 3-tuple:</p>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">iex(31)&gt; {:erlang.monotonic_time, :erlang.unique_integer([:monotonic]), :erlang.system_time}
{-576457905581180237, -576460752303423486, 1435159292497133219}
</code></pre>

<h3 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.43; font-size: 1.5em; position: relative; font-weight: bold; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Create a Unique Name</h3>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">If you just want a unique name, use&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">unique_integer</code>:</p>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">iex(32)&gt; :erlang.unique_integer
-576460752303423451
</code></pre>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">If negative numbers wig you out for some reason, you can force positive unique integers:</p>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">iex(33)&gt; :erlang.unique_integer([:positive])
54
</code></pre>

<h3 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.43; font-size: 1.5em; position: relative; font-weight: bold; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Seed Random Number Generator</h3>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Historically I&#39;ve used&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">now</code>&nbsp;to seed the random number generator. You can use various other tools for this. Here I&#39;m using a unique integer and monotonic time:</p>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">iex(36)&gt; :random.seed(:erlang.monotonic_time, :erlang.unique_integer, :erlang.monotonic_time)
{20852, 13432, 19482}
iex(37)&gt; :random.uniform
0.6874430130169173
iex(38)&gt; :random.seed(:erlang.monotonic_time, :erlang.unique_integer, :erlang.monotonic_time)
{27720, 16824, 6566}
iex(39)&gt; :random.uniform
0.042746502986585444
</code></pre>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Summary</h2>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">In summary, stop using&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">:erlang.now</code>&nbsp;and start porting older code to no longer use it. You can&#39;t do this without fallbacks if you have to run on systems pre-18.0, but there are examples in the erlang source in<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">./erts/example/time_compat.erl</code>:</p>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
vim <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">~</span>/.kerl/builds/18.0/otp_src_18.0/erts/example/time_compat.erl</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Enjoy your newer, better-performing clocks! See you soon!</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Resources</h2>

<ul class="task-list" style="box-sizing: border-box; padding-right: 0px; padding-left: 2em; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">
	<li style="box-sizing: border-box;"><a href="http://www.erlang.org/doc/apps/erts/time_correction.html" rel="noreferrer" style="box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;">Time Correction Erlang docs</a></li>
	<li style="box-sizing: border-box;"><a href="https://github.com/yrashk/kerl" rel="noreferrer" style="box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;">yrashk/kerl</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=52879">171_Erlang_18_and_time.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=52880">171_Erlang_18_and_time.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-9a2fa70dd941592721d62c52865406f54fb3af01</guid>
      <pubDate>Wed, 24 Jun 2015 12:42:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/52879/171_Erlang_18_and_time.mp4" length="44483067" type="video/mp4"/>
    </item>
    <item>
      <title><![CDATA[170 - Building a Slack Bot]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=810</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><h1 style="box-sizing: border-box; font-size: 2.25em; margin: 1em 0px 16px; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Episode 170: Building a Slack Bot</h1>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">I&#39;m in quite a few slack groups, and in some of them there&#39;s a pretty compelling need for a bot for various tasks. Blake Williams has written an API client for Slack&#39;s Real Time Messaging API. We&#39;re going to build a bot with it. Let&#39;s get started.</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Project</h2>

<h3 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.43; font-size: 1.5em; position: relative; font-weight: bold; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Setup</h3>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
mix new magiccitytech_slack --sup
<span class="pl-s3" style="box-sizing: border-box; color: rgb(0, 134, 179);">cd</span> magiccitytech_slack
vim mix.exs</pre>
</div>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> application <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">applications:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:logger</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:slack</span>],
     <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">mod:</span> {<span class="pl-vo" style="box-sizing: border-box;">MagiccitytechSlack</span>, []}]
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defp</span> deps <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    [
      {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:slack</span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>~&gt; 0.0.5<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>},
      {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:websocket_client</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">git:</span> <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>https://github.com/jeremyong/websocket_client<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>}
    ]
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
mix deps.get
mkdir lib/magiccitytech_slack</pre>
</div>

<h3 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.43; font-size: 1.5em; position: relative; font-weight: bold; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">The Meat</h3>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">We&#39;ll basically use the example bot as a starting point, but we&#39;ll move the token into an environment variable. Open up&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">lib/magiccitytech_slack/bot.ex</code></p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defmodule</span> <span class="pl-en" style="box-sizing: border-box; color: rgb(121, 93, 163);">MagiccitytechSlack.Bot</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">use</span> <span class="pl-vo" style="box-sizing: border-box;">Slack</span>

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # So we&#39;ll define a start_link function, and we&#39;ll defer to the</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # Slack.start_link function, passing it our API Token</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> start_link(initial_state) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    <span class="pl-vo" style="box-sizing: border-box;">Slack</span>.start_link(<span class="pl-v" style="box-sizing: border-box; color: rgb(29, 62, 129);">__MODULE__</span>, <span class="pl-vo" style="box-sizing: border-box;">System</span>.get_env(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>SLACK_BOT_API_TOKEN<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>), initial_state)
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> init(initial_state, slack) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # We&#39;ll output when we&#39;re connected</span>
    <span class="pl-vo" style="box-sizing: border-box;">IO</span>.puts <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>Connected as <span class="pl-s2" style="box-sizing: border-box; color: rgb(51, 51, 51);"><span class="pl-pse" style="box-sizing: border-box;">#{</span>slack.me.name<span class="pl-pse" style="box-sizing: border-box;">}</span></span><span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>
    {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:ok</span>, initial_state}
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> handle_message({<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:type</span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>hello<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>, response}, slack, state) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # The first message we receive from the slack socket will be the hello</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # message.  We&#39;ll use this to output the available channels.</span>
    <span class="pl-vo" style="box-sizing: border-box;">IO</span>.puts <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>Available channels: <span class="pl-s2" style="box-sizing: border-box; color: rgb(51, 51, 51);"><span class="pl-pse" style="box-sizing: border-box;">#{</span>inspect <span class="pl-vo" style="box-sizing: border-box;">Slack</span>.<span class="pl-vo" style="box-sizing: border-box;">State</span>.channels(slack)<span class="pl-pse" style="box-sizing: border-box;">}</span></span><span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>
    {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:ok</span>, state}
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> handle_message({<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:type</span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>message<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>, response}, slack, state) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    <span class="pl-vo" style="box-sizing: border-box;">IO</span>.puts <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>message<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>
    <span class="pl-vo" style="box-sizing: border-box;">IO</span>.inspect response
    <span class="pl-vo" style="box-sizing: border-box;">IO</span>.puts <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>slack<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>
    <span class="pl-vo" style="box-sizing: border-box;">IO</span>.inspect slack
    <span class="pl-vo" style="box-sizing: border-box;">IO</span>.puts <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>state<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>
    <span class="pl-vo" style="box-sizing: border-box;">IO</span>.inspect state

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # While our bot is connected, we&#39;ll send an upcased reply to all messages</span>
    <span class="pl-vo" style="box-sizing: border-box;">Slack</span>.send_message(<span class="pl-vo" style="box-sizing: border-box;">String</span>.upcase(response.text), response.channel, slack)

    {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:ok</span>, state}
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> handle_message({<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:type</span>, type, _response}, _slack, state) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    <span class="pl-vo" style="box-sizing: border-box;">IO</span>.puts <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>some other type<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>
    {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:ok</span>, state}
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">And that&#39;s basically it. I&#39;m using this as a framework to start our slack bot, and I&#39;ll just run it forever and keep adding features to it. It&#39;s so freaking easy! See you soon!</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Resources</h2>

<ul class="task-list" style="box-sizing: border-box; padding-right: 0px; padding-left: 2em; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">
	<li style="box-sizing: border-box;"><a href="https://github.com/BlakeWilliams/Elixir-Slack" rel="noreferrer" style="box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;">BlakeWilliams/Elixir-Slack</a></li>
	<li style="box-sizing: border-box;"><a href="http://hexdocs.pm/slack/" rel="noreferrer" style="box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;">Slack on hexdocs.pm</a></li>
	<li style="box-sizing: border-box;"><a href="https://api.slack.com/rtm" rel="noreferrer" style="box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;">Slack Real Time Messaging API</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=52658">170_Building_a_Slack_Bot.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=52659">170_Building_a_Slack_Bot.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=52660">170_magiccitytech_slack.tar.gz</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-2981c3e60955bf57de1ee08d61839371e44fff58</guid>
      <pubDate>Fri, 19 Jun 2015 08:16:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/52658/170_Building_a_Slack_Bot.mp4" length="52942633" type="video/mp4"/>
    </item>
    <item>
      <title><![CDATA[169 - Fractals, Part 2]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=808</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><h1 style="box-sizing: border-box; font-size: 2.25em; margin-right: 0px; margin-bottom: 16px; margin-left: 0px; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; margin-top: 0px !important;">Episode 169: Fractals, Part 2</h1>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">In 3 previous episodes we built a Logo interpreter and a module for evolving L Systems. Today we&#39;ll combine them to show how you can generate interesting graphics. Let&#39;s get started.</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Project</h2>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">I&#39;ve tagged the fractal_playground with&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">before_episode_169</code></p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">We&#39;ll add the logo project to our dependencies:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:logo</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">github:</span> <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>knewter/logo<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>}</pre>
</div>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
mix deps.get</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">OK, now we&#39;re going to just build a quick test for a module that reduces a string into a list of functions and arguments to apply against our turtle:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defmodule</span> <span class="pl-en" style="box-sizing: border-box; color: rgb(121, 93, 163);">LogoMappingTest</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">use</span> <span class="pl-vo" style="box-sizing: border-box;">ExUnit</span>.<span class="pl-vo" style="box-sizing: border-box;">Case</span>

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # We expect to have a list of mappings from a character to a function and</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # arguments.  Here I&#39;ll define some we&#39;ll use later.</span>
  <span class="pl-vo" style="box-sizing: border-box;">@mappings</span> %{
    <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>A<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=&gt;</span> {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:forward</span>, [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">10</span>]},
    <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>-<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=&gt;</span> {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:right</span>, [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">30</span>]},
    <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>B<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=&gt;</span> {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:forward</span>, [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">10</span>]},
    <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>+<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=&gt;</span> {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:left</span>, [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">30</span>]},
  }

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # Now we want to make sure that our mapping works.</span>
  test <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>maps an alphabet to logo function calls<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    assert [
      {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:forward</span>, [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">10</span>]},
      {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:right</span>, [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">30</span>]},
      {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:forward</span>, [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">10</span>]},
      {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:left</span>, [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">30</span>]}
    ] <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">LogoMapping</span>.map(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>A-B+<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>, <span class="pl-vo" style="box-sizing: border-box;">@mappings</span>)
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Honestly, this is easily the smallest thing that could justify being a function; we&#39;re basically putting some&nbsp;<em style="box-sizing: border-box;">tiny</em>&nbsp;sugar on top of Enum.map. Here&#39;s the implementation anyway:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defmodule</span> <span class="pl-en" style="box-sizing: border-box; color: rgb(121, 93, 163);">LogoMapping</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> map(string, mappings) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    string
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> <span class="pl-vo" style="box-sizing: border-box;">String</span>.graphemes
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.map(<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">fn</span>(char) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span>
      mappings[char]
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>)
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">So this is comically tiny. When I first did this I had a mental block and this was a larger function, in which I&#39;d implemented map in terms of reduce manually. Once I realized what I&#39;d done I just mocked myself for a while. Still, I like having this chunk of code wrapped up. Run the tests, and they&#39;ll pass.</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Next, we&#39;re just going to implement this thing. We&#39;ll make an example script:</p>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
mkdir examples
vim examples/sierpinski.exs</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">And on to the show. We&#39;ll set up an L system I grabbed off of wikipedia:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defmodule</span> <span class="pl-en" style="box-sizing: border-box; color: rgb(121, 93, 163);">Sierpinski</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">import</span> <span class="pl-vo" style="box-sizing: border-box;">Logo</span>.<span class="pl-vo" style="box-sizing: border-box;">Instance</span>

  <span class="pl-vo" style="box-sizing: border-box;">@rules</span> %{
    <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>A<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=&gt;</span> <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>B-A-B<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>,
    <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>B<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=&gt;</span> <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>A+B+A<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>
  }
  <span class="pl-vo" style="box-sizing: border-box;">@axiom</span> <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>A<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">We&#39;ll build a quick function to iterate through our L System a set number of times - we&#39;re wrapping this up in a run function:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defmodule</span> <span class="pl-en" style="box-sizing: border-box; color: rgb(121, 93, 163);">Sierpinski</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # ...</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> run(iterations) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    runs <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">LSystem</span>.run(<span class="pl-vo" style="box-sizing: border-box;">@axiom</span>, <span class="pl-vo" style="box-sizing: border-box;">@rules</span>, steps)
    [output<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span>_] <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.reverse(runs)
    <span class="pl-vo" style="box-sizing: border-box;">IO</span>.inspect output
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

<span class="pl-vo" style="box-sizing: border-box;">Sierpinski</span>.run(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">5</span>)</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">We&#39;ll map comma-big-t to run our example:</p>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">:map ,T mix run examples/sierpinski.exs&lt;cr&gt;
</code></pre>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Go ahead and run it and we should get the text output of 5 runs through this L system ((( do it )))</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Alright, now we want to map that string to functions that get passed to our turtle. Let&#39;s do that:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  <span class="pl-vo" style="box-sizing: border-box;">@angle</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">60</span>
  <span class="pl-vo" style="box-sizing: border-box;">@distance</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">10</span>
  <span class="pl-vo" style="box-sizing: border-box;">@mappings</span> %{
    <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>A<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=&gt;</span> {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:forward</span>, [<span class="pl-vo" style="box-sizing: border-box;">@distance</span>]},
    <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>B<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=&gt;</span> {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:forward</span>, [<span class="pl-vo" style="box-sizing: border-box;">@distance</span>]},
    <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>-<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=&gt;</span> {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:right</span>, [<span class="pl-vo" style="box-sizing: border-box;">@angle</span>]},
    <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>+<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=&gt;</span> {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:left</span>, [<span class="pl-vo" style="box-sizing: border-box;">@angle</span>]}
  }

  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> run(steps) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    runs <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">LSystem</span>.run(<span class="pl-vo" style="box-sizing: border-box;">@axiom</span>, <span class="pl-vo" style="box-sizing: border-box;">@rules</span>, steps)
    [output<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span>_] <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.reverse(runs)

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # We&#39;ll map our output to the logo functions</span>
    moves <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">LogoMapping</span>.map(output, <span class="pl-vo" style="box-sizing: border-box;">@mappings</span>)

    <span class="pl-vo" style="box-sizing: border-box;">IO</span>.puts inspect moves
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">We can run it now, and we see some weird looking maps - that&#39;s because our arguments are all 1 character lists that can be represented as ASCII, so don&#39;t be alarmed. Now all that&#39;s left is to set the stage for our turtle, then pass these functions into it using apply:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> run(steps) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    runs <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">LSystem</span>.run(<span class="pl-vo" style="box-sizing: border-box;">@axiom</span>, <span class="pl-vo" style="box-sizing: border-box;">@rules</span>, steps)
    [output<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span>_] <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.reverse(runs)
    moves <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">LogoMapping</span>.map(output, <span class="pl-vo" style="box-sizing: border-box;">@mappings</span>)

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # We&#39;ll start a new turtle and set him up near the center of the canvas with</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # a red pen down.</span>
    {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:ok</span>, turtle} <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">Logo</span>.<span class="pl-vo" style="box-sizing: border-box;">Instance</span>.start

    turtle
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> move_to({<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">300</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">300</span>})
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> color({<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">255</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>})
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> pen_down

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # We&#39;ll apply each move to our turtle</span>
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">for</span> {fun, args} <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&lt;</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span> moves <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
      apply(<span class="pl-vo" style="box-sizing: border-box;">Logo</span>.<span class="pl-vo" style="box-sizing: border-box;">Instance</span>, fun, [turtle] <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">++</span> args)
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # And then all that&#39;s left is to draw him</span>
    <span class="pl-vo" style="box-sizing: border-box;">Logo</span>.<span class="pl-vo" style="box-sizing: border-box;">Window</span>.start(turtle)
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Alright, run it now, and we get something really fun ((( do it )))</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Let&#39;s run a few more iterations</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">((( increase to 6, run it, reduce distance per iteration so it fits on the canvas )))</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Alright, what does 7 look like?</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">((( do it )))</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">That&#39;s obviously a sierpinski triangle, so that&#39;s fantastic.</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">It&#39;s also a little fun to skew it by changing the angle slightly ((( change it to 58 and run it )))</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Summary</h2>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">In today&#39;s episode, we combined our L Systems and our Logo interpreter to generate a sierpinski triangle. There are a lot of really fun examples you can run through on wikipedia, but some of the extra intriguing ones require the ability to push and pop the turtle&#39;s position and angle onto a stack. In an upcoming episode we&#39;ll introduce that and draw some more intricate graphics. See you soon!</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Resources</h2>

<ul class="task-list" style="box-sizing: border-box; padding-right: 0px; padding-left: 2em; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">
	<li style="box-sizing: border-box;"><a href="https://github.com/knewter/logo" rel="noreferrer" style="box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;">knewter/logo</a></li>
	<li style="box-sizing: border-box;"><a href="https://github.com/knewter/fractal_playground" rel="noreferrer" style="box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;">knewter/fractal_playground</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=52580">169_Fractals_Part_2.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=52581">169_Fractals_Part_2.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-a6df8eb71e88c7098b7cd81e4c41a950cc402917</guid>
      <pubDate>Wed, 17 Jun 2015 09:19:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/52580/169_Fractals_Part_2.mp4" length="41288894" type="video/mp4"/>
    </item>
    <item>
      <title><![CDATA[168 - Continuous Integration]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=784</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><h1 style="box-sizing: border-box; font-size: 2.25em; margin-right: 0px; margin-bottom: 16px; margin-left: 0px; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; margin-top: 0px !important;">Episode 168: Continuous Integration</h1>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Continuous Integration is the process of merging code branches regularly. When people talk about Continuous Integration these days, they almost always are referring to it in conjunction with tests, of course. It does no good to be sure that your code merges cleanly if it no longer performs the desired task!</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Today&#39;s episode is going to cover performing Continuous Integration in Elixir by way of the Semaphore hosted Continuous Integration service, running the tests for a Phoenix application. Let&#39;s get started.</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Project</h2>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">We&#39;re going to start a new Phoenix project whose purpose is to collect images from twitter that are tagged with #elixirfriends and collect them. We&#39;ll not build the Twitter integration yet, but we&#39;ll build the Phoenix application that can display the data.</p>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
mix phoenix.new elixir_friends
<span class="pl-s3" style="box-sizing: border-box; color: rgb(0, 134, 179);">cd</span> elixir_friends
mix phoenix.server</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">((( visit http://localhost:4000 )))</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Alright, so here&#39;s a new phoenix app using the latest version of the framework. Now let&#39;s use its generators to build a quickie data model for the images:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
mix phoenix.gen.html <span class="pl-vo" style="box-sizing: border-box;">Post</span> posts <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">image_url:</span>string <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">content:</span>string <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">source_url:</span>string</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">So we&#39;ll just call these Posts, that have an&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">image_url</code>, some&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">content</code>, and a&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">source_url</code>. It&#39;s not a crazy complicated data model but this is a quick thing we want to deploy so no big deal.</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Let&#39;s add the resource to the router:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  scope <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>/<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>, <span class="pl-vo" style="box-sizing: border-box;">ElixirFriends</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    pipe_through <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:browser</span> <span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);"># Use the default browser stack</span>

    get <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>/<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>, <span class="pl-vo" style="box-sizing: border-box;">PageController</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:index</span>
    resources <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>/posts<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>, <span class="pl-vo" style="box-sizing: border-box;">PostController</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Then we&#39;ll create the database and migrate it up:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
mix ecto.create
mix ecto.migrate</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">OK, so now there are some posts that can be created. Let&#39;s look at that:</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">((( http://localhost:4000/posts )))</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">We&#39;ll make a post:</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">((( do it, using: image_url:<a href="http://fc00.deviantart.net/fs71/i/2012/176/8/f/marvin_the_paranoid_android_by_wouthezx-d54uny0.jpg" rel="noreferrer" style="box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;">http://fc00.deviantart.net/fs71/i/2012/176/8/f/marvin_the_paranoid_android_by_wouthezx-d54uny0.jpg</a>content: Marvin the Martian source_url:&nbsp;<a href="http://elixirsips.com/" rel="noreferrer" style="box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;">http://elixirsips.com</a>&nbsp;)))</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">OK, so this works and we&#39;ll visit it at the show url:</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">((( do it )))</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Right, so we want this to show the image in an image tag, and link to the source. We&#39;ll define this desire in the controller test for now. Let&#39;s say that the show page ought to have an image tag with our image&#39;s source. Open up&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">test/controllers/post_controller_test.exs</code>:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  test <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>shows an image for the post<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>, %{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">conn:</span> conn} <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    post <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">Repo</span>.insert %<span class="pl-vo" style="box-sizing: border-box;">Post</span>{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">image_url:</span> <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>http://fc00.deviantart.net/fs71/i/2012/176/8/f/marvin_the_paranoid_android_by_wouthezx-d54uny0.jpg<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>}
    conn <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> get conn, post_path(conn, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:show</span>, post)
    assert html_response(conn, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">200</span>) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">~</span> <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>Show post<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>
    assert html_response(conn, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">200</span>) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">~</span> <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>&lt;img src=&#39;http://fc00.deviantart.net/fs71/i/2012/176/8/f/marvin_the_paranoid_android_by_wouthezx-d54uny0.jpg&#39; /&gt;<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Run the tests, and they&#39;ll fail. Let&#39;s fix the template.</p>

<div class="highlight highlight-html" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
&lt;<span class="pl-ent" style="box-sizing: border-box; color: rgb(99, 163, 92);">h2</span>&gt;Show post&lt;/<span class="pl-ent" style="box-sizing: border-box; color: rgb(99, 163, 92);">h2</span>&gt;

&lt;<span class="pl-ent" style="box-sizing: border-box; color: rgb(99, 163, 92);">img</span> <span class="pl-e" style="box-sizing: border-box; color: rgb(121, 93, 163);">src</span>=<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&#39;</span>&lt;%= @post.image_url %&gt;<span class="pl-pds" style="box-sizing: border-box;">&#39;</span></span> /&gt;</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Run the test again, and it passes. Now this isn&#39;t anything fancy, but it&#39;s a start. Now let&#39;s see about using Semaphore to run the tests everytime we commit changes to this project. First I&#39;ll create it on github:</p>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">git init .
git add .
git commit -m"Initial checkin"
hub create
git push origin master
</code></pre>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">OK, so now it&#39;s up on GitHub. Next we&#39;ll pull up&nbsp;<a href="https://semaphoreci.com/" rel="noreferrer" style="box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;">Semaphore CI</a>&nbsp;where I&#39;m logged in already. Let&#39;s add a new project.</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">((( do it )))</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">It takes quite a while to list my projects because I have like 400 of them. We&#39;ll find&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">elixir_friends</code>&nbsp;in the list ((( use ctrl+f to find it )))</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">OK, so we&#39;ll just click through and it will see it&#39;s an elixir project. We can continue, and the predefined settings would work for a basic elixir library or something like that. Since we have a Phoenix application though, we need a postgres database. Semaphore provides the database username and password as environment variables, so we&#39;ll provide for that in our test configuration:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">username:</span> <span class="pl-vo" style="box-sizing: border-box;">System</span>.get_env(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>DATABASE_POSTGRESQL_USERNAME<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">||</span> <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>postgres<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>,
  <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">password:</span> <span class="pl-vo" style="box-sizing: border-box;">System</span>.get_env(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>DATABASE_POSTGRESQL_PASSWORD<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">||</span> <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>postgres<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>,</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">We&#39;ll push up again, and now our tests are passing. Now every time we push to our GitHub repo, Semaphore&#39;s running our tests. Fantastic.</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Summary</h2>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">In today&#39;s episode we saw how to use Semaphore CI to run our Phoenix application&#39;s integration tests every time we push new commits. We&#39;ll look at following the build up with a Heroku deploy for Continuous Deployment in a later episode. See you soon!</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Resources</h2>

<ul class="task-list" style="box-sizing: border-box; padding-right: 0px; padding-left: 2em; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">
	<li style="box-sizing: border-box;"><a href="http://en.wikipedia.org/wiki/Continuous_integration" rel="noreferrer" style="box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;">Continuous Integration on Wikipedia</a></li>
	<li style="box-sizing: border-box;"><a href="https://semaphoreci.com/" rel="noreferrer" style="box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;">Semaphore CI</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=51837">168_Continuous_Integration.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=51838">168_Continuous_Integration.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-e0e5332038b108ca27551d1198cd16e3e957b0b7</guid>
      <pubDate>Thu, 04 Jun 2015 22:49:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/51837/168_Continuous_Integration.mp4" length="55146239" type="video/mp4"/>
    </item>
    <item>
      <title><![CDATA[167 - Implementing Logo, Part 2]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=777</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><h1 style="box-sizing: border-box; font-size: 2.25em; margin-right: 0px; margin-bottom: 16px; margin-left: 0px; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; margin-top: 0px !important;">Episode 167: Implementing Logo, Part 2</h1>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">In the last episode, we implemented the core of a Logo interpreter. Today we&#39;ll add on a renderer, because without a renderer it&#39;s basically a few unit tests that pass which isn&#39;t that impressive to show off. Let&#39;s get started.</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Project</h2>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">I&#39;ve tagged the code before this episode as&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">before_episode_167</code>&nbsp;if you want to follow along.</p>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
git checkout before_episode_167</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">So before we started the last episode I added a Logo.Renderer that just drew a box, to make sure we&#39;d have an easy way to start drawing when the time came. We can see it in iex:</p>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
iex -S mix</pre>
</div>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">Logo.Window.start([])
</code></pre>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">I also wrote up an example script that we haven&#39;t explored yet. Let&#39;s look at it and tweak it a bit to pass our turtle instance into the window we render:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);"># We&#39;ll import Logo.Instance so we don&#39;t have to write that bit all the time</span>
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">import</span> <span class="pl-vo" style="box-sizing: border-box;">Logo</span>.<span class="pl-vo" style="box-sizing: border-box;">Instance</span>

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);"># We&#39;re starting an instance here</span>
{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:ok</span>, logo} <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">Logo</span>.<span class="pl-vo" style="box-sizing: border-box;">Instance</span>.start
logo
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> color({<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">255</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>})
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> pen_down
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> forward(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">400</span>)
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> right(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">90</span>)
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> forward(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">200</span>)
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> right(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">180</span>)
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> forward(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">400</span>)

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);"># Finally, we&#39;ll pass our instance into the Logo.Window to be drawn</span>
<span class="pl-vo" style="box-sizing: border-box;">Logo</span>.<span class="pl-vo" style="box-sizing: border-box;">Window</span>.start(logo)</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">OK, so next we need to open up the window and just fix a few references to make it clear what we&#39;re passing through all these functions:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);"># Just :%s/config/instance/g in lib/logo/window.ex</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Finally, we&#39;ll open up the renderer and fix this reference there as well:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);"># same deal, :%s/config/instance/g</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">OK, so that&#39;s got us ready to actually implement the rendering. Let&#39;s run the tests, which will at least confirm I didn&#39;t fat-finger any syntax changes.</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">((( do it )))</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Back in the renderer we&#39;ll look at the render function. Before I change anything, I&#39;ve got comma-big-t mapped to running the example, which at present should run the Turtle but then follow it up with running the renderer, which just draws a square somewhere on the canvas.</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">((( do it )))</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Now in the renderer and write some hopeful code to help us think about what we want to do.</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> render(canvas, instance) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # So we&#39;ve passed in the instance.  Let&#39;s get the turtle out of this</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # instance</span>
    turtle <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">Instance</span>.get_turtle(instance)
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # Now we have a turtle...but we really need to draw some shapes.  The turtle</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # doesn&#39;t store any shapes though.  It&#39;s just an actor that&#39;s doing its</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # work.  We want to take the shapes off of the turtle, and then draw a list</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # of them.  What we want to do is this:</span>

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # draw_shapes(canvas, turtle.shapes)</span>

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # But we can&#39;t grab those yet, so we&#39;ll leave that in but commented out.</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # Let&#39;s think through what we want to be in that turtle.shapes key.</span>

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # Really we just need a list of shapes to draw, and a shape is named tuple.</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # We&#39;ll start out defining a line, because that&#39;s all we need for the</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # fractals.  We&#39;ll leave a pattern for introducing new shapes later though.</span>
    draw_shapes(canvas, [{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:line</span>, {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>}, {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">100</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">100</span>}}])
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # Alright, so now we want a recursive function that goes through the shapes,</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # drawing until the list is empty.</span>

  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> draw_shapes(canvas, [head<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span>rest]) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    draw_shape(canvas, head)
    draw_shapes(canvas, rest)
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> draw_shapes(_canvas, []), <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>: <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:ok</span>

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # Now all we have to do is define how to draw a line.  We&#39;ll just make a pen</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # for now - it&#39;s immediately obvious that we need to store the colors with the</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # shapes though.</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> draw_shape(canvas, {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:line</span>, {x1, y1}, {x2, y2}}) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # So here&#39;s a red pen for our line</span>
    pen <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:wxPen</span>.new({<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">255</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">255</span>})
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # We&#39;ll set the pen in our graphics context</span>
    <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:wxGraphicsContext</span>.setPen(canvas, pen)
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # And now we just use the drawLines function, which takes a list of points</span>
    <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:wxGraphicsContext</span>.drawLines(canvas, [{x1, y1}, {x2, y2}])
    <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:ok</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Let&#39;s run the example, and we should end up with a line from {0, 0} to {100, 100}.</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">((( do it )))</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Now all we need to do is build up the list of shapes from the turtle as it walks around. Let&#39;s open up the Logo.Instance and add that property to it to store the shapes:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defmodule</span> <span class="pl-en" style="box-sizing: border-box; color: rgb(121, 93, 163);">Turtle</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defstruct</span> [
      <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">color:</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">nil</span>,
      <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">pen_down:</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">false</span>,
      <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">x:</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>,
      <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">y:</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>,
      <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">angle:</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>,
      <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">shapes:</span> []
    ]
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">The right way to move on from here would be to write a test, but I&#39;m kind of eager to see the turtle drawing so let&#39;s skip it this once...may future-me forgive us. Go down to where we handle the cast for forward and we&#39;ll add a shape if the pen is down:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> handle_cast({<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:forward</span>, amount}, turtle) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    delta_x <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> amount <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">*</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:math</span>.cos(radians(turtle.angle))
    delta_y <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> amount <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">*</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:math</span>.sin(radians(turtle.angle))
    shapes <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> turtle.shapes
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">if</span>(turtle.pen_down) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
      shapes <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> [{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:line</span>, {turtle.x, turtle.y}, {turtle.x <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">+</span> delta_x, turtle.y <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">+</span> delta_y}}<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span>shapes]
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
    {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:noreply</span>, %<span class="pl-vo" style="box-sizing: border-box;">Turtle</span>{turtle<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">x:</span> turtle.x <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">+</span> delta_x, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">y:</span> turtle.y <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">+</span> delta_y, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">shapes:</span> shapes}}
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">There&#39;s almost certainly a nicer way to handle that, but this works and it&#39;s not the worst code I&#39;ve ever written. This should be sufficient to make our renderer work, so let&#39;s go back to the renderer and fetch the shapes instead of passing in our hard coded shapes:</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">((( do it )))</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">With that in place all we really need to do is run the example and see what we end up with.</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">((( do it, comma-big-t )))</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Here we can see that we don&#39;t quite have a T. That&#39;s because we started off in the top left, pointing right, rather than in the middle pointing up. Rather than solving this in a perfect manner, I think we&#39;d just like to move our turtle to a specific location at the beginning of our example.</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
logo
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> move_to({<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">300</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">300</span>})
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> color({<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">255</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>})
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> pen_down
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> forward(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">400</span>)
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> right(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">90</span>)
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> forward(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">200</span>)
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> right(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">180</span>)
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> forward(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">400</span>)

<span class="pl-vo" style="box-sizing: border-box;">Logo</span>.<span class="pl-vo" style="box-sizing: border-box;">Window</span>.start(logo)</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">So of course this doesn&#39;t exist yet. We&#39;ll open up the tests and implement it quickly:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  test <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>can move to a particular position<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>, meta <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    turtle <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> meta[<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:pid</span>]
             <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> <span class="pl-vo" style="box-sizing: border-box;">Instance</span>.move_to({<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">300</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">300</span>})
             <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> <span class="pl-vo" style="box-sizing: border-box;">Instance</span>.get_turtle
    assert <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">300</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> turtle.x
    assert <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">300</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> turtle.y
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">We can run the tests, and obviously this function doesn&#39;t exist. Open up Logo.Instance:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> move_to(pid, {x, y}) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:ok</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">GenServer</span>.cast(pid, {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:move_to</span>, {x, y}})
    pid
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  #...</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> handle_cast({<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:move_to</span>, {x, y}}, turtle) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:noreply</span>, %<span class="pl-vo" style="box-sizing: border-box;">Turtle</span>{turtle<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">x:</span> x, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">y:</span> y}}
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Run the tests, and they&#39;ll pass. Now let&#39;s run the example again and our T should not be stuck in the top right any longer:</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">((( comma-big-T )))</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">OK, so our basic example works. Now I&#39;m going to add a more interesting example that I got from an online logo gallery and ported.</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">((( open examples/interesting.exs )))</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);"># Ported from https://turight(leacademy.com/view/programs/555aa690f45859910a3c986a/en</span>

<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">import</span> <span class="pl-vo" style="box-sizing: border-box;">Logo</span>.<span class="pl-vo" style="box-sizing: border-box;">Instance</span>

{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:ok</span>, logo} <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">Logo</span>.<span class="pl-vo" style="box-sizing: border-box;">Instance</span>.start
logo
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> move_to({<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">300</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">300</span>})
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> color({<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">255</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>})
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> pen_down
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> right(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">45</span>)
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> forward(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">200</span>)
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> right(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">90</span>)
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> forward(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">200</span>)
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> right(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">90</span>)
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> forward(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">200</span>)
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> right(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">90</span>)
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> forward(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">200</span>)
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> right(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">90</span>)
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> forward(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">200</span>)
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> right(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">90</span>)
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> forward(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">50</span>)
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> right(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">90</span>)
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> forward(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">50</span>)
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> left(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">90</span>)
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> forward(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">50</span>)
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> right(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">90</span>)
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> forward(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">50</span>)
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> left(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">90</span>)
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> forward(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">50</span>)
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> right(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">90</span>)
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> forward(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">50</span>)
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> left(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">90</span>)
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> forward(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">50</span>)
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> right(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">90</span>)
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> forward(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">50</span>)
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> right(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">90</span>)
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> forward(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">200</span>)
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> right(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">90</span>)
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> forward(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">150</span>)
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> right(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">90</span>)
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> forward(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">50</span>)
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> right(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">90</span>)
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> forward(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">50</span>)
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> left(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">90</span>)
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> forward(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">50</span>)
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> right(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">90</span>)
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> forward(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">50</span>)
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> left(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">90</span>)
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> forward(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">50</span>)
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> right(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">90</span>)
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> forward(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">50</span>)

<span class="pl-vo" style="box-sizing: border-box;">Logo</span>.<span class="pl-vo" style="box-sizing: border-box;">Window</span>.start(logo)</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Now let&#39;s run it:</p>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
mix run examples/interesting.exs</pre>
</div>

<h3 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.43; font-size: 1.5em; position: relative; font-weight: bold; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Summary</h3>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Sweet. Our logo interpreter works essentially out of the box (granted, we manually parsed it into function calls) with a logo program from elsewhere, and we get some interesting output. We&#39;ll use this later to explore L System fractals. See you soon!</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Resources</h2>

<ul class="task-list" style="box-sizing: border-box; padding-right: 0px; padding-left: 2em; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">
	<li style="box-sizing: border-box;"><a href="https://github.com/knewter/logo" rel="noreferrer" style="box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;">knewter/logo</a></li>
	<li style="box-sizing: border-box;"><a href="http://www.erlang.org/doc/man/wx.html" rel="noreferrer" style="box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;">wx Erlang docs</a></li>
	<li style="box-sizing: border-box;"><a href="https://turtleacademy.com/view/programs/555aa690f45859910a3c986a/en" rel="noreferrer" style="box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;">The logo example I ported</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=51757">167_Implementing_Logo_Part_2.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=51758">167_Implementing_Logo_Part_2.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=51759">167_logo.tar.gz</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-e11c101e940fdf135fbf4a0c74c9dae37d0df2cf</guid>
      <pubDate>Tue, 02 Jun 2015 22:16:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/51757/167_Implementing_Logo_Part_2.mp4" length="62507095" type="video/mp4"/>
      <itunes:subtitle>Building a renderer for our Logo interpreter.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[166 - Implementing Logo, Part 1]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=776</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><h1>Episode 166: Implementing Logo, Part 1</h1>

<p>In Episode 164 we built a module to evaluate L systems. The episode was titled fractals, but until we take the next step it&#39;s not immediately clear why. The next step is to generate Logo programs from the resulting output. There are no Logo interpreters that I can find for Erlang or Elixir, so I suppose we&#39;ll just go ahead and build our own. Let&#39;s get started.</p>

<h2>Project</h2>

<p>So I&#39;ve built a basic app that can render to a wx canvas, using Extris&#39; window module as a foundation. You can find it tagged <code>before_episode_166</code> in the logo repo I&#39;ve linked to in the resources section. Let&#39;s look at the README.</p>

<p>((( do it )))</p>

<p>So here you can see a couple of example bits of code. We&#39;re going to implement the second bit. We don&#39;t need a parser yet to show our fractals, but we&#39;ll probably build a parser for the logo language later. For now, we&#39;re just going to provide functions into a genserver that provide the same basic semantics.</p>

<p>Let&#39;s open up the test file and start defining the genserver:</p>

<div class="highlight highlight-elixir">
<pre>
<span class="pl-c">  # We want to have an instance for each of our tests, so let&#39;s refactor this to</span>
<span class="pl-c">  # use a setup...</span>
  setup <span class="pl-k">do</span>
    {<span class="pl-c1">:ok</span>, pid} <span class="pl-k">=</span> <span class="pl-vo">Logo</span>.<span class="pl-vo">Instance</span>.start
    {<span class="pl-c1">:ok</span>, <span class="pl-c1">pid:</span> pid}
  <span class="pl-k">end</span>

  test <span class="pl-s1"><span class="pl-pds">&quot;</span>can start a logo instance<span class="pl-pds">&quot;</span></span>, meta <span class="pl-k">do</span>
    assert is_pid(meta[<span class="pl-c1">:pid</span>])
  <span class="pl-k">end</span></pre>
</div>

<p>Alright, now let&#39;s start to implement the functions from the README. The first thing we need to support is setting the color.</p>

<div class="highlight highlight-elixir">
<pre>
  <span class="pl-k">alias</span> <span class="pl-vo">Logo</span>.<span class="pl-vo">Instance</span>
<span class="pl-c">  #...</span>
  test <span class="pl-s1"><span class="pl-pds">&quot;</span>can set the color<span class="pl-pds">&quot;</span></span>, meta <span class="pl-k">do</span>
    turtle <span class="pl-k">=</span>  meta[<span class="pl-c1">:pid</span>]
              <span class="pl-k">|</span><span class="pl-k">&gt;</span> <span class="pl-vo">Instance</span>.color({<span class="pl-c1">255</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>})
              <span class="pl-k">|</span><span class="pl-k">&gt;</span> <span class="pl-vo">Instance</span>.get_turtle
    assert {<span class="pl-c1">255</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>} <span class="pl-k">=</span> turtle.color
  <span class="pl-k">end</span></pre>
</div>

<p>Alright, so we get an error. Let&#39;s open up the Logo.Instance module and add the functions necessary for this to pass:</p>

<div class="highlight highlight-elixir">
<pre>
<span class="pl-k">defmodule</span> <span class="pl-en">Logo.Instance</span> <span class="pl-k">do</span>
  <span class="pl-k">use</span> <span class="pl-vo">GenServer</span>
  <span class="pl-k">alias</span> <span class="pl-v">__MODULE__</span>

<span class="pl-c">  # So we know we need a turtle to store the color</span>
  <span class="pl-k">defmodule</span> <span class="pl-en">Turtle</span> <span class="pl-k">do</span>
    <span class="pl-k">defstruct</span> [
      <span class="pl-c1">color:</span> <span class="pl-c1">nil</span>
    ]
  <span class="pl-k">end</span>

<span class="pl-c">  # Public API</span>
  <span class="pl-k">def</span> start <span class="pl-k">do</span>
<span class="pl-c">    # We want to pass in a new instance of our server&#39;s turtle when we start it</span>
<span class="pl-c">    # up</span>
    <span class="pl-vo">GenServer</span>.start(<span class="pl-vo">Instance</span>, %<span class="pl-vo">Turtle</span>{}, [])
  <span class="pl-k">end</span>

<span class="pl-c">  # We&#39;ll implement the public color function.  Note that we&#39;re returning the</span>
<span class="pl-c">  # pid so that this will be a chainable API</span>
  <span class="pl-k">def</span> color(pid, {r, g, b}) <span class="pl-k">do</span>
    <span class="pl-c1">:ok</span> <span class="pl-k">=</span> <span class="pl-vo">GenServer</span>.cast(pid, {<span class="pl-c1">:color</span>, {r, g, b}})
    pid
  <span class="pl-k">end</span>

<span class="pl-c">  # `get_turtle` won&#39;t be part of the chainable API since it&#39;s a call rather than a</span>
<span class="pl-c">  # cast.</span>
  <span class="pl-k">def</span> get_turtle(pid) <span class="pl-k">do</span>
    <span class="pl-vo">GenServer</span>.call(pid, <span class="pl-c1">:get_turtle</span>)
  <span class="pl-k">end</span>

<span class="pl-c">  # Server callbacks</span>
  <span class="pl-k">def</span> init(turtle) <span class="pl-k">do</span>
    {<span class="pl-c1">:ok</span>, turtle}
  <span class="pl-k">end</span>

<span class="pl-c">  # Handling the color cast is trivial</span>
  <span class="pl-k">def</span> handle_cast({<span class="pl-c1">:color</span>, {r, g, b}}, turtle) <span class="pl-k">do</span>
    {<span class="pl-c1">:noreply</span>, %<span class="pl-vo">Turtle</span>{turtle<span class="pl-k">|</span><span class="pl-c1">color:</span> {r, g, b}}}
  <span class="pl-k">end</span>

<span class="pl-c">  # So is the get_turtle call</span>
  <span class="pl-k">def</span> handle_call(<span class="pl-c1">:get_turtle</span>, _from, turtle) <span class="pl-k">do</span>
    {<span class="pl-c1">:reply</span>, turtle, turtle}
  <span class="pl-k">end</span>
<span class="pl-k">end</span></pre>
</div>

<p>Alright, run the tests, and they should pass. This isn&#39;t a complicated bit of code at all at this point, so I don&#39;t really think it deserves any explanation. We&#39;ll power through and implement the rest of the API mentioned in the README. Next is <code>pen_down</code>.</p>

<div class="highlight highlight-elixir">
<pre>
  test <span class="pl-s1"><span class="pl-pds">&quot;</span>can put the pen down<span class="pl-pds">&quot;</span></span>, meta <span class="pl-k">do</span>
    turtle <span class="pl-k">=</span> meta[<span class="pl-c1">:pid</span>]
            <span class="pl-k">|</span><span class="pl-k">&gt;</span> <span class="pl-vo">Instance</span>.pen_down
            <span class="pl-k">|</span><span class="pl-k">&gt;</span> <span class="pl-vo">Instance</span>.get_turtle
    assert turtle.pen_down
  <span class="pl-k">end</span></pre>
</div>

<p>There&#39;s our test. We&#39;ll implement it rapidly.</p>

<div class="highlight highlight-elixir">
<pre>
  <span class="pl-k">defmodule</span> <span class="pl-en">Turtle</span> <span class="pl-k">do</span>
<span class="pl-c">    # Here we&#39;re just going to track a boolean that specifies whether the pen is</span>
<span class="pl-c">    # down or not</span>
    <span class="pl-k">defstruct</span> [
      <span class="pl-c1">color:</span> <span class="pl-c1">nil</span>,
      <span class="pl-c1">pen_down:</span> <span class="pl-c1">false</span>
    ]
  <span class="pl-k">end</span>
<span class="pl-c">  #...</span>
<span class="pl-c">  # And a function to put it down</span>
  <span class="pl-k">def</span> pen_down(pid) <span class="pl-k">do</span>
    <span class="pl-c1">:ok</span> <span class="pl-k">=</span> <span class="pl-vo">GenServer</span>.cast(pid, <span class="pl-c1">:pen_down</span>)
    pid
  <span class="pl-k">end</span>
<span class="pl-c">  #...</span>
<span class="pl-c">  # And in our handle_cast we&#39;ll update the turtle to put the pen down</span>
  <span class="pl-k">def</span> handle_cast(<span class="pl-c1">:pen_down</span>, turtle) <span class="pl-k">do</span>
    {<span class="pl-c1">:noreply</span>, %<span class="pl-vo">Turtle</span>{turtle<span class="pl-k">|</span><span class="pl-c1">pen_down:</span> <span class="pl-c1">true</span>}}
  <span class="pl-k">end</span></pre>
</div>

<p>Run the tests and they&#39;ll pass.</p>

<p>Next we need to implement forward. This requires us to start tracking x and y coordinates for our turtle. We&#39;ll start with the test:</p>

<div class="highlight highlight-elixir">
<pre>
  test <span class="pl-s1"><span class="pl-pds">&quot;</span>can move forward<span class="pl-pds">&quot;</span></span>, meta <span class="pl-k">do</span>
    turtle <span class="pl-k">=</span> meta[<span class="pl-c1">:pid</span>]
            <span class="pl-k">|</span><span class="pl-k">&gt;</span> <span class="pl-vo">Instance</span>.forward(<span class="pl-c1">400</span>)
            <span class="pl-k">|</span><span class="pl-k">&gt;</span> <span class="pl-vo">Instance</span>.get_turtle
    assert <span class="pl-c1">400</span> <span class="pl-k">=</span> turtle.x
  <span class="pl-k">end</span></pre>
</div>

<p>If we run the test, obviously there&#39;s no forward function. We&#39;ll add it:</p>

<div class="highlight highlight-elixir">
<pre>
<span class="pl-c">  # We need to add coordinates for the turtle</span>
  <span class="pl-k">defmodule</span> <span class="pl-en">Turtle</span> <span class="pl-k">do</span>
    <span class="pl-k">defstruct</span> [
      <span class="pl-c1">color:</span> <span class="pl-c1">nil</span>,
      <span class="pl-c1">pen_down:</span> <span class="pl-c1">false</span>,
      <span class="pl-c1">x:</span> <span class="pl-c1">0</span>,
      <span class="pl-c1">y:</span> <span class="pl-c1">0</span>
    ]
  <span class="pl-k">end</span>
<span class="pl-c">  # Here&#39;s the public function</span>
  <span class="pl-k">def</span> forward(pid, amount) <span class="pl-k">do</span>
    <span class="pl-c1">:ok</span> <span class="pl-k">=</span> <span class="pl-vo">GenServer</span>.cast(pid, {<span class="pl-c1">:forward</span>, amount})
    pid
  <span class="pl-k">end</span>
<span class="pl-c">  # And the function that updates the state</span>
  <span class="pl-k">def</span> handle_cast({<span class="pl-c1">:forward</span>, amount}, turtle) <span class="pl-k">do</span>
    {<span class="pl-c1">:noreply</span>, %<span class="pl-vo">Turtle</span>{turtle<span class="pl-k">|</span><span class="pl-c1">x:</span> turtle.x <span class="pl-k">+</span> amount}}
  <span class="pl-k">end</span></pre>
</div>

<p>Run the tests and they&#39;ll pass. There are two other real issues to handle. The first is that we need to handle modifying the angle at which the turtle is pointing. This is easy enough and continues to be a typical basic state update. Let&#39;s add the test:</p>

<div class="highlight highlight-elixir">
<pre>
  test <span class="pl-s1"><span class="pl-pds">&quot;</span>can rotate<span class="pl-pds">&quot;</span></span>, meta <span class="pl-k">do</span>
    turtle <span class="pl-k">=</span> meta[<span class="pl-c1">:pid</span>]
            <span class="pl-k">|</span><span class="pl-k">&gt;</span> <span class="pl-vo">Instance</span>.right(<span class="pl-c1">90</span>)
            <span class="pl-k">|</span><span class="pl-k">&gt;</span> <span class="pl-vo">Instance</span>.get_turtle
    assert <span class="pl-c1">90</span> <span class="pl-k">=</span> turtle.angle
    turtle <span class="pl-k">=</span> meta[<span class="pl-c1">:pid</span>]
             <span class="pl-k">|</span><span class="pl-k">&gt;</span> <span class="pl-vo">Instance</span>.right(<span class="pl-c1">360</span>)
             <span class="pl-k">|</span><span class="pl-k">&gt;</span> <span class="pl-vo">Instance</span>.get_turtle
    assert <span class="pl-c1">90</span> <span class="pl-k">=</span> turtle.angle
  <span class="pl-k">end</span></pre>
</div>

<p>Alright, so there&#39;s no <code>right</code> function yet so we&#39;ll add that, along with an angle key in the Turtle:</p>

<div class="highlight highlight-elixir">
<pre>
  <span class="pl-k">defmodule</span> <span class="pl-en">Turtle</span> <span class="pl-k">do</span>
    <span class="pl-k">defstruct</span> [
      <span class="pl-c1">color:</span> <span class="pl-c1">nil</span>,
      <span class="pl-c1">pen_down:</span> <span class="pl-c1">false</span>,
      <span class="pl-c1">x:</span> <span class="pl-c1">0</span>,
      <span class="pl-c1">y:</span> <span class="pl-c1">0</span>,
      <span class="pl-c1">angle:</span> <span class="pl-c1">0</span>
    ]
  <span class="pl-k">end</span>

  <span class="pl-k">def</span> right(pid, angle) <span class="pl-k">do</span>
    <span class="pl-c1">:ok</span> <span class="pl-k">=</span> <span class="pl-vo">GenServer</span>.cast(pid, {<span class="pl-c1">:right</span>, angle})
    pid
  <span class="pl-k">end</span>

  <span class="pl-k">def</span> handle_cast({<span class="pl-c1">:right</span>, angle}, turtle) <span class="pl-k">do</span>
<span class="pl-c">    # Now this is the only quirky bit.  Since we always want this to be</span>
<span class="pl-c">    # positive, I&#39;m adding 360 to whatever it is.  Then I&#39;m using rem to make</span>
<span class="pl-c">    # sure it cycles at 360.</span>
    angle <span class="pl-k">=</span> rem(<span class="pl-c1">360</span> <span class="pl-k">+</span> turtle.angle <span class="pl-k">+</span> angle, <span class="pl-c1">360</span>)
    {<span class="pl-c1">:noreply</span>, %<span class="pl-vo">Turtle</span>{turtle<span class="pl-k">|</span><span class="pl-c1">angle:</span> angle}}
  <span class="pl-k">end</span></pre>
</div>

<p>Now we can run the tests and they&#39;ll pass. It&#39;s not in the readme, but let&#39;s go ahead and implement a <code>left</code> function as well:</p>

<div class="highlight highlight-elixir">
<pre>
  test <span class="pl-s1"><span class="pl-pds">&quot;</span>can rotate<span class="pl-pds">&quot;</span></span>, meta <span class="pl-k">do</span>
    turtle <span class="pl-k">=</span> meta[<span class="pl-c1">:pid</span>]
            <span class="pl-k">|</span><span class="pl-k">&gt;</span> <span class="pl-vo">Instance</span>.right(<span class="pl-c1">90</span>)
            <span class="pl-k">|</span><span class="pl-k">&gt;</span> <span class="pl-vo">Instance</span>.get_turtle
    assert <span class="pl-c1">90</span> <span class="pl-k">=</span> turtle.angle
    turtle <span class="pl-k">=</span> meta[<span class="pl-c1">:pid</span>]
             <span class="pl-k">|</span><span class="pl-k">&gt;</span> <span class="pl-vo">Instance</span>.right(<span class="pl-c1">360</span>)
             <span class="pl-k">|</span><span class="pl-k">&gt;</span> <span class="pl-vo">Instance</span>.get_turtle
    assert <span class="pl-c1">90</span> <span class="pl-k">=</span> turtle.angle
    turtle <span class="pl-k">=</span> meta[<span class="pl-c1">:pid</span>]
             <span class="pl-k">|</span><span class="pl-k">&gt;</span> <span class="pl-vo">Instance</span>.left(<span class="pl-c1">20</span>)
             <span class="pl-k">|</span><span class="pl-k">&gt;</span> <span class="pl-vo">Instance</span>.get_turtle
    assert <span class="pl-c1">70</span> <span class="pl-k">=</span> turtle.angle
  <span class="pl-k">end</span></pre>
</div>

<p>Run the tests and they&#39;ll fail. Now we implement it:</p>

<div class="highlight highlight-elixir">
<pre>
<span class="pl-c">  # Now we don&#39;t want to implement a `left` cast, since our `right` cast was</span>
<span class="pl-c">  # really just setting a delta on the angle.  We&#39;ll change its name and then</span>
<span class="pl-c">  # just use the same server API to implement left</span>
  <span class="pl-k">def</span> right(pid, angle) <span class="pl-k">do</span>
    <span class="pl-c1">:ok</span> <span class="pl-k">=</span> <span class="pl-vo">GenServer</span>.cast(pid, {<span class="pl-c1">:angle_delta</span>, angle})
    pid
  <span class="pl-k">end</span>

  <span class="pl-k">def</span> left(pid, angle) <span class="pl-k">do</span>
    <span class="pl-c1">:ok</span> <span class="pl-k">=</span> <span class="pl-vo">GenServer</span>.cast(pid, {<span class="pl-c1">:angle_delta</span>, <span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-k">*</span> angle})
    pid
  <span class="pl-k">end</span>

  <span class="pl-k">def</span> handle_cast({<span class="pl-c1">:angle_delta</span>, angle}, turtle) <span class="pl-k">do</span>
    angle <span class="pl-k">=</span> rem(<span class="pl-c1">360</span> <span class="pl-k">+</span> turtle.angle <span class="pl-k">+</span> angle, <span class="pl-c1">360</span>)
    {<span class="pl-c1">:noreply</span>, %<span class="pl-vo">Turtle</span>{turtle<span class="pl-k">|</span><span class="pl-c1">angle:</span> angle}}
  <span class="pl-k">end</span></pre>
</div>

<p>Run the tests, and they&#39;ll pass. Now this is almost good enough. However, when we go forward we just increment X. That&#39;s not right. We need to do trig here folks! First we&#39;ll need a function to convert degrees to radians:</p>

<div class="highlight highlight-elixir">
<pre>
  <span class="pl-k">def</span> radians(degrees) <span class="pl-k">do</span>
    degrees <span class="pl-k">*</span> (<span class="pl-c1">:math</span>.pi<span class="pl-k">/</span><span class="pl-c1">180</span>)
  <span class="pl-k">end</span></pre>
</div>

<p>And I&#39;m adding a test after the fact to show that this works, although honestly this has been proved by things a lot more rigorous than our test suite :)</p>

<div class="highlight highlight-elixir">
<pre>
  test <span class="pl-s1"><span class="pl-pds">&quot;</span>converting degrees to radians<span class="pl-pds">&quot;</span></span> <span class="pl-k">do</span>
    assert (<span class="pl-c1">3</span> <span class="pl-k">*</span> <span class="pl-c1">:math</span>.pi)<span class="pl-k">/</span><span class="pl-c1">2</span> <span class="pl-k">==</span> <span class="pl-vo">Instance</span>.radians(<span class="pl-c1">270</span>)
  <span class="pl-k">end</span></pre>
</div>

<p>I know that&#39;s not the right place for this function, but it&#39;ll have to do for now. Next we need to add a test that makes the turtle walk forward at an angle and verifies that it ends up at the right place. The easiest thing to do is to turn him 45 degrees and walk him (square root of 2) forward. This should place him at the coordinates (1, 1).</p>

<div class="highlight highlight-elixir">
<pre>
  test <span class="pl-s1"><span class="pl-pds">&quot;</span>walking at an angle<span class="pl-pds">&quot;</span></span>, meta <span class="pl-k">do</span>
    turtle <span class="pl-k">=</span> meta[<span class="pl-c1">:pid</span>]
            <span class="pl-k">|</span><span class="pl-k">&gt;</span> <span class="pl-vo">Instance</span>.right(<span class="pl-c1">45</span>)
            <span class="pl-k">|</span><span class="pl-k">&gt;</span> <span class="pl-vo">Instance</span>.forward(<span class="pl-c1">:math</span>.sqrt(<span class="pl-c1">2</span>))
            <span class="pl-k">|</span><span class="pl-k">&gt;</span> <span class="pl-vo">Instance</span>.get_turtle
    assert <span class="pl-c1">1</span> <span class="pl-k">=</span> turtle.x
    assert <span class="pl-c1">1</span> <span class="pl-k">=</span> turtle.y
  <span class="pl-k">end</span></pre>
</div>

<p>Run the tests, and they fail because our forward function is broken and awful. Let&#39;s fix it with math.</p>

<div class="highlight highlight-elixir">
<pre>
  <span class="pl-k">def</span> handle_cast({<span class="pl-c1">:forward</span>, amount}, turtle) <span class="pl-k">do</span>
    delta_x <span class="pl-k">=</span> amount <span class="pl-k">*</span> <span class="pl-c1">:math</span>.cos(radians(turtle.angle))
    delta_y <span class="pl-k">=</span> amount <span class="pl-k">*</span> <span class="pl-c1">:math</span>.sin(radians(turtle.angle))
    {<span class="pl-c1">:noreply</span>, %<span class="pl-vo">Turtle</span>{turtle<span class="pl-k">|</span><span class="pl-c1">x:</span> turtle.x <span class="pl-k">+</span> delta_x, <span class="pl-c1">y:</span> turtle.y <span class="pl-k">+</span> delta_y}}
  <span class="pl-k">end</span></pre>
</div>

<p>So here we&#39;re moving our turtle forward by the appropriate amount based on its current angle. If we run our tests, they&#39;ll fail because floats aren&#39;t precise. Let&#39;s change them to use <code>assert_in_delta</code> instead.</p>

<div class="highlight highlight-elixir">
<pre>
  test <span class="pl-s1"><span class="pl-pds">&quot;</span>can move forward<span class="pl-pds">&quot;</span></span>, meta <span class="pl-k">do</span>
    turtle <span class="pl-k">=</span> meta[<span class="pl-c1">:pid</span>]
            <span class="pl-k">|</span><span class="pl-k">&gt;</span> <span class="pl-vo">Instance</span>.forward(<span class="pl-c1">400</span>)
            <span class="pl-k">|</span><span class="pl-k">&gt;</span> <span class="pl-vo">Instance</span>.get_turtle
    assert_in_delta(<span class="pl-c1">400</span>, turtle.x, <span class="pl-c1">0.00001</span>)
  <span class="pl-k">end</span>

  test <span class="pl-s1"><span class="pl-pds">&quot;</span>walking at an angle<span class="pl-pds">&quot;</span></span>, meta <span class="pl-k">do</span>
    turtle <span class="pl-k">=</span> meta[<span class="pl-c1">:pid</span>]
            <span class="pl-k">|</span><span class="pl-k">&gt;</span> <span class="pl-vo">Instance</span>.right(<span class="pl-c1">45</span>)
            <span class="pl-k">|</span><span class="pl-k">&gt;</span> <span class="pl-vo">Instance</span>.forward(<span class="pl-c1">:math</span>.sqrt(<span class="pl-c1">2</span>))
            <span class="pl-k">|</span><span class="pl-k">&gt;</span> <span class="pl-vo">Instance</span>.get_turtle
    assert_in_delta(<span class="pl-c1">1</span>, turtle.x, <span class="pl-c1">0.00001</span>)
    assert_in_delta(<span class="pl-c1">1</span>, turtle.y, <span class="pl-c1">0.00001</span>)
  <span class="pl-k">end</span></pre>
</div>

<h2>Summary</h2>

<p>This is conceptually what we need to handle the logo language as far as our current use of it goes. However, it doesn&#39;t, you know, <em>draw</em> anything yet. Logo without drawing is pointless, right?</p>

<p>As I&#39;d mentioned, I already built a basic wx canvas before we started this episode. But honestly, even though I was a math major, doing trig again makes me tired. So we&#39;ll start drawing the turtle&#39;s tracks on that canvas in the next episode - but you should probably go ahead and try to implement it as an exercise for yourself. See you soon!</p>

<h2>Resources</h2>

<ul class="task-list">
	<li><a href="https://github.com/knewter/logo" rel="noreferrer">knewter/logo</a></li>
	<li><a href="http://en.wikipedia.org/wiki/Logo_%28programming_language%29" rel="noreferrer">Logo Programming Language on Wikipedia</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=51629">166_Implementing_Logo.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=51630">166_Implementing_Logo.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-5446cc8d8c9ccd06bf00a85aec8ec4172950767e</guid>
      <pubDate>Sat, 30 May 2015 21:08:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/51629/166_Implementing_Logo.mp4" length="87912447" type="video/mp4"/>
      <itunes:subtitle>Implementing the Logo graphical programming language in Elixir with wxWidgets.  In this episode we just implement the underlying GenServer.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[165 - Accounting 101]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=774</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><h1 style="box-sizing: border-box; font-size: 2.25em; margin-right: 0px; margin-bottom: 16px; margin-left: 0px; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; margin-top: 0px !important;">Episode 165: Accounting 101</h1>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">A company called Subledger recently released a series of documents detailing double entry accounting systems for developers. Most commercial projects can make use of an internalized accounting system, so it seems worthwhile to develop an application for managing charts of accounts. Let&#39;s get started, using their document as a reference point.</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Project</h2>

<h3 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.43; font-size: 1.5em; position: relative; font-weight: bold; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Setup</h3>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">We&#39;ll start a new application:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
mix new ledger <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">--</span>sup
cd ledger
mkdir test<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">/</span>ledger</pre>
</div>

<h3 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.43; font-size: 1.5em; position: relative; font-weight: bold; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Accounts</h3>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">The first entity we need to account for in an accounting system is an&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">Account</code>. It can be expected to be either a&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">:debit</code>&nbsp;or a&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">:credit</code>&nbsp;account. We&#39;ll add a test for this, not because we need to test structs, but so that our tests can serve as documentation for the system as we go along.</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defmodule</span> <span class="pl-en" style="box-sizing: border-box; color: rgb(121, 93, 163);">Ledger.Account</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defstruct</span> [
    <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">type:</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">nil</span>
  ]

  <span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">@typedoc &quot;&quot;&quot;</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  An account can be either `:credit` or `:debit`.</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  &quot;&quot;&quot;</span>
  <span class="pl-vo" style="box-sizing: border-box;">@type</span> account_type <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">::</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:credit</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:debit</span>

  <span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">@typedoc &quot;&quot;&quot;</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  A Ledger Account has a `type`.</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  &quot;&quot;&quot;</span>
  <span class="pl-vo" style="box-sizing: border-box;">@type</span> t <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">::</span> %<span class="pl-v" style="box-sizing: border-box; color: rgb(29, 62, 129);">__MODULE__</span>{
    <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">type:</span> account_type
  }
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defmodule</span> <span class="pl-en" style="box-sizing: border-box; color: rgb(121, 93, 163);">Ledger.AccountTest</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">use</span> <span class="pl-vo" style="box-sizing: border-box;">ExUnit</span>.<span class="pl-vo" style="box-sizing: border-box;">Case</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">alias</span> <span class="pl-vo" style="box-sizing: border-box;">Ledger</span>.<span class="pl-vo" style="box-sizing: border-box;">Account</span>

  <span class="pl-vo" style="box-sizing: border-box;">@credit_account</span> %<span class="pl-vo" style="box-sizing: border-box;">Account</span>{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">type:</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:credit</span>}
  <span class="pl-vo" style="box-sizing: border-box;">@debit_account</span> %<span class="pl-vo" style="box-sizing: border-box;">Account</span>{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">type:</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:debit</span>}

  test <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>Accounts can be either Credit or Debit accounts<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    assert <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:debit</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">@debit_account</span>.type
    assert <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:credit</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">@credit_account</span>.type
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Accounts have a balance. In accounting, balances are comprised of two values: the sum of debit and the sum of credit. The net balance is the smaller subtracted from the larger. The balance of a 5-debit and 10-credit is a 5-credit.</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  test <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>Accounts have credits and debits<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    account <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">Account</span>.debit(<span class="pl-vo" style="box-sizing: border-box;">@credit_account</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">5</span>)
    account <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">Account</span>.credit(account, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">10</span>)
    assert <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">5</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">Account</span>.debits_sum(account)
    assert <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">10</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">Account</span>.credits_sum(account)
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Let&#39;s add the concept of an account having a list of debits and credits:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defmodule</span> <span class="pl-en" style="box-sizing: border-box; color: rgb(121, 93, 163);">Ledger.Account</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">alias</span> <span class="pl-v" style="box-sizing: border-box; color: rgb(29, 62, 129);">__MODULE__</span>

  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defstruct</span> [
    <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">type:</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">nil</span>,
    <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">debits:</span> [],
    <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">credits:</span> []
  ]

  <span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">@typedoc &quot;&quot;&quot;</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  An account can be either `:credit` or `:debit`.</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  &quot;&quot;&quot;</span>
  <span class="pl-vo" style="box-sizing: border-box;">@type</span> account_type <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">::</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:credit</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:debit</span>

  <span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">@typedoc &quot;&quot;&quot;</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  An account has a list of debits.</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  &quot;&quot;&quot;</span>

  <span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">@typedoc &quot;&quot;&quot;</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  A Ledger Account has a `type`, a list of `credits, and a list of `debits`.</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  &quot;&quot;&quot;</span>
  <span class="pl-vo" style="box-sizing: border-box;">@type</span> t <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">::</span> %<span class="pl-vo" style="box-sizing: border-box;">Account</span>{
    <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">type:</span> account_type,
    <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">debits:</span> list(<span class="pl-vo" style="box-sizing: border-box;">Debit</span>.t),
    <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">credits:</span> list(<span class="pl-vo" style="box-sizing: border-box;">Credit</span>.t)
  }
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">OK before we move on we&#39;ll need to move modules into their own files.</p>

<ul class="task-list" style="box-sizing: border-box; padding-right: 0px; padding-left: 2em; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">
	<li style="box-sizing: border-box;"><code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">mkdir lib/ledger</code></li>
	<li style="box-sizing: border-box;">move&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">Ledger.Account</code>&nbsp;to&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">lib/ledger/account.ex</code></li>
</ul>

<h3 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.43; font-size: 1.5em; position: relative; font-weight: bold; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Debits and Credits</h3>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">We&#39;re referencing a Debit and a Credit type, and we need to make these modules:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defmodule</span> <span class="pl-en" style="box-sizing: border-box; color: rgb(121, 93, 163);">Ledger.Credit</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">alias</span> <span class="pl-v" style="box-sizing: border-box; color: rgb(29, 62, 129);">__MODULE__</span>

  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defstruct</span> [
    <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">amount:</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">nil</span>
  ]

  <span class="pl-vo" style="box-sizing: border-box;">@type</span> t <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">::</span> %<span class="pl-vo" style="box-sizing: border-box;">Credit</span>{
    <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">amount:</span> <span class="pl-vo" style="box-sizing: border-box;">Decimal</span>.t
  }
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defmodule</span> <span class="pl-en" style="box-sizing: border-box; color: rgb(121, 93, 163);">Ledger.Debit</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">alias</span> <span class="pl-v" style="box-sizing: border-box; color: rgb(29, 62, 129);">__MODULE__</span>

  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defstruct</span> [
    <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">amount:</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">nil</span>
  ]

  <span class="pl-vo" style="box-sizing: border-box;">@type</span> t <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">::</span> %<span class="pl-vo" style="box-sizing: border-box;">Debit</span>{
    <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">amount:</span> <span class="pl-vo" style="box-sizing: border-box;">Decimal</span>.t
  }
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Here we&#39;re using a&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">Decimal</code>&nbsp;type that doesn&#39;t exist in the standard library but is a hex package. We&#39;ll add it to our dependencies.</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defp</span> deps <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    [
      {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:decimal</span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>~&gt; 1.1.0<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>}
    ]
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
mix deps.get</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Now let&#39;s open up the&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">Account</code>&nbsp;module again and add aliases to our new&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">Debit</code>&nbsp;and&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">Credit</code>modules.</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defmodule</span> <span class="pl-en" style="box-sizing: border-box; color: rgb(121, 93, 163);">Ledger.Account</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">alias</span> <span class="pl-v" style="box-sizing: border-box; color: rgb(29, 62, 129);">__MODULE__</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">alias</span> <span class="pl-vo" style="box-sizing: border-box;">Ledger</span>.<span class="pl-vo" style="box-sizing: border-box;">Debit</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">alias</span> <span class="pl-vo" style="box-sizing: border-box;">Ledger</span>.<span class="pl-vo" style="box-sizing: border-box;">Credit</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  #...</span>
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">We&#39;ll run the tests, and they fail because we don&#39;t have this debit function. Let&#39;s add it to the&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">Account</code>:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> debit(account<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span>%<span class="pl-vo" style="box-sizing: border-box;">Account</span>{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">debits:</span> debits}, amount) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    %<span class="pl-vo" style="box-sizing: border-box;">Account</span>{account <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">debits:</span> [%<span class="pl-vo" style="box-sizing: border-box;">Debit</span>{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">amount:</span> amount}]}
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">We also need a credit function:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> credit(account<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span>%<span class="pl-vo" style="box-sizing: border-box;">Account</span>{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">credits:</span> credits}, amount) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    %<span class="pl-vo" style="box-sizing: border-box;">Account</span>{account <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">credits:</span> [%<span class="pl-vo" style="box-sizing: border-box;">Credit</span>{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">amount:</span> amount}]}
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Alright, so now if we run the tests we&#39;re lacking our&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">debits_sum</code>&nbsp;and&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">credits_sum</code>&nbsp;functions. Let&#39;s implement these as a reduce over the amounts of each entry in the list:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> debits_sum(account<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span>%<span class="pl-vo" style="box-sizing: border-box;">Account</span>{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">debits:</span> debits}) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.reduce(debits, <span class="pl-vo" style="box-sizing: border-box;">Decimal</span>.new(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>), <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">fn</span>(x, acc) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span>
      <span class="pl-vo" style="box-sizing: border-box;">Decimal</span>.add(x.amount, acc)
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>)
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> credits_sum(account<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span>%<span class="pl-vo" style="box-sizing: border-box;">Account</span>{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">credits:</span> credits}) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.reduce(credits, <span class="pl-vo" style="box-sizing: border-box;">Decimal</span>.new(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>), <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">fn</span>(x, acc) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span>
      <span class="pl-vo" style="box-sizing: border-box;">Decimal</span>.add(x.amount, acc)
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>)
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">OK, so this still won&#39;t work because the Decimal module needs to operate on Decimal types. Let&#39;s change our test to use Decimal types.</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defmodule</span> <span class="pl-en" style="box-sizing: border-box; color: rgb(121, 93, 163);">Ledger.AccountTest</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">use</span> <span class="pl-vo" style="box-sizing: border-box;">ExUnit</span>.<span class="pl-vo" style="box-sizing: border-box;">Case</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">alias</span> <span class="pl-vo" style="box-sizing: border-box;">Ledger</span>.<span class="pl-vo" style="box-sizing: border-box;">Account</span>

  <span class="pl-vo" style="box-sizing: border-box;">@credit_account</span> %<span class="pl-vo" style="box-sizing: border-box;">Account</span>{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">type:</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:credit</span>}
  <span class="pl-vo" style="box-sizing: border-box;">@debit_account</span> %<span class="pl-vo" style="box-sizing: border-box;">Account</span>{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">type:</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:debit</span>}

  test <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>Accounts can be either Credit or Debit accounts<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    assert <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:debit</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">@debit_account</span>.type
    assert <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:credit</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">@credit_account</span>.type
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

  test <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>Accounts have credits and debits<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    account <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">Account</span>.debit(<span class="pl-vo" style="box-sizing: border-box;">@credit_account</span>, <span class="pl-vo" style="box-sizing: border-box;">Decimal</span>.new(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">5</span>))
    account <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">Account</span>.credit(account, <span class="pl-vo" style="box-sizing: border-box;">Decimal</span>.new(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">10</span>))
    assert <span class="pl-vo" style="box-sizing: border-box;">Decimal</span>.new(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">5</span>) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">==</span> <span class="pl-vo" style="box-sizing: border-box;">Account</span>.debits_sum(account)
    assert <span class="pl-vo" style="box-sizing: border-box;">Decimal</span>.new(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">10</span>) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">==</span> <span class="pl-vo" style="box-sizing: border-box;">Account</span>.credits_sum(account)
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">And now our tests pass. We now have a concept of an account that holds debits and credits.</p>

<h3 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.43; font-size: 1.5em; position: relative; font-weight: bold; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Journal Entries</h3>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Next we need to implement Journal Entries, which are how entries are made into accounts. Journal Entries are made in at least 2 accounts:</p>

<ul class="task-list" style="box-sizing: border-box; padding-right: 0px; padding-left: 2em; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">
	<li style="box-sizing: border-box;">A&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">Debit</code>&nbsp;account, where account value is going&nbsp;<em style="box-sizing: border-box;">to</em></li>
	<li style="box-sizing: border-box;">A&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">Credit</code>&nbsp;account, where account value is coming&nbsp;<em style="box-sizing: border-box;">from</em></li>
</ul>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Let&#39;s write a test for a Journal Entry:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defmodule</span> <span class="pl-en" style="box-sizing: border-box; color: rgb(121, 93, 163);">Ledger.JournalEntryTest</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">use</span> <span class="pl-vo" style="box-sizing: border-box;">ExUnit</span>.<span class="pl-vo" style="box-sizing: border-box;">Case</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">alias</span> <span class="pl-vo" style="box-sizing: border-box;">Ledger</span>.<span class="pl-vo" style="box-sizing: border-box;">JournalEntry</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">alias</span> <span class="pl-vo" style="box-sizing: border-box;">Ledger</span>.<span class="pl-vo" style="box-sizing: border-box;">Debit</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">alias</span> <span class="pl-vo" style="box-sizing: border-box;">Ledger</span>.<span class="pl-vo" style="box-sizing: border-box;">Credit</span>

  <span class="pl-vo" style="box-sizing: border-box;">@debit_entry</span> %<span class="pl-vo" style="box-sizing: border-box;">Debit</span>{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">amount:</span> <span class="pl-vo" style="box-sizing: border-box;">Decimal</span>.new(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">5</span>)}
  <span class="pl-vo" style="box-sizing: border-box;">@credit_entry</span> %<span class="pl-vo" style="box-sizing: border-box;">Credit</span>{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">amount:</span> <span class="pl-vo" style="box-sizing: border-box;">Decimal</span>.new(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">5</span>)}

  test <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>Borrow Cash<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # We&#39;ll start off just describing a JournalEntry struct</span>
    entry <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> %<span class="pl-vo" style="box-sizing: border-box;">JournalEntry</span>{
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">      # It has a creation time</span>
      <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">created_at:</span> {{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">2014</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">07</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">31</span>}, {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>}},
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">      # We need to describe what this entry represents</span>
      <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">description:</span> <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>Borrowed money from Sam<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>,
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">      # And it will consist of a list of items</span>
      <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">items:</span> [
        <span class="pl-vo" style="box-sizing: border-box;">@debit_entry</span>,
        <span class="pl-vo" style="box-sizing: border-box;">@credit_entry</span>
      ]
    }
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # We should be able to see the sum of the debit and credit amounts for the</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # entry</span>
    assert %<span class="pl-vo" style="box-sizing: border-box;">Debit</span>{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">amount:</span> <span class="pl-vo" style="box-sizing: border-box;">Decimal</span>.new(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">5</span>)} <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">==</span> <span class="pl-vo" style="box-sizing: border-box;">JournalEntry</span>.total(entry).debit
    assert %<span class="pl-vo" style="box-sizing: border-box;">Credit</span>{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">amount:</span> <span class="pl-vo" style="box-sizing: border-box;">Decimal</span>.new(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">5</span>)} <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">==</span> <span class="pl-vo" style="box-sizing: border-box;">JournalEntry</span>.total(entry).credit
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">OK, so it&#39;s easy enough to build out the struct we&#39;ve defined here:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defmodule</span> <span class="pl-en" style="box-sizing: border-box; color: rgb(121, 93, 163);">Ledger.JournalEntry</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">alias</span> <span class="pl-v" style="box-sizing: border-box; color: rgb(29, 62, 129);">__MODULE__</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">alias</span> <span class="pl-vo" style="box-sizing: border-box;">Ledger</span>.<span class="pl-vo" style="box-sizing: border-box;">Credit</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">alias</span> <span class="pl-vo" style="box-sizing: border-box;">Ledger</span>.<span class="pl-vo" style="box-sizing: border-box;">Debit</span>

  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defstruct</span> [
    <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">created_at:</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">nil</span>,
    <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">description:</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">nil</span>,
    <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">items:</span> []
  ]

  <span class="pl-vo" style="box-sizing: border-box;">@type</span> t <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">::</span> %<span class="pl-vo" style="box-sizing: border-box;">JournalEntry</span>{
    <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">created_at:</span> {{integer, integer, integer}, {integer, integer, integer}},
    <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">description:</span> <span class="pl-vo" style="box-sizing: border-box;">String</span>.t,
    <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">items:</span> list(%<span class="pl-vo" style="box-sizing: border-box;">Debit</span>{} <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span> %<span class="pl-vo" style="box-sizing: border-box;">Credit</span>{})
  }
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Now let&#39;s define the&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">total</code>&nbsp;function:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # We&#39;re going to take a JournalEntry and return a map representing the total</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # debit and credit for this entry</span>
  <span class="pl-vo" style="box-sizing: border-box;">@spec</span> total(<span class="pl-vo" style="box-sizing: border-box;">JournalEntry</span>.t) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">::</span> %{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">debit:</span> %<span class="pl-vo" style="box-sizing: border-box;">Debit</span>{}, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">credit:</span> %<span class="pl-vo" style="box-sizing: border-box;">Credit</span>{}}
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> total(%<span class="pl-vo" style="box-sizing: border-box;">JournalEntry</span>{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">items:</span> items}) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # Let&#39;s define the initial state for both the debit and credit sides of the</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # total</span>
    debit <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> %<span class="pl-vo" style="box-sizing: border-box;">Debit</span>{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">amount:</span> <span class="pl-vo" style="box-sizing: border-box;">Decimal</span>.new(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>)}
    credit <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> %<span class="pl-vo" style="box-sizing: border-box;">Credit</span>{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">amount:</span> <span class="pl-vo" style="box-sizing: border-box;">Decimal</span>.new(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>)}
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # Now we&#39;ll just reduce through the items in the entry, putting the debits</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # on the debit side and the credits on the credit side.</span>
    <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.reduce(items, %{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">debit:</span> debit, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">credit:</span> credit},  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">fn</span>
      %<span class="pl-vo" style="box-sizing: border-box;">Debit</span>{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">amount:</span> amount}, acc <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> %{acc <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">debit:</span> %<span class="pl-vo" style="box-sizing: border-box;">Debit</span>{ acc.debit <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">amount:</span> <span class="pl-vo" style="box-sizing: border-box;">Decimal</span>.add(acc.debit.amount, amount)}}
      %<span class="pl-vo" style="box-sizing: border-box;">Credit</span>{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">amount:</span> amount}, acc <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> %{acc <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">credit:</span> %<span class="pl-vo" style="box-sizing: border-box;">Credit</span>{ acc.credit <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">amount:</span> <span class="pl-vo" style="box-sizing: border-box;">Decimal</span>.add(acc.credit.amount, amount)}}
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>)
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">We also want to be able to tell if a JournalEntry is balanced or not:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defmodule</span> <span class="pl-en" style="box-sizing: border-box; color: rgb(121, 93, 163);">Ledger.JournalEntryTest</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # ...</span>
  test <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>balanced?<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    balanced_entry <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> %<span class="pl-vo" style="box-sizing: border-box;">JournalEntry</span>{
      <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">items:</span> [
        <span class="pl-vo" style="box-sizing: border-box;">@debit_entry</span>,
        <span class="pl-vo" style="box-sizing: border-box;">@credit_entry</span>
      ]
    }
    unbalanced_entry <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> %<span class="pl-vo" style="box-sizing: border-box;">JournalEntry</span>{
      <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">items:</span> [
        <span class="pl-vo" style="box-sizing: border-box;">@debit_entry</span>
      ]
    }
    assert <span class="pl-vo" style="box-sizing: border-box;">JournalEntry</span>.balanced?(balanced_entry)
    refute <span class="pl-vo" style="box-sizing: border-box;">JournalEntry</span>.balanced?(unbalanced_entry)
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defmodule</span> <span class="pl-en" style="box-sizing: border-box; color: rgb(121, 93, 163);">Ledger.JournalEntry</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # ...</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # Checking if the entry is balanced is easy using the total</span>
  <span class="pl-vo" style="box-sizing: border-box;">@spec</span> balanced?(<span class="pl-vo" style="box-sizing: border-box;">JournalEntry</span>.t) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">::</span> boolean
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> balanced?(journal_entry<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span>%<span class="pl-vo" style="box-sizing: border-box;">JournalEntry</span>{}) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    total <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> total(journal_entry)
    total.credit.amount <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">==</span> total.debit.amount
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=51555">165_Accounting_101.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=51556">165_Accounting_101.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=51557">165_ledger.tar.gz</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-9c4e2499cd7e9d3da28502c6f053a96d6465fa88</guid>
      <pubDate>Fri, 29 May 2015 00:07:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/51555/165_Accounting_101.mp4" length="127520819" type="video/mp4"/>
      <itunes:subtitle>Modeling a double-entry ledger.  Terribly.  And then discussing what went wrong.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[164 - Fractals]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=761</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><h1 style="box-sizing: border-box; font-size: 2.25em; margin-right: 0px; margin-bottom: 16px; margin-left: 0px; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; margin-top: 0px !important;">Episode 164: Fractals</h1>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Jamis Buck wrote a post recently on &quot;Experimenting with L Systems.&quot; It looked like a lot of fun, and entirely different from working on web systems, so I promised myself I&#39;d play around with it. This episode is where I keep that promise to myself. Let&#39;s get started.</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Project</h2>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">We&#39;ll start out making a new project:</p>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
mix new fractal_playground
<span class="pl-s3" style="box-sizing: border-box; color: rgb(0, 134, 179);">cd</span> fractal_playground</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">It&#39;s probably worth taking a few minutes to read through the Wikipedia article on L systems. Suffice it to say they consist of an alphabet, a starting point, and a set of production rules that define how to transform step n to step n+1.</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">We&#39;re going to start out with a test that matches the first example structure in the Wikipedia article. We&#39;re going to start out with a test:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defmodule</span> <span class="pl-en" style="box-sizing: border-box; color: rgb(121, 93, 163);">FractalPlaygroundTest</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">use</span> <span class="pl-vo" style="box-sizing: border-box;">ExUnit</span>.<span class="pl-vo" style="box-sizing: border-box;">Case</span>

  <span class="pl-vo" style="box-sizing: border-box;">@example1</span> %{
    <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>A<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=&gt;</span> <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>AB<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>,
    <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>B<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=&gt;</span> <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>A<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>
  }

  test <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>[Example 1] n = 1<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    assert <span class="pl-vo" style="box-sizing: border-box;">LSystem</span>.transform(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>A<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>, <span class="pl-vo" style="box-sizing: border-box;">@example1</span>) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">==</span> <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>AB<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Alright, so now we need to add this LSystem module and a transform function that takes a string and some rules:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defmodule</span> <span class="pl-en" style="box-sizing: border-box; color: rgb(121, 93, 163);">LSystem</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # Our public api will just push down into a private recursive function that</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # performs all the interesting bits.</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> transform(string, rules) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    transform(string, rules, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span><span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>)
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defp</span> transform(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span><span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>, _rules, acc), <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>: acc
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defp</span> transform(string, rules, acc) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    first_char <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">String</span>.first(string)

    string
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> <span class="pl-vo" style="box-sizing: border-box;">String</span>.slice(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">1</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">..</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span><span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">1</span>)
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> transform(rules, acc <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&lt;&gt;</span> transform_char(first_char, rules))
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> transform_char(char, rules) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    rules[char]
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">If we run the tests now, they&#39;ll pass. We haven&#39;t handled the case where a character in the alphabet doesn&#39;t have a rule, but I don&#39;t think we&#39;ll ever have to. Let&#39;s add tests for the rest of the example:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defmodule</span> <span class="pl-en" style="box-sizing: border-box; color: rgb(121, 93, 163);">FractalPlaygroundTest</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">use</span> <span class="pl-vo" style="box-sizing: border-box;">ExUnit</span>.<span class="pl-vo" style="box-sizing: border-box;">Case</span>

  <span class="pl-vo" style="box-sizing: border-box;">@example1</span> %{
    <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>A<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=&gt;</span> <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>AB<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>,
    <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>B<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=&gt;</span> <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>A<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>
  }

  [
    {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">1</span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>A<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>AB<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>},
    {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">2</span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>AB<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>ABA<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>},
    {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">3</span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>ABA<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>ABAAB<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>},
    {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">4</span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>ABAAB<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>ABAABABA<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>},
    {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">5</span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>ABAABABA<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>ABAABABAABAAB<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>},
    {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">6</span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>ABAABABAABAAB<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>ABAABABAABAABABAABABA<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>},
    {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">7</span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>ABAABABAABAABABAABABA<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>ABAABABAABAABABAABABAABAABABAABAAB<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>}
  ]
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.each <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">fn</span>({step_number, input, expected_output}) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span>
    test <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>[Example 1] n = <span class="pl-s2" style="box-sizing: border-box; color: rgb(51, 51, 51);"><span class="pl-pse" style="box-sizing: border-box;">#{</span>step_number<span class="pl-pse" style="box-sizing: border-box;">}</span></span><span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
      assert <span class="pl-vo" style="box-sizing: border-box;">LSystem</span>.transform(input, <span class="pl-vo" style="box-sizing: border-box;">@example1</span>) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">==</span> expected_output
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Now if we run the tests, they won&#39;t actually work because the variables in the anonymous functions aren&#39;t available inside the test macro. Chris McCord helped me out here - we have to use module attributes to get these variables inside that macro:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  [
    {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">1</span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>A<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>AB<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>},
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    #...</span>
  ]
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.each <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">fn</span>({step_number, input, expected_output}) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span>
    <span class="pl-vo" style="box-sizing: border-box;">@input</span> input
    <span class="pl-vo" style="box-sizing: border-box;">@expected_output</span> expected_output
    test <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>[Example 1] n = <span class="pl-s2" style="box-sizing: border-box; color: rgb(51, 51, 51);"><span class="pl-pse" style="box-sizing: border-box;">#{</span>step_number<span class="pl-pse" style="box-sizing: border-box;">}</span></span><span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
      assert <span class="pl-vo" style="box-sizing: border-box;">LSystem</span>.transform(<span class="pl-vo" style="box-sizing: border-box;">@input</span>, <span class="pl-vo" style="box-sizing: border-box;">@example1</span>) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">==</span> <span class="pl-vo" style="box-sizing: border-box;">@expected_output</span>
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Run the tests...and our LSystem is basically done. Next, we&#39;d like to visualize this output. First, we&#39;ll do it with a string. We&#39;ll start with a test. What we&#39;d like to do is generate a list of the states of the system. This will just collect each output and feed it into the next.</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);"># Convert the list of expectations to a module attribute</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);"># so we can collect it to a list later....</span>
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defmodule</span> <span class="pl-en" style="box-sizing: border-box; color: rgb(121, 93, 163);">FractalPlaygroundTest</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">use</span> <span class="pl-vo" style="box-sizing: border-box;">ExUnit</span>.<span class="pl-vo" style="box-sizing: border-box;">Case</span>

  <span class="pl-vo" style="box-sizing: border-box;">@example1</span> %{
    <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>A<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=&gt;</span> <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>AB<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>,
    <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>B<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=&gt;</span> <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>A<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>
  }

  <span class="pl-vo" style="box-sizing: border-box;">@example1_expected</span> [
    {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">1</span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>A<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>AB<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>},
    {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">2</span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>AB<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>ABA<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>},
    {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">3</span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>ABA<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>ABAAB<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>},
    {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">4</span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>ABAAB<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>ABAABABA<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>},
    {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">5</span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>ABAABABA<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>ABAABABAABAAB<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>},
    {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">6</span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>ABAABABAABAAB<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>ABAABABAABAABABAABABA<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>},
    {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">7</span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>ABAABABAABAABABAABABA<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>ABAABABAABAABABAABABAABAABABAABAAB<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>}
  ]

  <span class="pl-vo" style="box-sizing: border-box;">@example1_expected</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.each <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">fn</span>({step_number, input, expected_output}) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span>
    <span class="pl-vo" style="box-sizing: border-box;">@input</span> input
    <span class="pl-vo" style="box-sizing: border-box;">@expected_output</span> expected_output
    test <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>[Example 1] n = <span class="pl-s2" style="box-sizing: border-box; color: rgb(51, 51, 51);"><span class="pl-pse" style="box-sizing: border-box;">#{</span>step_number<span class="pl-pse" style="box-sizing: border-box;">}</span></span><span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
      assert <span class="pl-vo" style="box-sizing: border-box;">LSystem</span>.transform(<span class="pl-vo" style="box-sizing: border-box;">@input</span>, <span class="pl-vo" style="box-sizing: border-box;">@example1</span>) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">==</span> <span class="pl-vo" style="box-sizing: border-box;">@expected_output</span>
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # Now we want to just say that if we run the system 7 times, we&#39;ll get a list</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # of each of the states of the system...</span>
  test <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>[Example 1] Run for 7 steps, collecting the output<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    expected <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">@example1_expected</span>
               <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.map(<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">fn</span>({_, _, expected_output}) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> expected_output <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>)
    assert <span class="pl-vo" style="box-sizing: border-box;">LSystem</span>.run(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>A<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>, <span class="pl-vo" style="box-sizing: border-box;">@example1</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">7</span>) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">==</span> [<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>A<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span> expected]
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">There isn&#39;t a run function yet. We&#39;ll add one.</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # OK so we want a run functino that takes an input, the rules, and our steps</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> run(input, rules, steps) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # OK so we want a run functino that takes an input, the rules, and our steps</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> run(input, rules, steps) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # We&#39;ll loop through the steps and build up a list...so this is a reduce,</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # with a list accumulator.</span>
    (<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">1</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">..</span>steps)
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # We&#39;re going to be pushing our results onto the head of the list, so</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # we&#39;ll take the head of the list as the input to the next step in the sequence</span>
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.reduce([input], <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">fn</span>(_step, acc<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span>[head<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span>_rest]) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">      # And then we&#39;ll just push the transformation of this step onto the head</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">      # of our accumulator</span>
      [transform(head, rules) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span> acc]
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>)
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">This mostly does the job. We&#39;ll run it. We need to reverse the list at the end, or we need to reverse our expectations that it grows downward. I would rather reverse the list, so let&#39;s do that:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> run(input, rules, steps) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    (<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">1</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">..</span>steps)
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.reduce([input], <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">fn</span>(_step, acc<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span>[head<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span>_rest]) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span>
      [transform(head, rules) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span> acc]
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>)
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.reverse
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Alright, and now we have a module that allows us to build these L systems. It&#39;s pretty cool! Let&#39;s move onto the second example in the wikipedia page and see if it still works...This builds a Pythagoras Tree. I&#39;ve built the test suite that should cover that example, let me paste it in:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  <span class="pl-vo" style="box-sizing: border-box;">@example2</span> %{
    <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>1<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=&gt;</span> <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>11<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>,
    <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>0<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=&gt;</span> <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>1[0]0<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>
  }

  <span class="pl-vo" style="box-sizing: border-box;">@example2_expected</span> [
    {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">1</span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>0<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>1[0]0<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>},
    {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">2</span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>1[0]0<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>11[1[0]0]1[0]0<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>},
    {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">3</span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>11[1[0]0]1[0]0<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>1111[11[1[0]0]1[0]0]11[1[0]0]1[0]0<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>}
  ]

  <span class="pl-vo" style="box-sizing: border-box;">@example2_expected</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.each <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">fn</span>({step_number, input, expected_output}) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span>
    <span class="pl-vo" style="box-sizing: border-box;">@input</span> input
    <span class="pl-vo" style="box-sizing: border-box;">@expected_output</span> expected_output
    test <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>[Example 2] n = <span class="pl-s2" style="box-sizing: border-box; color: rgb(51, 51, 51);"><span class="pl-pse" style="box-sizing: border-box;">#{</span>step_number<span class="pl-pse" style="box-sizing: border-box;">}</span></span><span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
      assert <span class="pl-vo" style="box-sizing: border-box;">LSystem</span>.transform(<span class="pl-vo" style="box-sizing: border-box;">@input</span>, <span class="pl-vo" style="box-sizing: border-box;">@example2</span>) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">==</span> <span class="pl-vo" style="box-sizing: border-box;">@expected_output</span>
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">OK, let&#39;s see if our code supports the second example. Run the tests...it fails. It fails because apparently we&#39;re supposed to leave things untouched if we don&#39;t have a rule about them, so we&#39;ll add that to our LSystem module:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> transform_char(char, rules) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    rules[char] <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">||</span> char
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">OK, and with that we support the second example. Run the tests. They pass. In the next episode we&#39;re going to turn these systems into fancy graphics :) See you soon!</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Resources</h2>

<ul class="task-list" style="box-sizing: border-box; padding-right: 0px; padding-left: 2em; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">
	<li style="box-sizing: border-box;"><a href="http://weblog.jamisbuck.org/2015/5/7/experimenting-with-l-systems.html" rel="noreferrer" style="box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;">Jamis Buck&#39;s blog post on L systems</a></li>
	<li style="box-sizing: border-box;"><a href="http://en.wikipedia.org/wiki/L-system" rel="noreferrer" style="box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;">Lindenmayer Systems</a></li>
</ul>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Special thanks to Chris McCord for telling me to use module attributes in order to do the dynamic test creation.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=51082">164_Fractals.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=51083">164_Fractals.md</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-156d0b4466f5b68ea81ece29014ae2b363c93538</guid>
      <pubDate>Thu, 21 May 2015 23:37:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/51082/164_Fractals.mp4" length="59937576" type="video/mp4"/>
      <itunes:subtitle>Exploring L Systems, on our way to generating fractals.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[163 - Building a Cron System, Part 3]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=758</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><h1 style="box-sizing: border-box; font-size: 2.25em; margin-right: 0px; margin-bottom: 16px; margin-left: 0px; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; margin-top: 0px !important;">Episode 163: Building a Cron System, Part 3</h1>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">In the last episode, we built a function that knew whether a given time matched a given Agenda Schedule. Today we&#39;ll build a supervised GenServer that checks its schedules every minute and executes any of the jobs that match the current time. Let&#39;s get started.</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Project</h2>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">I&#39;ve tagged the code&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">before_episode_163</code>&nbsp;for what is a slightly modified version of where we left off before. Nothing major, just moved some tests around.</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Anyway, the first thing we&#39;re going to do is create a worker for our supervisor to supervise. Open up<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">lib/agenda.ex</code>:</p>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">-      # worker(Agenda.Worker, [arg1, arg2, arg3])
+      worker(Agenda.Worker, [:ok])
</code></pre>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Next we&#39;ll add the&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">Agenda.Worker</code>&nbsp;in&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">lib/agenda/worker.ex</code>:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defmodule</span> <span class="pl-en" style="box-sizing: border-box; color: rgb(121, 93, 163);">Agenda.Worker</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # it&#39;s a GenServer</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">use</span> <span class="pl-vo" style="box-sizing: border-box;">GenServer</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # We&#39;re going to send ourselves a message once per minute</span>
  <span class="pl-vo" style="box-sizing: border-box;">@interval</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">60_000</span>

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # Let&#39;s handle the Public API first</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  ### Public API</span>

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # We&#39;ll define a start_link command, and it will register our server with the</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # module name</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> start_link(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:ok</span>) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:ok</span>, _pid} <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">GenServer</span>.start_link(<span class="pl-v" style="box-sizing: border-box; color: rgb(29, 62, 129);">__MODULE__</span>, [], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">name:</span> <span class="pl-v" style="box-sizing: border-box; color: rgb(29, 62, 129);">__MODULE__</span>)
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # We want to be able to add a schedule string and have the schedule get added</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # in...</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> add_schedule(schedule_string) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:ok</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">GenServer</span>.cast(<span class="pl-vo" style="box-sizing: border-box;">Agenda</span>.<span class="pl-vo" style="box-sizing: border-box;">Worker</span>, {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:add_schedule</span>, schedule_string})
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # We&#39;d also like to be able to clear our schedule</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> clear_schedule <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:ok</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">GenServer</span>.cast(<span class="pl-vo" style="box-sizing: border-box;">Agenda</span>.<span class="pl-vo" style="box-sizing: border-box;">Worker</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:clear_schedule</span>)
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # Now let&#39;s look at the server implementation</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  ### Server Callbacks</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # We&#39;ll start out with just an empty list for our state.  We&#39;ll accumulate</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # schedules into this.  We&#39;ll also send ourselves the message &#39;tick&#39; once per</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # @interval</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> init(_) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:timer</span>.send_interval(<span class="pl-vo" style="box-sizing: border-box;">@interval</span>, self, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:tick</span>)
    {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:ok</span>, []}
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # Adding a schedule just parses the schedule string and puts the corresponding</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # schedule at the front of the list</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> handle_cast({<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:add_schedule</span>, schedule_string}, schedules) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    schedule <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">Agenda</span>.<span class="pl-vo" style="box-sizing: border-box;">Parser</span>.parse(schedule_string)
    {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:noreply</span>, [schedule <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span> schedules]}
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # Clearing a schedule just changes the state to the empty list again</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> handle_cast(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:clear_schedule</span>, _schedules) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:noreply</span>, []}
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # Finally, we should do something with each of the schedules each tick.  We&#39;ll</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # come back to this once we&#39;re writing tests...</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> handle_info(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:tick</span>, schedules) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:noreply</span>, schedules}
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Alright so this is a very basic GenServer - nothing here should be surprising 163 episodes in. Let&#39;s move on to writing a test to verify our expected behaviour. Open up&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">test/agenda_test.exs</code>:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  test <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>adding commands as cron and having them executed<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # To test this, we&#39;re going to add a schedule that should send this test</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # process a message every minute</span>

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # First we&#39;ll get our pid as a list</span>
    pid_list <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:erlang</span>.pid_to_list(self)
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # Next we&#39;ll define a schedule that sends our process a message whose</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # payload is the atom :ok, once per minute</span>
    <span class="pl-vo" style="box-sizing: border-box;">Agenda</span>.add_schedule(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>* * * * * send(:erlang.list_to_pid(<span class="pl-s2" style="box-sizing: border-box; color: rgb(51, 51, 51);"><span class="pl-pse" style="box-sizing: border-box;">#{</span>inspect pid_list<span class="pl-pse" style="box-sizing: border-box;">}</span></span>), :ok)<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>)
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # We&#39;ll just sleep for a little over a minute</span>
    <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:timer</span>.sleep(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">61_000</span>)
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # Finally, we&#39;ll assert that we&#39;ve received the message</span>
    assert_received(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:ok</span>)
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">OK, let&#39;s go ahead and run the tests...</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">They fail because I don&#39;t have an&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">Agenda.add_schedule</code>&nbsp;function - that&#39;s on&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">Agenda.Worker</code>. However, I really don&#39;t want to make a user type all that. Let&#39;s use&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">defdelegate</code>&nbsp;to delegate it from<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">Agenda</code>&nbsp;to&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">Agenda.Worker</code>. Open up&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">lib/agenda.ex</code>:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defdelegate</span> add_schedule(schedule), <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">to:</span> <span class="pl-vo" style="box-sizing: border-box;">Agenda</span>.<span class="pl-vo" style="box-sizing: border-box;">Worker</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # We&#39;ll delegate clear_schedule as well.</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defdelegate</span> clear_schedule, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">to:</span> <span class="pl-vo" style="box-sizing: border-box;">Agenda</span>.<span class="pl-vo" style="box-sizing: border-box;">Worker</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Alright, run the tests again....</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">(( wait for them to finish ))</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">OK, I sped up the video a ton during that test run because it turns out it just spends 30 seconds sleeping and then hit the default timeout for an ExUnit test. We can use a&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">@tag</code>&nbsp;attribute to tell ExUnit to give us longer:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  <span class="pl-vo" style="box-sizing: border-box;">@tag</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">timeout:</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">80_000</span>
  test <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>adding commands as cron and having them executed<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    #...</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Run them again...</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">(( wait for them to finish ))</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">OK, so it took forever and then it failed, because we aren&#39;t doing anything when we get a tick in the server, where we should be evaluating the Schedule&#39;s command. Let&#39;s open the&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">Agenda.Worker</code>&nbsp;up again and fix that:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> handle_info(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:tick</span>, schedules) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # Alright, so we&#39;ll use GoodTimes to get the current time</span>
    current_time <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">GoodTimes</span>.now
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # Then we&#39;ll use a for-comprehension on our schedules</span>
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">for</span> schedule <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&lt;</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span> schedules <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">      # if the schedule includes the current time,</span>
      <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">if</span> <span class="pl-vo" style="box-sizing: border-box;">Agenda</span>.<span class="pl-vo" style="box-sizing: border-box;">Schedule</span>.include?(schedule, current_time) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">        # We&#39;ll execute it, using this currently-nonexistent function on Agenda.Schedule</span>
        <span class="pl-vo" style="box-sizing: border-box;">Agenda</span>.<span class="pl-vo" style="box-sizing: border-box;">Schedule</span>.execute_command(schedule)
      <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
    {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:noreply</span>, schedules}
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">OK, now let&#39;s open up&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">Agenda.Schedule</code>&nbsp;and add the&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">execute_command</code>&nbsp;function:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # OK, so this function just takes a schedule and executes the command within</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # it</span>
  <span class="pl-vo" style="box-sizing: border-box;">@spec</span> execute_command(<span class="pl-vo" style="box-sizing: border-box;">Agenda</span>.<span class="pl-vo" style="box-sizing: border-box;">Schedule</span>) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">::</span> any
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> execute_command(%<span class="pl-vo" style="box-sizing: border-box;">Agenda</span>.<span class="pl-vo" style="box-sizing: border-box;">Schedule</span>{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">command:</span> command}) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # And all we&#39;re going to do is spawn a new process, inside of which we will</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # eval_quoted the command (remember we took it from a string to quoted</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # previously)</span>
    spawn(<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">fn</span>() <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> <span class="pl-vo" style="box-sizing: border-box;">Code</span>.eval_quoted(command) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>)
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">OK, now we&#39;ll run the tests again...</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">(( wait for them to finish ))</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Alright, so again they took forever and I sped it up in editing, but they do finish successfully. Let&#39;s add another test that verifies that clearing the schedule works:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  <span class="pl-vo" style="box-sizing: border-box;">@tag</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">timeout:</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">80000</span>
  test <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>adding commands as cron and then clearing all commands<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    pid_list <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:erlang</span>.pid_to_list(self)
    <span class="pl-vo" style="box-sizing: border-box;">Agenda</span>.add_schedule(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>* * * * * send(:erlang.list_to_pid(<span class="pl-s2" style="box-sizing: border-box; color: rgb(51, 51, 51);"><span class="pl-pse" style="box-sizing: border-box;">#{</span>inspect pid_list<span class="pl-pse" style="box-sizing: border-box;">}</span></span>), :ok)<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>)
    <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:timer</span>.sleep(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">30000</span>)
    <span class="pl-vo" style="box-sizing: border-box;">Agenda</span>.clear_schedule
    <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:timer</span>.sleep(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">31000</span>)
    refute_received(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:ok</span>)
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Run them again</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">(( wait for them to finish ))</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">OK, so everything passes..but now our tests will take no less than 2 minutes to run every single time, which will murder our ability to do Test-Driven Development. The way to deal with this is to let your integration test server run your full test suite, and you just run everything but the slow tests. First, we&#39;ll add a :slow tag to these two tests:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  <span class="pl-vo" style="box-sizing: border-box;">@tag</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:slow</span>
  test <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>adding commands as cron and having them executed<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    #...</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

  <span class="pl-vo" style="box-sizing: border-box;">@tag</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">timeout:</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">80000</span>
  <span class="pl-vo" style="box-sizing: border-box;">@tag</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:slow</span>
  test <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>adding commands as cron and then clearing all commands<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    #...</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Next, we&#39;ll modify our project-specific vimrc. Open up .vimrc:</p>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">map ,t :!mix test --exclude slow:true&lt;cr&gt;
map ,T :!mix test&lt;cr&gt;
</code></pre>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Alright, so now we run the full test suite if we hit&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">,-big-t</code>, but we exclude the slow tests for the default muscle memory I use to run my tests in my test-code-test-code loop. This way it&#39;s easy to run a subset but basically impossible to accidentally forget to run these with CI.</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Summary</h2>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">In today&#39;s episode we wrapped up Agenda to the first version that functions as intended. We still want to be able to specify Agenda.Schedules without the cron stylings, as a lot of people hate them. It would also be nice to support referencing an MFA rather than eval&#39;ing a string. But we&#39;re at a pretty good starting point in the application.</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">We also saw defdelegate for the first time, and we learned how to tag tests and run a subset of the test suite based on the tags. Hope you enjoyed it. See you soon!</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Resources</h2>

<ul class="task-list" style="box-sizing: border-box; padding-right: 0px; padding-left: 2em; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">
	<li style="box-sizing: border-box;"><a href="http://elixir-lang.org/docs/stable/elixir/Kernel.html#defdelegate/2" rel="noreferrer" style="box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;">defdelegate docs</a></li>
	<li style="box-sizing: border-box;"><a href="http://elixir-lang.org/docs/stable/ex_unit/ExUnit.Case.html" rel="noreferrer" style="box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;">@tag is documented in ExUnit.Case</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=50762">163_Building_a_Cron_System_Part_3.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=50763">163_Building_a_Cron_System_Part_3.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-845306ba77a2b1b2bbf126d526109caaecaa8278</guid>
      <pubDate>Wed, 13 May 2015 20:01:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/50763/163_Building_a_Cron_System_Part_3.mp4" length="51185844" type="video/mp4"/>
      <itunes:subtitle>Executing our jobs on their schedule.  Bonus intro to defdelegate and ExUnit's `@tag`s.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[162 - Building a Cron System, Part 2]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=757</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><h1 style="box-sizing: border-box; font-size: 2.25em; margin: 1em 0px 16px; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Episode 162: Building a Cron System, Part 2</h1>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">In the last episode we defined a parser that would generate schedule structs based on crontab entries. I intend to add a GenServer that will run the jobs it knows about at the appropriate time. Before we get there, we need to be able to know whether a given time is included in a Schedule&#39;s pattern. Let&#39;s get started.</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Project</h2>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">We&#39;re starting out with the codebase as it was after the last episode. I&#39;ve tagged it<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">before_episode_162</code>.</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">First let&#39;s open up our test and move the modules into their own files.</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">((( do it )))</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">We&#39;ll run the tests to make sure we didn&#39;t break anything. Next we&#39;ll move the tests into a parser_test file.</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">((( do it )))</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Run them and make sure everything is working still.</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Now that we&#39;ve taken care of that little bit of bookkeeping, let&#39;s add an Agenda.ScheduleTest:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defmodule</span> <span class="pl-en" style="box-sizing: border-box; color: rgb(121, 93, 163);">Agenda.ScheduleTest</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">use</span> <span class="pl-vo" style="box-sizing: border-box;">ExUnit</span>.<span class="pl-vo" style="box-sizing: border-box;">Case</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">alias</span> <span class="pl-vo" style="box-sizing: border-box;">Agenda</span>.<span class="pl-vo" style="box-sizing: border-box;">Schedule</span>

  test <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>whether or not a schedule includes a given time<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # So we want to provide some times that should match and some times that</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # should fail...</span>
    good_times <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> [
      {{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">2015</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">5</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">5</span>}, {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">23</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">53</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">42</span>}}
    ]
    bad_times <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> [
      {{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">2015</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">5</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">5</span>}, {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">23</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">52</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">42</span>}}
    ]
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # Next, let&#39;s both manually build a schedule and get one from a crontab entry</span>
    schedule <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> %<span class="pl-vo" style="box-sizing: border-box;">Schedule</span>{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">minute:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">53</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">hour:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">23</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">day_of_month:</span> <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.to_list(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">1</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">..</span><span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">31</span>), <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">month:</span> <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.to_list(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">1</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">..</span><span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">12</span>), <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">day_of_week:</span> <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.to_list(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">..</span><span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">6</span>)}
    parsed_schedule <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">Agenda</span>.<span class="pl-vo" style="box-sizing: border-box;">Parser</span>.parse(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>53 23 * * * :ok<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>)
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # Finally, we&#39;re going to want to assert that the schedules match the good</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # times and fail the bad times.  We&#39;ll be making a new function for this.</span>
    assert_schedule_time_spec_matches(schedule, good_times, bad_times)
    assert_schedule_time_spec_matches(parsed_schedule, good_times, bad_times)
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # Now let&#39;s define a function to do our assertions</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> assert_schedule_time_spec_matches(schedule, good_times, bad_times) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # We want to make sure the schedule matches each of the good times.  We&#39;ll</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # define an `include?` boolean function</span>
    <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.each(good_times, <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">fn</span>(time) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span>
      assert <span class="pl-vo" style="box-sizing: border-box;">Schedule</span>.include?(schedule, time)
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>)
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # We also want to assert that the schedule doesn&#39;t include any of the good</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # times.</span>
    <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.each(bad_times, <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">fn</span>(time) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span>
      refute <span class="pl-vo" style="box-sizing: border-box;">Schedule</span>.include?(schedule, time)
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>)
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">OK, let&#39;s run the tests. They&#39;ll fail because we haven&#39;t defined that function yet. Let&#39;s go make this test pass:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # I want to define a spec for the inputs to our function.  I&#39;ve chosen</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # datetimes that match the GoodTimes spec and stole the types from there</span>
  <span class="pl-vo" style="box-sizing: border-box;">@type</span> year  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">::</span> non_neg_integer
  <span class="pl-vo" style="box-sizing: border-box;">@type</span> month <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">::</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">1</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">..</span><span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">12</span>
  <span class="pl-vo" style="box-sizing: border-box;">@type</span> day   <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">::</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">1</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">..</span><span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">31</span>
  <span class="pl-vo" style="box-sizing: border-box;">@type</span> hour   <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">::</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">..</span><span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">23</span>
  <span class="pl-vo" style="box-sizing: border-box;">@type</span> minute <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">::</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">..</span><span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">59</span>
  <span class="pl-vo" style="box-sizing: border-box;">@type</span> second <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">::</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">..</span><span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">59</span>
  <span class="pl-vo" style="box-sizing: border-box;">@type</span> date <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">::</span> {year, month, day}
  <span class="pl-vo" style="box-sizing: border-box;">@type</span> time <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">::</span> {hour, minute, second}
  <span class="pl-vo" style="box-sizing: border-box;">@type</span> datetime <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">::</span> {date, time}

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # Let&#39;s add our spec next, then define the function</span>
  <span class="pl-vo" style="box-sizing: border-box;">@spec</span> include?(<span class="pl-vo" style="box-sizing: border-box;">Agenda</span>.<span class="pl-vo" style="box-sizing: border-box;">Schedule</span>, datetime) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">::</span> boolean
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> include?(schedule, {{year, month, day}<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span>date, {hour, minute, _second}}) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # For now we&#39;ll just pass if the minute is included in the schedule</span>
    <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.any?(schedule.minute, <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">fn</span>(min) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> min <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">==</span> minute <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>)
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Alright, and the test passes. Let&#39;s add another bad time:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
    bad_times <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> [
      {{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">2015</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">5</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">5</span>}, {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">22</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">53</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">42</span>}},
      {{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">2015</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">5</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">5</span>}, {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">23</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">52</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">42</span>}}
    ]</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Run the tests, and it fails because we aren&#39;t checking the hour yet. What we want to do is make sure that all of the components of the schedule match the time. We&#39;ll add hour next:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
    [
      <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.any?(schedule.minute, <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">fn</span>(min) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> min <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">==</span> minute <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>),
      <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.any?(schedule.hour, <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">fn</span>(hr) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> hr <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">==</span> hour <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>)
    ]
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.all?</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">So now we&#39;re just verifying that both the hour and the minute of the schedule match the specified time. Run the tests now, and they should pass. Next, let&#39;s just write a test for each component in the schedule:</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">((( copy the first spec )))</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # Before we move on, we&#39;re going to make a module attribute called &#39;all_times&#39;</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # that will be a wiledcard that matches any time at all.  That way we can just</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # update it per-test and see just the bits we&#39;re testing...</span>

  <span class="pl-vo" style="box-sizing: border-box;">@all_times</span> %<span class="pl-vo" style="box-sizing: border-box;">Schedule</span>{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">minute:</span> <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.to_list(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">..</span><span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">59</span>), <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">hour:</span> <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.to_list(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">..</span><span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">23</span>), <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">day_of_month:</span> <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.to_list(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">1</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">..</span><span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">31</span>), <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">month:</span> <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.to_list(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">1</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">..</span><span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">12</span>), <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">day_of_week:</span> <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.to_list(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">..</span><span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">6</span>)}

  test <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>whether or not a schedule includes a given time<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    good_times <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> [
      {{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">2015</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">5</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">5</span>}, {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">23</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">53</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">42</span>}}
    ]
    bad_times <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> [
      {{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">2015</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">5</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">5</span>}, {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">22</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">53</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">42</span>}},
      {{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">2015</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">5</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">5</span>}, {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">23</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">52</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">42</span>}}
    ]
    schedule <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> %<span class="pl-vo" style="box-sizing: border-box;">Schedule</span>{<span class="pl-vo" style="box-sizing: border-box;">@all_times</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">minute:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">53</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">hour:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">23</span>]}
    parsed_schedule <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">Agenda</span>.<span class="pl-vo" style="box-sizing: border-box;">Parser</span>.parse(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>53 23 * * * :ok<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>)
    assert_schedule_time_spec_matches(schedule, good_times, bad_times)
    assert_schedule_time_spec_matches(parsed_schedule, good_times, bad_times)
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

  test <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>matching day_of_month<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    good_times <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> [
      {{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">2015</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">5</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">5</span>}, {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">23</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">53</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">42</span>}}
    ]
    bad_times <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> [
      {{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">2015</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">5</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">3</span>}, {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">23</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">53</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">42</span>}},
      {{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">2015</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">5</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">4</span>}, {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">23</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">53</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">42</span>}}
    ]
    schedule <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> %<span class="pl-vo" style="box-sizing: border-box;">Schedule</span>{<span class="pl-vo" style="box-sizing: border-box;">@all_times</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">day_of_month:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">5</span>] }
    parsed_schedule <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">Agenda</span>.<span class="pl-vo" style="box-sizing: border-box;">Parser</span>.parse(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>* * 5 * * :ok<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>)
    assert_schedule_time_spec_matches(schedule, good_times, bad_times)
    assert_schedule_time_spec_matches(parsed_schedule, good_times, bad_times)
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Run the tests, and they fail. Let&#39;s support day of month in the include? function:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> include?(schedule, {{year, month, day}<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span>date, {hour, minute, _second}}) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    [
      <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.any?(schedule.minute, <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">fn</span>(min) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> min <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">==</span> minute <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>),
      <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.any?(schedule.hour, <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">fn</span>(hr) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> hr <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">==</span> hour <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>),
      <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.any?(schedule.day_of_month, <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">fn</span>(dom) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> dom <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">==</span> day <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>)
    ]
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.all?
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Run them again, and they pass. Next we need to support month:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  test <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>matching month<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    good_times <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> [
      {{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">2015</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">5</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">5</span>}, {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">23</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">53</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">42</span>}}
    ]
    bad_times <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> [
      {{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">2015</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">6</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">5</span>}, {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">23</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">53</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">42</span>}},
      {{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">2015</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">3</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">5</span>}, {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">23</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">53</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">42</span>}}
    ]
    schedule <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> %<span class="pl-vo" style="box-sizing: border-box;">Schedule</span>{<span class="pl-vo" style="box-sizing: border-box;">@all_times</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">month:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">5</span>] }
    parsed_schedule <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">Agenda</span>.<span class="pl-vo" style="box-sizing: border-box;">Parser</span>.parse(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>* * * 5 * :ok<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>)
    assert_schedule_time_spec_matches(schedule, good_times, bad_times)
    assert_schedule_time_spec_matches(parsed_schedule, good_times, bad_times)
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">If we run the tests they&#39;ll fail. Let&#39;s add support:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  <span class="pl-vo" style="box-sizing: border-box;">@spec</span> include?(<span class="pl-vo" style="box-sizing: border-box;">Agenda</span>.<span class="pl-vo" style="box-sizing: border-box;">Schedule</span>, datetime) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">::</span> boolean
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> include?(schedule, {{year, month, day}<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span>date, {hour, minute, _second}}) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    [
      <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.any?(schedule.minute, <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">fn</span>(min) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> min <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">==</span> minute <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>),
      <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.any?(schedule.hour, <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">fn</span>(hr) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> hr <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">==</span> hour <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>),
      <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.any?(schedule.day_of_month, <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">fn</span>(dom) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> dom <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">==</span> day <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>),
      <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.any?(schedule.month, <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">fn</span>(mon) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> mon <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">==</span> month <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>)
    ]
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.all?
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Run the tests, and they&#39;ll pass. Now we&#39;ll add day of week, which is the only unique matcher out of the bunch. First we&#39;ll add the test:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  test <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>matching day_of_week<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    good_times <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> [
      {{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">2015</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">5</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">5</span>}, {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">23</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">53</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">42</span>}}
    ]
    bad_times <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> [
      {{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">2015</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">5</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">3</span>}, {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">23</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">53</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">42</span>}},
      {{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">2015</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">5</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">4</span>}, {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">23</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">53</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">42</span>}}
    ]
    schedule <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> %<span class="pl-vo" style="box-sizing: border-box;">Schedule</span>{<span class="pl-vo" style="box-sizing: border-box;">@all_times</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">day_of_week:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">2</span>] }
    parsed_schedule <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">Agenda</span>.<span class="pl-vo" style="box-sizing: border-box;">Parser</span>.parse(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>* * * * 2 :ok<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>)
    assert_schedule_time_spec_matches(schedule, good_times, bad_times)
    assert_schedule_time_spec_matches(parsed_schedule, good_times, bad_times)
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Run the tests and they&#39;ll fail. Now let&#39;s implement this final piece:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  <span class="pl-vo" style="box-sizing: border-box;">@spec</span> include?(<span class="pl-vo" style="box-sizing: border-box;">Agenda</span>.<span class="pl-vo" style="box-sizing: border-box;">Schedule</span>, datetime) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">::</span> boolean
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> include?(schedule, {{year, month, day}<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span>date, {hour, minute, _second}}) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    [
      <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.any?(schedule.minute, <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">fn</span>(min) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> min <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">==</span> minute <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>),
      <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.any?(schedule.hour, <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">fn</span>(hr) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> hr <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">==</span> hour <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>),
      <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.any?(schedule.day_of_month, <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">fn</span>(dom) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> dom <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">==</span> day <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>),
      <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.any?(schedule.month, <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">fn</span>(mon) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> mon <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">==</span> month <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>),
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">      # So here we&#39;re just going to call out to erlang&#39;s calendar module,</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">      # because it has a `day_of_the_week` function that&#39;s perfect</span>
      <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.any?(schedule.day_of_week, <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">fn</span>(dow) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:calendar</span>.day_of_the_week(date) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">==</span> dow <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>)
    ]
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.all?
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Alright, run the tests, and they pass.</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Summary</h2>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Now we have a function that can tell us whether a given time matches any of our agendas. The final piece will be to build a monitored OTP application that iterates through the schedules it knows about each minute and executes their commands if they match the schedule. See you soon!</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=50492">162_Building_a_Cron_System_Part_2.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=50493">162_Building_a_Cron_System_Part_2.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-b0aa6fa5d1b58b4a830006dc739b33b57dd29c30</guid>
      <pubDate>Fri, 08 May 2015 07:58:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/50492/162_Building_a_Cron_System_Part_2.mp4" length="59694751" type="video/mp4"/>
      <itunes:subtitle>Determining if a given time is matched by a Schedule.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[161 - Building a Cron System, Part 1]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=755</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><h1 style="box-sizing: border-box; font-size: 2.25em; margin-right: 0px; margin-bottom: 16px; margin-left: 0px; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; margin-top: 0px !important;">Episode 161: Building a Cron System - Part 1</h1>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">A friend of mine was discussing what an Elixir-based cron system might look like, and it kind of stuck in my head. As my way of answering the question in full, we&#39;re going to build one. Today we&#39;re just going to build a parser for cron-like syntax and a data structure that the parser will output. Let&#39;s get started.</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Project</h2>

<h3 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.43; font-size: 1.5em; position: relative; font-weight: bold; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Creating the project (not in video)</h3>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
mix new agenda --sup
<span class="pl-s3" style="box-sizing: border-box; color: rgb(0, 134, 179);">cd</span> agenda</pre>
</div>

<h3 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.43; font-size: 1.5em; position: relative; font-weight: bold; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Our first test</h3>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">We&#39;re going to start out with a test. I&#39;ll open up&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">test/agenda_test.exs</code>:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defmodule</span> <span class="pl-en" style="box-sizing: border-box; color: rgb(121, 93, 163);">AgendaTest</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">use</span> <span class="pl-vo" style="box-sizing: border-box;">ExUnit</span>.<span class="pl-vo" style="box-sizing: border-box;">Case</span>

  test <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>parsing a schedule string<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    command <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">quote</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
      <span class="pl-vo" style="box-sizing: border-box;">Module</span>.function(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:arg1</span>)
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
    assert <span class="pl-vo" style="box-sizing: border-box;">Agenda</span>.<span class="pl-vo" style="box-sizing: border-box;">Parser</span>.parse(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>0 0 0 0 0 Module.function(:arg1)<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">==</span> %<span class="pl-vo" style="box-sizing: border-box;">Agenda</span>.<span class="pl-vo" style="box-sizing: border-box;">Schedule</span>{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">minute:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">hour:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">day_of_month:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">month:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">day_of_week:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">command:</span> command}
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Alright, so here&#39;s what we want to do - define a cron-like string to generate an Agenda Schedule struct. Ultimately, someone should also be able to manually create an Agenda.Schedule as well, but we&#39;re going to focus on these cron strings for now.</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Next we&#39;ll build the bits necessary to simply make this test pass. Not too difficult with just the one test:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defmodule</span> <span class="pl-en" style="box-sizing: border-box; color: rgb(121, 93, 163);">Agenda.Schedule</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defstruct</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:minute</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:hour</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:day_of_week</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:month</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:day_of_month</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:command</span>]
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defmodule</span> <span class="pl-en" style="box-sizing: border-box; color: rgb(121, 93, 163);">Agenda.Parser</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> parse(schedule_string) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    command <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">quote</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
      <span class="pl-vo" style="box-sizing: border-box;">Module</span>.function(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:arg1</span>)
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
    %<span class="pl-vo" style="box-sizing: border-box;">Agenda</span>.<span class="pl-vo" style="box-sizing: border-box;">Schedule</span>{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">minute:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">hour:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">day_of_month:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">month:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">day_of_week:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">command:</span> command}
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">OK, so run the tests, and they pass. Next, we&#39;ll add another parse that forces us to start implementing things:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  test <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>parsing a schedule string<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    command <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">quote</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
      <span class="pl-vo" style="box-sizing: border-box;">Module</span>.function(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:arg1</span>)
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
    assert <span class="pl-vo" style="box-sizing: border-box;">Agenda</span>.<span class="pl-vo" style="box-sizing: border-box;">Parser</span>.parse(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>0 0 0 0 0 Module.function(:arg1)<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">==</span> %<span class="pl-vo" style="box-sizing: border-box;">Agenda</span>.<span class="pl-vo" style="box-sizing: border-box;">Schedule</span>{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">minute:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">hour:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">day_of_month:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">month:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">day_of_week:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">command:</span> command}
    assert <span class="pl-vo" style="box-sizing: border-box;">Agenda</span>.<span class="pl-vo" style="box-sizing: border-box;">Parser</span>.parse(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>1 0 0 0 0 Module.function(:arg1)<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">==</span> %<span class="pl-vo" style="box-sizing: border-box;">Agenda</span>.<span class="pl-vo" style="box-sizing: border-box;">Schedule</span>{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">minute:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">1</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">hour:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">day_of_month:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">month:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">day_of_week:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">command:</span> command}
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Run the tests, and they&#39;ll fail because we&#39;ve hardcoded the output of parse, of course. First, let&#39;s provide a 6-arity version of our parse function that assumes we&#39;ve already broken the string up into its various components:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defmodule</span> <span class="pl-en" style="box-sizing: border-box; color: rgb(121, 93, 163);">Agenda.Parser</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> parse(schedule_string) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    command <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">quote</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
      <span class="pl-vo" style="box-sizing: border-box;">Module</span>.function(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:arg1</span>)
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
    parse(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>, command)
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> parse(minute, hour, day_of_month, month, day_of_week, command) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    %<span class="pl-vo" style="box-sizing: border-box;">Agenda</span>.<span class="pl-vo" style="box-sizing: border-box;">Schedule</span>{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">minute:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">hour:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">day_of_month:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">month:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">day_of_week:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">command:</span> command}
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Next we&#39;ll split the string on spaces and then combine everything after the first five pieces:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defmodule</span> <span class="pl-en" style="box-sizing: border-box; color: rgb(121, 93, 163);">Agenda.Parser</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> parse(schedule_string) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    command <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">quote</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
      <span class="pl-vo" style="box-sizing: border-box;">Module</span>.function(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:arg1</span>)
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
    [minute, hour, day_of_month, month, day_of_week <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span> _rest] <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">String</span>.split(schedule_string)
    parse(minute, hour, day_of_month, month, day_of_week, command)
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> parse(minute, hour, day_of_month, month, day_of_week, command) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    %<span class="pl-vo" style="box-sizing: border-box;">Agenda</span>.<span class="pl-vo" style="box-sizing: border-box;">Schedule</span>{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">minute:</span> parse_pattern(minute), <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">hour:</span> parse_pattern(hour), <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">day_of_month:</span> parse_pattern(day_of_month), <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">month:</span> parse_pattern(month), <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">day_of_week:</span> parse_pattern(day_of_week), <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">command:</span> command}
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> parse_pattern(pattern) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    [<span class="pl-vo" style="box-sizing: border-box;">String</span>.to_integer(pattern)]
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">So here we&#39;ve got everything but the command being parsed in a simplistic form. Let&#39;s handle the command now. First we&#39;ll add a second command to our test:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defmodule</span> <span class="pl-en" style="box-sizing: border-box; color: rgb(121, 93, 163);">AgendaTest</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">use</span> <span class="pl-vo" style="box-sizing: border-box;">ExUnit</span>.<span class="pl-vo" style="box-sizing: border-box;">Case</span>

  test <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>parsing a schedule string<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    command <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">quote</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
      <span class="pl-vo" style="box-sizing: border-box;">Module</span>.function(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:arg1</span>)
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
    command2 <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">quote</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
      <span class="pl-vo" style="box-sizing: border-box;">Module</span>.function(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:arg2</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:arg3</span>)
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
    assert <span class="pl-vo" style="box-sizing: border-box;">Agenda</span>.<span class="pl-vo" style="box-sizing: border-box;">Parser</span>.parse(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>0 0 0 0 0 Module.function(:arg1)<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">==</span> %<span class="pl-vo" style="box-sizing: border-box;">Agenda</span>.<span class="pl-vo" style="box-sizing: border-box;">Schedule</span>{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">minute:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">hour:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">day_of_month:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">month:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">day_of_week:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">command:</span> command}
    assert <span class="pl-vo" style="box-sizing: border-box;">Agenda</span>.<span class="pl-vo" style="box-sizing: border-box;">Parser</span>.parse(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>1 0 0 0 0 Module.function(:arg2, :arg3)<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">==</span> %<span class="pl-vo" style="box-sizing: border-box;">Agenda</span>.<span class="pl-vo" style="box-sizing: border-box;">Schedule</span>{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">minute:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">1</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">hour:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">day_of_month:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">month:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">day_of_week:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">command:</span> command2}
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">We can run the tests and see that the second one fails to match since we&#39;ve hard-coded the command so far. Let&#39;s fix that:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defmodule</span> <span class="pl-en" style="box-sizing: border-box; color: rgb(121, 93, 163);">Agenda.Parser</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> parse(schedule_string) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    [minute, hour, day_of_month, month, day_of_week <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span> command_bits] <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">String</span>.split(schedule_string)
    command_string <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.join(command_bits)
    {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:ok</span>, command} <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">Code</span>.string_to_quoted(command_string)
    parse(minute, hour, day_of_month, month, day_of_week, command)
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  #...</span>
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Alright, run the tests now...and they don&#39;t quite pass. If you look, you&#39;ll see that our &quot;test commands&quot; don&#39;t have line number information, where the ones we parse do. We&#39;ll fix this for now by modifying our test commands:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defmodule</span> <span class="pl-en" style="box-sizing: border-box; color: rgb(121, 93, 163);">AgendaTest</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">use</span> <span class="pl-vo" style="box-sizing: border-box;">ExUnit</span>.<span class="pl-vo" style="box-sizing: border-box;">Case</span>

  <span class="pl-vo" style="box-sizing: border-box;">@command</span> <span class="pl-vo" style="box-sizing: border-box;">Code</span>.string_to_quoted!(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>Module.function(:arg1)<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>)
  <span class="pl-vo" style="box-sizing: border-box;">@command2</span> <span class="pl-vo" style="box-sizing: border-box;">Code</span>.string_to_quoted!(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>Module.function(:arg2, :arg3)<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>)

  test <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>parsing a schedule string<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    assert <span class="pl-vo" style="box-sizing: border-box;">Agenda</span>.<span class="pl-vo" style="box-sizing: border-box;">Parser</span>.parse(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>0 0 0 0 0 Module.function(:arg1)<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">==</span> %<span class="pl-vo" style="box-sizing: border-box;">Agenda</span>.<span class="pl-vo" style="box-sizing: border-box;">Schedule</span>{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">minute:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">hour:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">day_of_month:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">month:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">day_of_week:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">command:</span> <span class="pl-vo" style="box-sizing: border-box;">@command</span>}
    assert <span class="pl-vo" style="box-sizing: border-box;">Agenda</span>.<span class="pl-vo" style="box-sizing: border-box;">Parser</span>.parse(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>1 0 0 0 0 Module.function(:arg2, :arg3)<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">==</span> %<span class="pl-vo" style="box-sizing: border-box;">Agenda</span>.<span class="pl-vo" style="box-sizing: border-box;">Schedule</span>{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">minute:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">1</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">hour:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">day_of_month:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">month:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">day_of_week:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">command:</span> <span class="pl-vo" style="box-sizing: border-box;">@command2</span>}
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Run the tests again, and they pass. Next, we want to support passing multiple numbers in for each of our intervals. We&#39;ll try with a few different options for the hours:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  test <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>parsing multiple hours in the pattern<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    assert <span class="pl-vo" style="box-sizing: border-box;">Agenda</span>.<span class="pl-vo" style="box-sizing: border-box;">Parser</span>.parse(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>0 1,2 0 0 0 Module.function(:arg1)<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">==</span> %<span class="pl-vo" style="box-sizing: border-box;">Agenda</span>.<span class="pl-vo" style="box-sizing: border-box;">Schedule</span>{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">minute:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">hour:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">1</span>,<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">2</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">day_of_month:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">month:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">day_of_week:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">command:</span> <span class="pl-vo" style="box-sizing: border-box;">@command</span>}
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">This is easy enough to implement:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> parse_pattern(pattern) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    units <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">String</span>.split(pattern, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>,<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>)
    <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.map(units, <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">fn</span>(unit) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> <span class="pl-vo" style="box-sizing: border-box;">String</span>.to_integer(unit) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>)
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Now we&#39;re also supposed to support wildcards. To do that we&#39;ll need to also specify legitimate ranges for each component (for instance, hour 100 makes no sense). Let&#39;s do it:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  test <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>parsing a wildcard<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    assert <span class="pl-vo" style="box-sizing: border-box;">Agenda</span>.<span class="pl-vo" style="box-sizing: border-box;">Parser</span>.parse(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>0 0 0 0 * Module.function(:arg1)<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">==</span> %<span class="pl-vo" style="box-sizing: border-box;">Agenda</span>.<span class="pl-vo" style="box-sizing: border-box;">Schedule</span>{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">minute:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">hour:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">day_of_month:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">month:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">day_of_week:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>,<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">1</span>,<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">2</span>,<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">3</span>,<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">4</span>,<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">5</span>,<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">6</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">command:</span> <span class="pl-vo" style="box-sizing: border-box;">@command</span>}
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Alright and this fails because star can&#39;t be parsed as an integer. Let&#39;s go back into the&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">parse_pattern</code>function:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> parse(minute, hour, day_of_month, month, day_of_week, command) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    %<span class="pl-vo" style="box-sizing: border-box;">Agenda</span>.<span class="pl-vo" style="box-sizing: border-box;">Schedule</span>{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">minute:</span> parse_pattern(minute, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">..</span><span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">59</span>), <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">hour:</span> parse_pattern(hour, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">..</span><span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">11</span>), <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">day_of_month:</span> parse_pattern(day_of_month, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">1</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">..</span><span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">31</span>), <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">month:</span> parse_pattern(month, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">1</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">..</span><span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">12</span>), <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">day_of_week:</span> parse_pattern(day_of_week, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">..</span><span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">6</span>), <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">command:</span> command}
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> parse_pattern(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>*<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>, range) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.to_list range
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> parse_pattern(pattern, _range) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    units <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">String</span>.split(pattern, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>,<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>)
    <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.map(units, <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">fn</span>(unit) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> <span class="pl-vo" style="box-sizing: border-box;">String</span>.to_integer(unit) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>)
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">OK, so we&#39;ve passed the legitimate ranges in, and now we just expand the whole range. The other pattern we need to support is patterns like &quot;every five minutes&quot;. Let&#39;s add a test:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  test <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>parsing patterns like &#39;every five minutes&#39;<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    assert <span class="pl-vo" style="box-sizing: border-box;">Agenda</span>.<span class="pl-vo" style="box-sizing: border-box;">Parser</span>.parse(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>*/5 0 0 0 * Module.function(:arg1)<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">==</span> %<span class="pl-vo" style="box-sizing: border-box;">Agenda</span>.<span class="pl-vo" style="box-sizing: border-box;">Schedule</span>{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">minute:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>,<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">5</span>,<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">10</span>,<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">15</span>,<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">20</span>,<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">25</span>,<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">30</span>,<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">35</span>,<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">40</span>,<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">45</span>,<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">50</span>,<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">55</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">hour:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">day_of_month:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">month:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">day_of_week:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>,<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">1</span>,<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">2</span>,<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">3</span>,<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">4</span>,<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">5</span>,<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">6</span>], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">command:</span> <span class="pl-vo" style="box-sizing: border-box;">@command</span>}
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">And we&#39;ll just add a new pattern parser:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> parse_pattern(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>*<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>, range) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.to_list range
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> parse_pattern(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>*/<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&lt;&gt;</span> modulo, range) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    modulo <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">String</span>.to_integer(modulo)
    <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.filter(range, <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">fn</span>(i) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span>
      rem(i, modulo) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">==</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>)
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> parse_pattern(pattern, _range) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    units <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">String</span>.split(pattern, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>,<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>)
    <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.map(units, <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">fn</span>(unit) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=50110">161_Building_a_Cron_System_Part_1.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=50111">161_Building_a_Cron_System_Part_1.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-ba144cb69da49b33a044f873ed42f458d38adabf</guid>
      <pubDate>Sat, 02 May 2015 10:45:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/50111/161_Building_a_Cron_System_Part_1.mp4" length="82377888" type="video/mp4"/>
      <itunes:subtitle>Building a parser for cron-style job definitions.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[160 - MultiDef]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=754</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><h1 style="box-sizing: border-box; font-size: 2.25em; margin-right: 0px; margin-bottom: 16px; margin-left: 0px; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; margin-top: 0px !important;">Episode 160: MultiDef</h1>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Pattern matching in function definitions is awesome. It&#39;s also kind of verbose for Dave Thomas&#39;s tastes, so he created a library called MultiDef that makes it less verbose. Let&#39;s have a look.</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Project</h2>

<h3 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.43; font-size: 1.5em; position: relative; font-weight: bold; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Setup (not on video)</h3>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">We&#39;ll start a new project and add the multidef dependency:</p>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
mix new multidef_playground
<span class="pl-s3" style="box-sizing: border-box; color: rgb(0, 134, 179);">cd</span> multidef_playground
vim mix.exs</pre>
</div>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defp</span> deps <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    [
      {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:multidef</span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>~&gt; 0.2.1<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>}
    ]
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
mix deps.get</pre>
</div>

<h3 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.43; font-size: 1.5em; position: relative; font-weight: bold; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Go go go</h3>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">So we&#39;ve got a project that has the multidef dependency in place. We&#39;re going to use multidef in a test. Open up&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">test/multidef_playground_test.exs</code></p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defmodule</span> <span class="pl-en" style="box-sizing: border-box; color: rgb(121, 93, 163);">MultidefPlaygroundTest</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">use</span> <span class="pl-vo" style="box-sizing: border-box;">ExUnit</span>.<span class="pl-vo" style="box-sizing: border-box;">Case</span>

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # So here are some very basic outcomes we&#39;d like to see from our number</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # function:</span>
  test <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>getting numbers as atoms<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    assert <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:zero</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">Play</span>.number(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>)
    assert <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:one</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">Play</span>.number(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">1</span>)
    assert <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:two</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">Play</span>.number(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">2</span>)
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # We won&#39;t support more than 2</span>
    assert <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:noclue</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">Play</span>.number(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">3</span>)
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # We&#39;d like to support a 2-arity version as well I guess...</span>
    assert {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:one</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:two</span>} <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">Play</span>.number(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">1</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">2</span>)
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Alright, so this is extremely basic but I just wanted to show off multidef. Let&#39;s have a look and see where it saves us on verbosity:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defmodule</span> <span class="pl-en" style="box-sizing: border-box; color: rgb(121, 93, 163);">MultidefPlaygroundTest</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">use</span> <span class="pl-vo" style="box-sizing: border-box;">ExUnit</span>.<span class="pl-vo" style="box-sizing: border-box;">Case</span>

  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defmodule</span> <span class="pl-en" style="box-sizing: border-box; color: rgb(121, 93, 163);">Play</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">import</span> <span class="pl-vo" style="box-sizing: border-box;">MultiDef</span>

    mdef number <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
      <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:zero</span>
      <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">1</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:one</span>
      <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">2</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:two</span>
      n <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">when</span> n <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">2</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">and</span> is_number(n) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:noclue</span>
      <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">1</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">2</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> {number(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">1</span>), number(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">2</span>)}
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

  test <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>getting numbers as atoms<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # ...</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">And we&#39;ll run the tests, and they pass.</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Summary</h2>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">I don&#39;t know about you, but I&#39;m a huge fan of this syntax for defining multiple clauses rapidly. I&#39;d love it if it were in the language, but the beauty of macros is that it&#39;s pretty trivial to bring in and it feels like part of the language. Hope you enjoyed our look at multidef. See you soon!</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Resources</h2>

<ul class="task-list" style="box-sizing: border-box; padding-right: 0px; padding-left: 2em; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">
	<li style="box-sizing: border-box;"><a href="https://github.com/pragdave/mdef" rel="noreferrer" style="box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;">pragdave/mdef</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=50045">160_MultiDef.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=50046">160_MultiDef.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-ec5082c3c81960e8fccc25c52bacea299baa1e2b</guid>
      <pubDate>Thu, 30 Apr 2015 21:43:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/50045/160_MultiDef.mp4" length="8907589" type="video/mp4"/>
      <itunes:subtitle>A less-verbose way to define multiple function clauses, courtesy of Dave Thomas.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[159 - Simple One for One Supervisors]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=753</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><h1>Episode 159: Simple One for One Supervisors</h1>

<p>I just finished giving a talk at ElixirConfEU in Kracow that was based on the Extris episodes, but I embedded the Tetris game in the Phoenix application itself to allow me to give the talk faster.</p>

<p>While I was there, a subscriber requested more episodes on OTP. This is really a very good request, and there&#39;s no good reason for me to not talk about and use OTP more in episodes, so this is the first stab at fixing that.</p>

<p>Let&#39;s get started.</p>

<h2>Project</h2>

<p>I&#39;ve pulled down the repo at the tag <code>before_episode_159</code>. Right now we spin up a new tetris game each time a user connects, but they don&#39;t exist in an OTP supervision tree. We&#39;d like them to. Since we&#39;re spinning up a lot of temporary instances of the same type of thing, it makes sense to use a <code>simple_one_for_one</code> restart strategy. If we don&#39;t put these processes into a supervision tree, then they won&#39;t get stopped if, for example, we were to shut down our Phoenix application. You don&#39;t want to generate a bunch of orphaned processes in your system.</p>

<p>Simple-one-for-one is perfect if you&#39;re dynamically starting many workers based on a single template and supervising them. Let&#39;s add our new supervisor. I&#39;m opening up <code>lib/tetris/game_supervisor.ex</code>:</p>

<div class="highlight highlight-elixir">
<pre>
<span class="pl-k">defmodule</span> <span class="pl-en">Tetris.GameSupervisor</span> <span class="pl-k">do</span>
  <span class="pl-k">use</span> <span class="pl-vo">Supervisor</span>

  <span class="pl-k">def</span> start_link(opts <span class="pl-k">\\</span> []) <span class="pl-k">do</span>
    <span class="pl-vo">Supervisor</span>.start_link(<span class="pl-v">__MODULE__</span>, <span class="pl-c1">:ok</span>, opts)
  <span class="pl-k">end</span>

<span class="pl-c">  # We&#39;re providing a nice public API for starting a game here.</span>
  <span class="pl-k">def</span> start_game(supervisor) <span class="pl-k">do</span>
    <span class="pl-vo">Supervisor</span>.start_child(supervisor, [])
  <span class="pl-k">end</span>

  <span class="pl-k">def</span> init(<span class="pl-c1">:ok</span>) <span class="pl-k">do</span>
    children <span class="pl-k">=</span> [
      worker(<span class="pl-vo">Tetris</span>.<span class="pl-vo">Game</span>, [], <span class="pl-c1">restart:</span> <span class="pl-c1">:temporary</span>)
    ]

    supervise(children, <span class="pl-c1">strategy:</span> <span class="pl-c1">:simple_one_for_one</span>)
  <span class="pl-k">end</span>
<span class="pl-k">end</span></pre>
</div>

<p>Now we need to start this supervisor when our application starts and register it so that we can talk to it from the Channels trivially later. This is in <code>lib/tetris.ex</code>:</p>

<div class="highlight highlight-elixir">
<pre>
<span class="pl-k">defmodule</span> <span class="pl-en">Tetris</span> <span class="pl-k">do</span>
<span class="pl-c">  # ...</span>
  <span class="pl-vo">@game_supervisor_name</span> <span class="pl-vo">Tetris</span>.<span class="pl-vo">GameSupervisor</span>

  <span class="pl-k">def</span> start(_type, _args) <span class="pl-k">do</span>
    <span class="pl-k">import</span> <span class="pl-vo">Supervisor</span>.<span class="pl-vo">Spec</span>, <span class="pl-c1">warn:</span> <span class="pl-c1">false</span>

    children <span class="pl-k">=</span> [
<span class="pl-c">      # Start the endpoint when the application starts</span>
      supervisor(<span class="pl-vo">Tetris</span>.<span class="pl-vo">Endpoint</span>, []),
<span class="pl-c">      # Start the Ecto repository</span>
      worker(<span class="pl-vo">Tetris</span>.<span class="pl-vo">Repo</span>, []),
<span class="pl-c">      # Start the GameSupervisor</span>
      supervisor(<span class="pl-vo">Tetris</span>.<span class="pl-vo">GameSupervisor</span>, [[<span class="pl-c1">name:</span> <span class="pl-vo">@game_supervisor_name</span>]])
    ]

<span class="pl-c">    # See http://elixir-lang.org/docs/stable/elixir/Supervisor.html</span>
<span class="pl-c">    # for other strategies and supported options</span>
    opts <span class="pl-k">=</span> [<span class="pl-c1">strategy:</span> <span class="pl-c1">:one_for_one</span>, <span class="pl-c1">name:</span> <span class="pl-vo">Tetris</span>.<span class="pl-vo">Supervisor</span>]
    <span class="pl-vo">Supervisor</span>.start_link(children, opts)
  <span class="pl-k">end</span>
<span class="pl-c">  #...</span>
<span class="pl-k">end</span></pre>
</div>

<p>Now we also need to make our game support the <code>start_link</code> function - right now since we weren&#39;t actually linking it, we just provided <code>start</code>. That&#39;s not so smart, and it won&#39;t work with a <code>simple_one_for_one</code> supervisor launching it, so let&#39;s fix it:</p>

<div class="highlight highlight-elixir">
<pre>
  <span class="pl-k">def</span> start_link <span class="pl-k">do</span>
    {<span class="pl-c1">:ok</span>, pid} <span class="pl-k">=</span> <span class="pl-vo">GenServer</span>.start_link(<span class="pl-v">__MODULE__</span>, [])
    <span class="pl-c1">:timer</span>.send_interval(<span class="pl-vo">@game_tick</span>, pid, <span class="pl-c1">:tick</span>)
    {<span class="pl-c1">:ok</span>, pid}
  <span class="pl-k">end</span></pre>
</div>

<p>Now let&#39;s start our server, with an iex session, using <code>iex -S mix phoenix.server</code></p>

<p>Alright, now let&#39;s try it out in the browser ((( do it, open a few tabs )))</p>

<p>So this looks basically like it always has, but there&#39;s a difference. Let&#39;s open up observer and observe the supervision tree:</p>

<pre>
<code>:observer.start
</code></pre>

<p>Now we can find our game supervisor in the supervision tree. Let&#39;s open a ton more tabs and see all the processes it spawns: ((( do it, go back to observer )))</p>

<p>Now let&#39;s kill the GameSupervisor process. Since it&#39;s linked to those children, they&#39;ll all die. We can see this by going into the browser and noticing they&#39;re no longer receiving updates. Now let&#39;s refresh a few and see that they start back up.</p>

<h2>Summary</h2>

<p>Alright, that&#39;s it. Today we reviewed how we could take our rogue one-off processes and place them under supervision, so that they wouldn&#39;t be orphaned and consuming resources in the event of a failure further up the supervision tree. See you soon!</p>

<h2>Resources</h2>

<ul class="task-list">
	<li><a href="http://elixir-lang.org/getting-started/mix-otp/supervisor-and-application.html#simple-one-for-one-supervisors" rel="noreferrer">Simple one for one in Elixir Guide</a></li>
	<li><a href="https://github.com/knewter/elixirconfeu_tetris" rel="noreferrer"><code>knewter/elixirconfeu_tetris</code></a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=49876">159_Simple_One_for_One_Supervisors.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=49877">159_Simple_One_for_One_Supervisors.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-db3cc80f439626ec5f75e295168642d6e07b3145</guid>
      <pubDate>Sun, 26 Apr 2015 00:01:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/49876/159_Simple_One_for_One_Supervisors.mp4" length="30543141" type="video/mp4"/>
      <itunes:subtitle>Getting a dynamically spawned process into a supervision tree to avoid orphaned processes, among other things.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[158 - SOAP with Detergentex]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=746</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><h1>Episode 158: SOAP with Detergentex</h1>

<p>In a previous episode, we interacted with Yahoo&#39;s RSS Weather API. Today we&#39;re going to use SOAP to interact with a SOAP-based weather service API. Let&#39;s get started:</p>

<h2>Project</h2>

<h3>Initial Setup (not on video)</h3>

<p>We&#39;ll start a new project with <code>mix new soap_weather</code>. Then we&#39;ll add detergentex and its dependencies:</p>

<div class="highlight highlight-elixir">
<pre>
  <span class="pl-k">def</span> application <span class="pl-k">do</span>
    [<span class="pl-c1">applications:</span> [<span class="pl-c1">:logger</span>, <span class="pl-c1">:detergentex</span>]]
  <span class="pl-k">end</span>

  <span class="pl-k">defp</span> deps <span class="pl-k">do</span>
    [
      {<span class="pl-c1">:detergent</span>, <span class="pl-c1">github:</span> <span class="pl-s1"><span class="pl-pds">&quot;</span>devinus/detergent<span class="pl-pds">&quot;</span></span> },
      {<span class="pl-c1">:erlsom</span>, <span class="pl-c1">github:</span> <span class="pl-s1"><span class="pl-pds">&quot;</span>willemdj/erlsom<span class="pl-pds">&quot;</span></span>},
      {<span class="pl-c1">:detergentex</span>, <span class="pl-s1"><span class="pl-pds">&quot;</span>0.0.1<span class="pl-pds">&quot;</span></span>}
    ]
  <span class="pl-k">end</span></pre>
</div>

<p>We&#39;ll fetch them with <code>mix deps.get</code>.</p>

<h3>Basic usage</h3>

<p>I&#39;ve got a project that has detergentex in place. We&#39;ll just open an iex session:</p>

<div class="highlight highlight-sh">
<pre>
iex -S mix</pre>
</div>

<p>Alright, so we&#39;re going to store the WSDL in a string:</p>

<pre>
<code>wsdl = &quot;http://www.webservicex.net/globalweather.asmx?WSDL&quot;
</code></pre>

<p>This service provides two functions: GetCitiesByCountry and GetWeather. GetCitiesByCountry takes a country name and returns a list of cities. GetWeather takes a city name and a country name and returns weather data. It doesn&#39;t reference a schema of any sort, which makes this example a little easier to show off without getting caught up in more advanced erlsom usage.</p>

<p>The first thing we want to do is get the list of cities in the United States. Let&#39;s see how to go about that with detergentex:</p>

<pre>
<code>iex&gt; {:ok, _, [{response_type, _, data}]} = Detergentex.call(wsdl, &quot;GetCitiesByCountry&quot;, [&quot;United States&quot;])
{:ok, :undefined,
 [{:&quot;p:GetCitiesByCountryResponse&quot;, [],
   &#39;&lt;NewDataSet&gt;\r\n  &lt;Table&gt;\r\n    &lt;Country&gt;United States&lt;/Country&gt;\r\n    &lt;City&gt;Claiborne Range, Airways Facilit&lt;/City&gt;\r\n  &lt;/Table&gt;\r\n  &lt;Table&gt;\r\n    &lt;Country&gt;United States&lt;/Country&gt;\r\n    &lt;City&gt;Payson&lt;/City&gt;\r\n  &lt;/Table&gt;\r\n  &lt;Table&gt;\r\n    &lt;Country&gt;United States&lt;/Country&gt;\r\n    &lt;City&gt;Custer, Custer County Airport&lt;/City&gt;\r\n  &lt;/Table&gt;\r\n  &lt;Table&gt;\r\n    &lt;Country&gt;United States&lt;/Country&gt;\r\n    &lt;City&gt;Andover, Aeroflex-Andover Airport&lt;/City&gt;\r\n  &lt;/Table&gt;\r\n  &lt;Table&gt;\r\n    &lt;Country&gt;United States&lt;/Country&gt;\r\n    &lt;City&gt;Nogales Automatic Meteorological Observing System&lt;/City&gt;\r\n  &lt;/Table&gt;\r\n  &lt;Table&gt;\r\n    &lt;Country&gt;United States&lt;/Country&gt;\r\n    &lt;City&gt;Elkhart / Elkhart-Morton County&lt;/City&gt;\r\n  &lt;/Table&gt;\r\n  &lt;Table&gt;\r\n    &lt;Country&gt;United States&lt;/Country&gt;\r\n    &lt;City&gt;Saint Johnsbury&lt;/City&gt;\r\n  &lt;/Table&gt;\r\n  &lt;Table&gt;\r\n    &lt;Country&gt;United States&lt;/Country&gt;\r\n    &lt;City&gt;Salmon&lt;/City&gt;\r\n  &lt;/Table&gt;\r\n  &lt;Table&gt;\r\n    &lt;Country&gt;United States&lt;/Country&gt;\r\n    &lt;City&gt;White Sands&lt;/City&gt;\r\n  &lt;/Table&gt;\r\n  &lt;Table&gt;\r\n    &lt;Country&gt;United States&lt;/Country&gt;\r\n    &lt;City&gt;Dare County Gunnery Range&lt;/City&gt;\r\n  &lt;/Table&gt;\r\n  &lt;Table&gt;\r\n    &lt;Country&gt;United States&lt;/Country&gt;\r\n    &lt;City&gt;Poinsett Range, Sumpter&lt;/City&gt;\r\n  &lt;/Table&gt;\r\n  &lt;Table&gt;\r\n    &lt;Country&gt;United States&lt;/Country&gt;\r\n    &lt;City&gt;Buffalo&lt;/City&gt;\r\n  &lt;/Table&gt;\r\n  &lt;Table&gt;\r\n    &lt;Country&gt;United States&lt;/Country&gt;\r\n    &lt;City&gt;Drummond&lt;/City&gt;\r\n  &lt;/Table&gt;\r\n  &lt;Table&gt;\r\n    &lt;Country&gt;United States&lt;/Country&gt;\r\n    &lt;City&gt;Harlowton&lt;/City&gt;\r\n  &lt;/Table&gt;\r\n  &lt;Table&gt;\r\n    &lt;Country&gt;United States&lt;/Country&gt;\r\n    &lt;City&gt;Graying Air Force Range&lt;/City&gt;\r\n  &lt;/Table&gt;\r\n  &lt;Table&gt;\r\n    &lt;Country&gt;United States&lt;/Country&gt;\r\n    &lt;City&gt;Thompson Falls&lt;/City&gt;\r\n  &lt;/Table&gt;\r\n  &lt;Table&gt;\r\n    &lt;Country&gt;United States&lt;/Country&gt;\r\n    &lt;City&gt;Clayton Lake&lt;/City&gt;\r\n  &lt;/Table&gt;\r\n  &lt;Table&gt;\r\n    &lt;Country&gt;United States&lt;/Country&gt;\r\n    &lt;City&gt;Perry-Foley, Perry-Foley Airport&lt;/City&gt;\r\n  &lt;/Table&gt;\r\n  &lt;Table&gt;\r\n    &lt;Country&gt;United States&lt;/Country&gt;\r\n    &lt;City&gt;Diamond Shoals Coast Guard Stati&lt;/City&gt;\r\n  &lt;/Table&gt;\r\n  &lt;Table&gt;\r\n    &lt;Country&gt;United States&lt;/Country&gt;\r\n    &lt;City&gt;Brookings&lt;/City&gt;\r\n  &lt;/Table&gt;\r\n  &lt;Table&gt;\r\n    &lt;Country&gt;United States&lt;/Country&gt;\r\n    &lt;City&gt;Blanding&lt;/City&gt;\r\n  &lt;/Table&gt;\r\n  &lt;Table&gt;\r\n    &lt;Country&gt;United States&lt;/Country&gt;\r\n    &lt;City&gt;Cuddleback Gunnery Range&lt;/City&gt;\r\n  &lt;/Table&gt;\r\n  &lt;Table&gt;\r\n    &lt;Country&gt;United States&lt;/Country&gt;\r\n    &lt;City&gt;Corona / Lincoln&lt;/City&gt;\r\n  &lt;/Table&gt;\r\n  &lt;Table&gt;\r\n    &lt;Country&gt;United States&lt;/Country&gt;\r\n    &lt;City&gt;Hanksville&lt;/City&gt;\r\n  &lt;/Table&gt;\r\n  &lt;Table&gt;\r\n    &lt;Country&gt;United States&lt;/Country&gt;\r\n    &lt;City&gt;Lakeview&lt;/City&gt;\r\n  &lt;/Table&gt;\r\n  &lt;Table&gt;\r\n    &lt;Country&gt;United States&lt;/Country&gt;\r\n    &lt;City&gt;Melrose Gunnery Range&lt;/City&gt;\r\n  &lt;/Table&gt;\r\n  &lt;Table&gt;\r\n    &lt;Country&gt;United States&lt;/Country&gt;\r\n    &lt;City&gt;Moriarty&lt;/City&gt;\r\n  &lt;/Table&gt;\r\n  &lt;Table&gt;\r\n    &lt;Country&gt;United States&lt;/Country&gt;\r\n    &lt;City&gt;Torreon&lt;/City&gt;\r\n  &lt;/Table&gt;...&#39;}]}
</code></pre>

<p>So now we&#39;ve bound the variable <code>data</code> to a bit string containing a bunch of XML. We can use erlsom to parse this xml into a bit of a more readable data structure:</p>

<pre>
<code>iex&gt; :erlsom.simple_form(data)
{:ok,
 {&#39;NewDataSet&#39;, [],
  [{&#39;Table&#39;, [],
    [{&#39;Country&#39;, [], [&#39;United States&#39;]},
     {&#39;City&#39;, [], [&#39;Claiborne Range, Airways Facilit&#39;]}]},
   {&#39;Table&#39;, [],
    [{&#39;Country&#39;, [], [&#39;United States&#39;]}, {&#39;City&#39;, [], [&#39;Payson&#39;]}]},
   {&#39;Table&#39;, [],
    [{&#39;Country&#39;, [], [&#39;United States&#39;]},
     {&#39;City&#39;, [], [&#39;Custer, Custer County Airport&#39;]}]},
   {&#39;Table&#39;, [],
    [{&#39;Country&#39;, [], [&#39;United States&#39;]},
     {&#39;City&#39;, [], [&#39;Andover, Aeroflex-Andover Airport&#39;]}]},
   {&#39;Table&#39;, [],
    [{&#39;Country&#39;, [], [&#39;United States&#39;]},
     {&#39;City&#39;, [], [&#39;Nogales Automatic Meteorological Observing System&#39;]}]},
   {&#39;Table&#39;, [],
    [{&#39;Country&#39;, [], [&#39;United States&#39;]},
     {&#39;City&#39;, [], [&#39;Elkhart / Elkhart-Morton County&#39;]}]},
   {&#39;Table&#39;, [],
    [{&#39;Country&#39;, [], [&#39;United States&#39;]}, {&#39;City&#39;, [], [&#39;Saint Johnsbury&#39;]}]},
   {&#39;Table&#39;, [],
    [{&#39;Country&#39;, [], [&#39;United States&#39;]}, {&#39;City&#39;, [], [&#39;Salmon&#39;]}]},
   {&#39;Table&#39;, [],
    [{&#39;Country&#39;, [], [&#39;United States&#39;]}, {&#39;City&#39;, [], [&#39;White Sands&#39;]}]},
   {&#39;Table&#39;, [],
    [{&#39;Country&#39;, [], [&#39;United States&#39;]},
     {&#39;City&#39;, [], [&#39;Dare County Gunnery Range&#39;]}]},
</code></pre>

<p>One of these cities is called Salmon. I find that hilarious, so let&#39;s follow up and find the weather there:</p>

<pre>
<code>iex&gt; {:ok, _, [{response_type, _, data}]} = Detergentex.call(wsdl, &quot;GetWeather&quot;, [&quot;Salmon&quot;, &quot;United States&quot;])
{:ok, :undefined,
 [{:&quot;p:GetWeatherResponse&quot;, [],
   &#39;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-16&quot;?&gt;\r\n&lt;CurrentWeather&gt;\r\n  &lt;Location&gt;KING SALMON AIRPORT, AK, United States (PAKN) 58-41N 156-39W 10M&lt;/Location&gt;\r\n  &lt;Time&gt;Apr 19, 2015 - 12:54 PM EDT / 2015.04.19 1654 UTC&lt;/Time&gt;\r\n  &lt;Wind&gt; from the SE (130 degrees) at 8 MPH (7 KT):0&lt;/Wind&gt;\r\n  &lt;Visibility&gt; 10 mile(s):0&lt;/Visibility&gt;\r\n  &lt;SkyConditions&gt; overcast&lt;/SkyConditions&gt;\r\n  &lt;Temperature&gt; 37.0 F (2.8 C)&lt;/Temperature&gt;\r\n  &lt;DewPoint&gt; 33.1 F (0.6 C)&lt;/DewPoint&gt;\r\n  &lt;RelativeHumidity&gt; 85%&lt;/RelativeHumidity&gt;\r\n  &lt;Pressure&gt; 29.09 in. Hg (985 hPa)&lt;/Pressure&gt;\r\n  &lt;Status&gt;Success&lt;/Status&gt;\r\n&lt;/CurrentWeather&gt;&#39;}]}
</code></pre>

<p>We can use erlsom again to make this a bit more legible:</p>

<pre>
<code>iex&gt; :erlsom.simple_form(data)
{:ok,
 {&#39;CurrentWeather&#39;, [],
  [{&#39;Location&#39;, [],
    [&#39;KING SALMON AIRPORT, AK, United States (PAKN) 58-41N 156-39W 10M&#39;]},
   {&#39;Time&#39;, [], [&#39;Apr 19, 2015 - 12:54 PM EDT / 2015.04.19 1654 UTC&#39;]},
   {&#39;Wind&#39;, [], [&#39; from the SE (130 degrees) at 8 MPH (7 KT):0&#39;]},
   {&#39;Visibility&#39;, [], [&#39; 10 mile(s):0&#39;]}, {&#39;SkyConditions&#39;, [], [&#39; overcast&#39;]},
   {&#39;Temperature&#39;, [], [&#39; 37.0 F (2.8 C)&#39;]},
   {&#39;DewPoint&#39;, [], [&#39; 33.1 F (0.6 C)&#39;]}, {&#39;RelativeHumidity&#39;, [], [&#39; 85%&#39;]},
   {&#39;Pressure&#39;, [], [&#39; 29.09 in. Hg (985 hPa)&#39;]}, {&#39;Status&#39;, [], [&#39;Success&#39;]}]},
 []}
</code></pre>

<h2>Resources</h2>

<ul class="task-list">
	<li><a href="https://github.com/r-icarus/detergentex" rel="noreferrer">r-icarus/detergentex</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=49699">158_SOAP_with_Detergentex.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=49700">158_SOAP_with_Detergentex.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-434ea42ad6c8d1d06d216710d1992d37f0d16066</guid>
      <pubDate>Thu, 23 Apr 2015 16:06:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/49699/158_SOAP_with_Detergentex.mp4" length="19537071" type="video/mp4"/>
      <itunes:subtitle>Using the `detergentex` library, which wraps the&#13;
erlang `detergent` library, to interact with SOAP&#13;
services in Elixir.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[157 - Playing with the Code Module Part 1 - eval_string]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=744</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><h1 style="box-sizing: border-box; font-size: 2.25em; margin-right: 0px; margin-bottom: 16px; margin-left: 0px; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; margin-top: 0px !important;">Episode 157: Playing with the Code Module, Part 1 -&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: inherit; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">eval_string</code></h1>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">In the Elixir Standard Library, there&#39;s a module I don&#39;t often use. It&#39;s the&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">Code</code>&nbsp;module. It&#39;s got some fun uses, and I thought we&#39;d look at a few:</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Play</h2>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">We&#39;ll be playing in iex. Open it up.</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">The first and dirtiest thing you can do with the code module is to eval some code:</p>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">Code.eval_string(&quot;1 + 2&quot;)
</code></pre>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">The return for&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">eval_string</code>&nbsp;is a tuple with the value of the evaluation in the first position, and a keyword list of the values of all the variable bindings after evaluating the string. Let&#39;s see that bit:</p>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">Code.eval_string(&quot;foo = 1&quot;)
</code></pre>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">OK, so that&#39;s a thing. What if we evaluate a string that references an unbound variable?</p>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">Code.eval_string(&quot;foo&quot;)
</code></pre>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">OK, we get a CompileError because it doesn&#39;t know what to do with&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">foo</code>. The second argument to<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">eval_string</code>&nbsp;is the binding, and it&#39;s optional. Let&#39;s give&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">foo</code>&nbsp;a value:</p>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">Code.eval_string(&quot;foo&quot;, [foo: 1])
</code></pre>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">OK, so that code, evaluated in that binding, is valid.</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">The binding is what gets output, so you could chain some strings together and eval them, passing the binding as you go:</p>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">iex(6)&gt; {value, binding} = Code.eval_string(&quot;foo = 1&quot;)
{1, [foo: 1]}
iex(7)&gt; {value, binding} = Code.eval_string(&quot;bar = foo + 1&quot;, binding)
{2, [bar: 2, foo: 1]}
iex(8)&gt; {value, binding} = Code.eval_string(&quot;IO.puts bar&quot;, binding)
2
{:ok, [bar: 2, foo: 1]}
</code></pre>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">The third argument to the&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">eval_string</code>&nbsp;function is a list of environment options. You can use this to see how the environment is passed around for the sake of building stacktraces. For instance, we&#39;ll make our code think it&#39;s evaluated in the context of a made up script, on a made up line:</p>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">iex(9)&gt; Code.eval_string(&quot;foo&quot;, [], file: &quot;madeup.exs&quot;, line: 2)
** (CompileError) madeup.exs:2: undefined function foo/0
    (elixir) src/elixir.erl:228: :elixir.quoted_to_erl/3
    (elixir) src/elixir.erl:179: :elixir.eval_forms/4
    (elixir) lib/code.ex:131: Code.eval_string/3
    (stdlib) erl_eval.erl:657: :erl_eval.do_apply/6
    (elixir) src/elixir.erl:197: :elixir.erl_eval/3
    (elixir) src/elixir.erl:185: :elixir.eval_forms/4
       (iex) lib/iex/evaluator.ex:116: IEx.Evaluator.handle_eval/4
</code></pre>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">If you look at the CompileError, it&#39;s clearly saying it failed to compile our made up file. That&#39;s kind of fun and gives some insight into the interpreter. If you were curious what the actual current environment was in your iex session, you can see that:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-v" style="box-sizing: border-box; color: rgb(29, 62, 129);">__ENV__</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">A few more options around this environment are what aliases are defined. Let&#39;s modify our environment:</p>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">iex(10)&gt; alias Foo.Bar
nil
iex(11)&gt; __ENV__
%Macro.Env{aliases: [{Bar, Foo.Bar}], context: nil, context_modules: [],
 export_vars: nil, file: &quot;iex&quot;, function: nil,
 functions: [{Kernel,
   [!=: 2, !==: 2, *: 2, +: 1, +: 2, ++: 2, -: 1, -: 2, --: 2, /: 2, &lt;: 2,
    &lt;=: 2, ==: 2, ===: 2, =~: 2, &gt;: 2, &gt;=: 2, abs: 1, apply: 2, apply: 3,
    binary_part: 3, bit_size: 1, byte_size: 1, div: 2, elem: 2, exit: 1,
    function_exported?: 3, get_and_update_in: 3, get_in: 2, hd: 1, inspect: 1,
    inspect: 2, is_atom: 1, is_binary: 1, is_bitstring: 1, is_boolean: 1,
    is_float: 1, is_function: 1, is_function: 2, is_integer: 1, is_list: 1,
    is_map: 1, ...]}], lexical_tracker: nil, line: 11, local: IEx.Helpers,
 macro_aliases: [],
 macros: [{Kernel,
   [!: 1, &amp;&amp;: 2, ..: 2, &lt;&gt;: 2, @: 1, alias!: 1, and: 2, binding: 0, binding: 1,
    def: 1, def: 2, defdelegate: 2, defexception: 1, defimpl: 2, defimpl: 3,
    defmacro: 1, defmacro: 2, defmacrop: 1, defmacrop: 2, defmodule: 2,
    defoverridable: 1, defp: 1, defp: 2, defprotocol: 2, defstruct: 1,
    destructure: 2, get_and_update_in: 2, if: 2, in: 2, is_nil: 1, match?: 2,
    or: 2, put_in: 2, raise: 1, raise: 2, reraise: 2, reraise: 3, ...]}],
 module: nil, requires: [IEx.Helpers, Kernel, Kernel.Typespec],
 vars: [binding: nil, value: nil]}
</code></pre>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Let&#39;s look at how our current binding in iex works out:</p>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">foo = 1
__ENV__
</code></pre>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">OK, so foo isn&#39;t defined in our environment. That makes sense, since the environment and the binding have been different things. How can we see the current binding that our code is being evaluated against?</p>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">binding
</code></pre>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">OK, so there we go. So if we want to evaluate a string in the context of our current context and binding, we can do that:</p>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">foo = 1
bar = 2
Code.eval_string(&quot;foo = bar&quot;, binding, __ENV__)
</code></pre>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Summary</h2>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Alright, so there&#39;s an exploration of&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">eval_string</code>. It&#39;s not earth-shattering, but it&#39;s pretty cool to know it&#39;s there. There are some more fun functions in this module that we&#39;ll look at later. See you soon!</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Resources</h2>

<ul class="task-list" style="box-sizing: border-box; padding-right: 0px; padding-left: 2em; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">
	<li style="box-sizing: border-box;"><a href="http://elixir-lang.org/docs/stable/elixir/" rel="noreferrer" style="box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;">Code module documentation</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=49378">157_Playing_with_the_Code_Module_Part_1.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=49379">157_Playing_with_the_Code_Module_Part_1.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-d33a09418921d033fdcd444e29e2fc0731d2fc5b</guid>
      <pubDate>Thu, 16 Apr 2015 21:28:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/49378/157_Playing_with_the_Code_Module_Part_1.mp4" length="16537210" type="video/mp4"/>
      <itunes:subtitle>Exploring the standard library's Code module's `eval_string` function for fun and whatnot.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[156 - Interacting with Amazon's APIs with erlcloud]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=742</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><h1 style="box-sizing: border-box; font-size: 2.25em; margin-right: 0px; margin-bottom: 16px; margin-left: 0px; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; margin-top: 0px !important;">Episode 156: Interacting with Amazon&#39;s APIs with erlcloud</h1>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">I actually just recorded an episode digging into the internals of the oauth2 library we used in the last episode, but Sonny informed me before I uploaded it that he&#39;s got some substantial API changes coming down the pipe, so rather than release an episode that was out of date immediately, I decided to show off usage of erlcloud to interact with Amazon&#39;s APIs. Let&#39;s get started.</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Project</h2>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">I&#39;m in a project that already has the typical Amazon environment variables set and has pulled in the erlcloud dependency. Let&#39;s hop right into an iex sesssion:</p>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
iex -S mix</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">We just need to make sure the ssl application is started, then we can start the erlcloud application:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:ssl</span>.start()
<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:erlcloud</span>.start()</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Now you can list your AMIs:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:erlcloud_ec2</span>.describe_images</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">You can list your S3 buckets:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:erlcloud_s3</span>.list_buckets</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">There&#39;s a lot more you can do, but listign it all would be extremely boring.</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">The erlcloud application supports&nbsp;<em style="box-sizing: border-box;">most</em>&nbsp;of Amazon&#39;s AWS services. The newer ones haven&#39;t yet been implemented (for instance, I don&#39;t see Lambda), but the others are all supported. Sadly, documentation is pretty sparse. However, you have access to the source code and requests to AWS resources tend to follow a pretty reliable pattern.</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Resources</h2>

<ul class="task-list" style="box-sizing: border-box; padding-right: 0px; padding-left: 2em; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">
	<li style="box-sizing: border-box;"><a href="https://github.com/gleber/erlcloud" rel="noreferrer" style="box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;">gleber/erlcloud</a></li>
	<li style="box-sizing: border-box;"><a href="http://other.erldocs.com/github.com/couchemar/erlcloud/master/" rel="noreferrer" style="box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;">erlcloud on other erldocs</a>&nbsp;- Welp, sadly the only module I see any documentation for - kinesis - doesn&#39;t appear in this listing :-\</li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=49056">156_Interacting_with_Amazons_APIs_with_erlcloud.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=49057">156_Interacting_with_Amazons_APIs_with_erlcloud.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-4a46f97061c681389ed4c3f0c4ba43b69ee66e9b</guid>
      <pubDate>Sat, 11 Apr 2015 18:54:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/49056/156_Interacting_with_Amazons_APIs_with_erlcloud.mp4" length="12474740" type="video/mp4"/>
      <itunes:subtitle>A comically brief overview of erlcloud and evidence that it does, in fact, work for me.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[155 - OAuth2: Code Spelunking]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=740</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><h1 style="box-sizing: border-box; font-size: 2.25em; margin-right: 0px; margin-bottom: 16px; margin-left: 0px; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; margin-top: 0px !important;">Episode 155: OAuth2 - Code Spelunking</h1>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">In today&#39;s episode, we&#39;re going to have a detailed look at Sonny Scroggin&#39;s example GitHub OAuth2 Phoenix integration application. He built the OAuth2 library, which is absolutely amazing. Let&#39;s get started.</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Project</h2>

<h3 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.43; font-size: 1.5em; position: relative; font-weight: bold; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Setup (not in the video)</h3>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">First, we&#39;ll pull down his project:</p>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
git clone git@github.com:scrogson/oauth2_example
<span class="pl-s3" style="box-sizing: border-box; color: rgb(0, 134, 179);">cd</span> oauth2_example</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Then we&#39;ll fetch the dependencies:</p>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
mix deps.get</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">We also have to install the npm dependencies for this app:</p>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
npm install</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Now we&#39;ll start the server:</p>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
mix phoenix.server</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">NOTE: You&#39;ll want to set the 2 environment variables:</p>

<ul class="task-list" style="box-sizing: border-box; padding-right: 0px; padding-left: 2em; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">
	<li style="box-sizing: border-box;"><code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">CLIENT_ID</code></li>
	<li style="box-sizing: border-box;"><code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">CLIENT_SECRET</code></li>
</ul>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">I&#39;ve got them set up via direnv.</p>

<h3 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.43; font-size: 1.5em; position: relative; font-weight: bold; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Setup (in the video)</h3>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">In the episode notes, I&#39;ve pulled down the&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">oauth2_example</code>&nbsp;application repo and I&#39;ve got it running. We can see the phoenix app authenticate against github. Visit it:&nbsp;<a href="http://lvh.me:4000/" rel="noreferrer" style="box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;">http://lvh.me:4000/</a></p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">((( do it )))</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">So there we saw this phoenix application auth against github and get my user information. Let&#39;s look at the Phoenix application code necessary to do this. First things first, we&#39;ll look at the configuration. Open up&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">config/config.exs</code>:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
config <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:oauth2</span>,
  <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">strategy:</span> <span class="pl-vo" style="box-sizing: border-box;">OAuth2</span>.<span class="pl-vo" style="box-sizing: border-box;">Strategy</span>.<span class="pl-vo" style="box-sizing: border-box;">AuthCode</span>,
  <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">client_id:</span> <span class="pl-vo" style="box-sizing: border-box;">System</span>.get_env(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>CLIENT_ID<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>),
  <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">client_secret:</span> <span class="pl-vo" style="box-sizing: border-box;">System</span>.get_env(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>CLIENT_SECRET<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>),
  <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">site:</span> <span class="pl-vo" style="box-sizing: border-box;">System</span>.get_env(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>SITE<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">||</span> <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>https://api.github.com<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>,
  <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">authorize_url:</span> <span class="pl-vo" style="box-sizing: border-box;">System</span>.get_env(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>AUTHORIZE_URL<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">||</span> <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>https://github.com/login/oauth/authorize<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>,
  <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">token_url:</span> <span class="pl-vo" style="box-sizing: border-box;">System</span>.get_env(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>TOKEN_URL<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">||</span> <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>https://github.com/login/oauth/access_token<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>,
  <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">redirect_uri:</span> <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>http://lvh.me:4000/auth/callback<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">So here he&#39;s configured his oauth2 application, and specified the AuthCode strategy. We&#39;re getting the CLIENT_ID and CLIENT_SECRET from the system environment. Then he&#39;s specified the site, authorization url, token url, and the redirect uri. These are all the components of an oauth2 integration. The redirect url is where github will redirect the client once they&#39;ve auth&#39;ed there. Let&#39;s have a look at the link out to github to begin authorization, then at the route that github redirects the user back to. Open up&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">web/templates/layout/application.html.eex</code>:</p>

<div class="highlight highlight-html" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
&lt;%= if @current_user do %&gt;
  &lt;<span class="pl-ent" style="box-sizing: border-box; color: rgb(99, 163, 92);">h2</span>&gt;Welcome, &lt;%= @current_user[&quot;name&quot;] %&gt;!&lt;/<span class="pl-ent" style="box-sizing: border-box; color: rgb(99, 163, 92);">h2</span>&gt;
  &lt;<span class="pl-ent" style="box-sizing: border-box; color: rgb(99, 163, 92);">img</span> <span class="pl-e" style="box-sizing: border-box; color: rgb(121, 93, 163);">src</span>=<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>&lt;%= @current_user[<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span><span class="pl-e" style="box-sizing: border-box; color: rgb(121, 93, 163);">avatar</span>_url<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>] %&gt;<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-e" style="box-sizing: border-box; color: rgb(121, 93, 163);">class</span>=<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>img-circle<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>/&gt;
&lt;% else %&gt;
  &lt;<span class="pl-ent" style="box-sizing: border-box; color: rgb(99, 163, 92);">br</span>&gt;
  &lt;<span class="pl-ent" style="box-sizing: border-box; color: rgb(99, 163, 92);">br</span>&gt;

  &lt;<span class="pl-ent" style="box-sizing: border-box; color: rgb(99, 163, 92);">a</span> <span class="pl-e" style="box-sizing: border-box; color: rgb(121, 93, 163);">class</span>=<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>btn btn-primary btn-lg<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-e" style="box-sizing: border-box; color: rgb(121, 93, 163);">href</span>=<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>&lt;%= auth_path @conn, :index %&gt;<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>&gt;
    &lt;<span class="pl-ent" style="box-sizing: border-box; color: rgb(99, 163, 92);">i</span> <span class="pl-e" style="box-sizing: border-box; color: rgb(121, 93, 163);">class</span>=<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>fa fa-github<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>&gt;&lt;/<span class="pl-ent" style="box-sizing: border-box; color: rgb(99, 163, 92);">i</span>&gt;
    Sign in with GitHub
  &lt;/<span class="pl-ent" style="box-sizing: border-box; color: rgb(99, 163, 92);">a</span>&gt;
&lt;% end %&gt;</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Here we can see two things. First off, we see that after authentication, current_user will be set. Secondly, we see that there&#39;s a helper called&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">auth_path</code>&nbsp;that can be used to link out to authenticate with the oauth2 provider. That&#39;s been defined because of this bit in the router:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  scope <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>/auth<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>, <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">alias</span>: <span class="pl-vo" style="box-sizing: border-box;">OAuth2Example</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    pipe_through [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:browser</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:auth</span>]
    get <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>/<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>, <span class="pl-vo" style="box-sizing: border-box;">AuthController</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:index</span>
    get <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>/callback<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>, <span class="pl-vo" style="box-sizing: border-box;">AuthController</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:callback</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">OK, so that&#39;s a link to the AuthController&#39;s index action. Before we go look at that, notice that this scope is piped through the :auth pipeline. That uses a plug that puts in the oauth strategy:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  pipeline <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:auth</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    plug <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:put_oauth_strategy</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  #...</span>

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # Fetch the configured strategy from the router&#39;s config and store the</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  # initialized strategy into `conn.private.oauth2_strategy`.</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defp</span> put_oauth_strategy(conn, _) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    config <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">Application</span>.get_all_env(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:oauth2</span>)
    {strategy, opts} <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">Keyword</span>.pop(config, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:strategy</span>)
    put_private(conn, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:oauth2_strategy</span>, apply(strategy, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:new</span>, [opts]))
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">So here we&#39;re getting the strategy out of the config. You&#39;ll recall that this was the AuthCode strategy. Then we put that onto this connection&#39;s private portion (this is new to me as of this readthrough), in the<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">:oauth2_strategy</code>&nbsp;key. But we don&#39;t really. We apply the&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">new</code>&nbsp;function on that defined module, and we put that in the key. What does that function do? Basically, it returns a map. There&#39;s no time right now to look into the oauth library itself, but soon! Let&#39;s move on to the AuthController&#39;s index action now!</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  <span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">@doc &quot;&quot;&quot;</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  This action is reached via `/auth` and redirects to the OAuth2 provider</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  based on the chosen strategy. The strategy in this example has already</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  been stored in `conn.private.oauth2_strategy` in the router&#39;s pipeline.</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  &quot;&quot;&quot;</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> index(conn, _params) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    redirect conn, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">external:</span> <span class="pl-vo" style="box-sizing: border-box;">AuthCode</span>.authorize_url(strategy(conn), params(conn))
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">OK, so this just redirects to whatever the&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">AuthCode.authorize_url\2</code>&nbsp;function returns when passed the output of our AuthCode strategy. Ultimately, this is just a way to get the authorization url of the OAuth provider based on our configuration. In this case, we configured it to be github&#39;s oauth authorize url earlier, but it also encodes our auth type params - specifically, our desired response type (&quot;code&quot; in this case) and our client id. So now the client gets redirected to github, and does the dance with github to authenticate. Eventually, they get redirected to the url specified in the github application, which was &quot;/auth/callback&quot;. Let&#39;s see what happens there:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  <span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">@doc &quot;&quot;&quot;</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  This action is reached via `/auth/callback` is the the callback URL that</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  the OAuth2 provider will redirect the user back to with a `code` that will</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  be used to request an access token. The access token will then be used to</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  access protected resources on behalf of the user.</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">  &quot;&quot;&quot;</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> callback(conn, %{<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>code<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=&gt;</span> code}) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # Exchange an auth code for an access token</span>
    token <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">AuthCode</span>.get_token!(strategy(conn), code, token_params(params(conn)))

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # Request the user&#39;s data with the access token</span>
    user <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">AccessToken</span>.get!(token, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>/user<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>)

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # Store the user in the session under `:current_user` and redirect to /.</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # In most cases, we&#39;d probably just store the user&#39;s ID that can be used</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # to fetch from the database. In this case, since this example app has no</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # database, I&#39;m just storing the user map.</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    #</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # If you need to make additional resource requests, you may want to store</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # the access token as well.</span>
    conn
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> put_session(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:current_user</span>, user)
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> put_session(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:access_token</span>, token)
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> redirect(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">to:</span> <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>/<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>)
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Alright, so here we&#39;re getting an access token from GitHub based on our auth code. Then we&#39;re using that token to get access to the &quot;/user&quot; endpoint, which returns a bunch of JSON related to the user. This is decoded by Poison, at present, so we end up storing a map in the connection and redirecting to the root url.</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Now the template is rendered again, but there is a current_user in the session. Consequently, we hit the first bit of the template, which we&#39;ll look at again, and lo and behold, our GitHub avatar appears!</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Summary</h2>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">This was the first time I&#39;ve done a code spelunking for an ElixirSip, but I&#39;ve had some requests to focus on the &#39;why&#39; things are done rather than the &#39;how&#39; and I figured this is a pretty reasonable way to talk through why things are done while also seeing the &#39;how&#39; in existing projects. I hope it was enjoyable for you folks, because I love to do this sort of thing. Let me know on Twitter if it was a good thing or a bad thing. See you soon!</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Resources</h2>

<ul class="task-list" style="box-sizing: border-box; padding-right: 0px; padding-left: 2em; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">
	<li style="box-sizing: border-box;"><a href="https://tools.ietf.org/html/rfc6749" rel="noreferrer" style="box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;">The OAuth 2.0 Authorization Framework</a></li>
	<li style="box-sizing: border-box;"><a href="https://github.com/scrogson/oauth2" rel="noreferrer" style="box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;">scrogson/oauth2</a></li>
	<li style="box-sizing: border-box;"><a href="https://github.com/scrogson/oauth2_example" rel="noreferrer" style="box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;">scrogson/oauth2_example</a>&nbsp;- An example of authenticating with GitHub&#39;s OAuth2 provider.</li>
	<li style="box-sizing: border-box;"><a href="http://direnv.net/" rel="noreferrer" style="box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;">direnv</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=48969">155_OAuth2_Code_Spelunking.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=48970">155_OAuth2_Code_Spelunking.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-da1d5954df47faa609204c615518928791d5da26</guid>
      <pubDate>Thu, 09 Apr 2015 21:43:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/48970/155_OAuth2_Code_Spelunking.mp4" length="25653253" type="video/mp4"/>
      <itunes:subtitle>A dig through Sonny Scroggins' example of integrating a Phoenix application with GitHub via his OAuth2 package.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[154 - inet]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=733</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><h1 style="box-sizing: border-box; font-size: 2.25em; margin-right: 0px; margin-bottom: 16px; margin-left: 0px; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; margin-top: 0px !important;">Episode 154: inet</h1>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Welcome to ErlangSips Episode 154. Erlang comes with the&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">inet</code>&nbsp;module in its&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">kernel</code>&nbsp;application. This module gives you access to TCP/IP protocols. I just wanted to look at it a bit and see what we could do. Let&#39;s get started.</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Project</h2>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">We&#39;ll just explore this from iex:</p>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
erl</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">OK, so one of the first things I used this module for was resolving a DNS entry:</p>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">6&gt; inet:getaddr(&quot;isotope11.com&quot;, inet).
{ok,{104,239,144,69}}
</code></pre>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Here we can see a nice tuple showing the IP address that isotope11.com resolves to. Of course, we had to specify IPV4 (that&#39;s what that inet atom above is about). What if we wanted a simpler way to get information about a hostname? That&#39;s what&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">gethostbyname</code>&nbsp;is for:</p>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">12&gt; rr(&quot;/home/jadams/erlang/erlangs/17.4/lib/kernel-3.1/include/inet.hrl&quot;).
[hostent]
13&gt; {ok, Ent=#hostent{}} = inet:gethostbyname(&quot;isotope11.com&quot;).
{ok,#hostent{h_name = &quot;isotope11.com&quot;,h_aliases = [],
             h_addrtype = inet,h_length = 4,
             h_addr_list = [{104,239,144,69}]}}
14&gt; Ent#hostent.h_name.
&quot;isotope11.com&quot;
</code></pre>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">OK, so that&#39;s how we can get a hostent record for a given domain name. We can also, if it&#39;s configured correctly, get a host by address. Here&#39;s elixir-lang.org&#39;s IP:</p>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">15&gt; inet:gethostbyaddr({192,30,252,154}).
{ok,#hostent{h_name = &quot;pages.github.com&quot;,h_aliases = [],
             h_addrtype = inet,h_length = 4,
             h_addr_list = [{192,30,252,154}]}}
</code></pre>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Using this module, you can also get the local network interfaces trivially:</p>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">16&gt; inet:getifaddrs().
{ok,[{&quot;lo&quot;,
      [{flags,[up,loopback,running]},
       {hwaddr,[0,0,0,0,0,0]},
       {addr,{127,0,0,1}},
       {netmask,{255,0,0,0}},
       {addr,{0,0,0,0,0,0,0,1}},
       {netmask,{65535,65535,65535,65535,65535,65535,65535,
                 65535}}]},
     {&quot;eth0&quot;,
      [{flags,[up,broadcast,running,multicast]},
       {hwaddr,&quot;&frac14;&reg;&Aring;4&Ocirc;&Ograve;&quot;},
       {addr,{192,168,1,85}},
       {netmask,{255,255,255,0}},
       {broadaddr,{192,168,1,255}},
       {addr,{192,168,1,136}},
       {netmask,{255,255,255,0}},
       {broadaddr,{192,168,1,255}},
       {addr,{65152,0,0,0,48814,50687,65076,54482}},
       {netmask,{65535,65535,65535,65535,0,0,0,0}}]},
     {&quot;virbr0&quot;,
      [{flags,[up,broadcast,running,multicast]},
       {hwaddr,[98,93,119,129,202,255]},
       {addr,{192,168,122,1}},
       {netmask,{255,255,255,0}},
       {broadaddr,{192,168,122,255}}]},
     {&quot;docker0&quot;,
      [{flags,[up,broadcast,running,multicast]},
       {hwaddr,[86,132,122,254,151,153]},
       {addr,{172,17,42,1}},
       {netmask,{255,255,0,0}},
       {broadaddr,{172,17,42,1}}]},
     {&quot;vboxnet0&quot;,
      [{flags,[broadcast,multicast]},{hwaddr,[10,0,39,0,0,0]}]},
     {&quot;cscotun0&quot;,
      [{flags,[up,pointtopoint,running,multicast]},
       {addr,{172,16,50,102}},
       {netmask,{255,255,255,0}},
       {dstaddr,{172,16,50,255}},
       {addr,{65152,0,0,0,32758,13055,51697,17029}},
       {netmask,{65535,65535,65535,65535,65535,65535,65535,
                 65535}}]}]}
</code></pre>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">You could also use this module to parse IP addresses:</p>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">17&gt; inet:parse_ipv4_address(&quot;127.0.0.1&quot;).
{ok,{127,0,0,1}}
18&gt; inet:parse_ipv4_address(&quot;127.0.0.256&quot;).
{error,einval}
</code></pre>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Of course it knows about IPv6 as well:</p>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">19&gt; inet:gethostbyname(&quot;google.com&quot;, inet6).
{ok,#hostent{h_name = &quot;google.com&quot;,h_aliases = [],
             h_addrtype = inet6,h_length = 16,
             h_addr_list = [{9735,63664,16385,3086,0,0,0,102}]}}
20&gt; inet:parse_address(&quot;2001:4860:4860::8888&quot;).
{ok,{8193,18528,18528,0,0,0,0,34952}}
</code></pre>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Summary</h2>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">There&#39;s a lot more interesting stuff you can do in this module, but it all depends on having a socket to work with. Thanks for watching this year&#39;s ErlangSips. See you soon!</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Release Date: 2015-04-01</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Resources</h2>

<ul class="task-list" style="box-sizing: border-box; padding-right: 0px; padding-left: 2em; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">
	<li style="box-sizing: border-box;"><a href="http://www.erlang.org/doc/man/inet.html" rel="noreferrer" style="box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;">inet manual</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=48507">154_inet.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=48508">154_inet.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-537587b7f62ed37c257b004087f8f868a78de9cd</guid>
      <pubDate>Wed, 01 Apr 2015 18:55:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/48507/154_inet.mp4" length="11975626" type="video/mp4"/>
      <itunes:subtitle>Basic TCP/IP interactions built into Erlang's kernel application for you.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[153 - Phoenix APIs and CORS]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=732</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><h1 style="box-sizing: border-box; font-size: 2.25em; margin-right: 0px; margin-bottom: 16px; margin-left: 0px; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; margin-top: 0px !important;">Episode 153: Phoenix APIs and CORS</h1>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">A friend and co-worker was asking me about how to handle CORS from Phoenix today, so I figured it would be worthwhile to spin up a quick Phoenix API that we could fix CORS issues on to see what we ought to do.</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Project</h2>

<h3 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.43; font-size: 1.5em; position: relative; font-weight: bold; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Project Setup (not on video)</h3>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">From the phoenix dir, after checking out 0.10, I issue the following:</p>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
mix phoenix.new ../cors_test
<span class="pl-s3" style="box-sizing: border-box; color: rgb(0, 134, 179);">cd</span> ../cors_test
mix phoenix.server</pre>
</div>

<h3 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.43; font-size: 1.5em; position: relative; font-weight: bold; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Project work</h3>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">So we&#39;ve got a barebones new phoenix app in place as a starting point. Let&#39;s add a basic API to it:</p>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
mix phoenix.gen.resource Widget widgets name:string</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">That generates a CRUD resource for widgets. Now If you visit http://localhost:4000/widgets you&#39;ll see that it&#39;s trying to talk to ecto but we don&#39;t have a database created. This is easy to resolve.</p>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
mix ecto.create
mix ecto.migrate</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Now if you visit http://localhost:4000/widgets you&#39;ll see some CRUD. Let&#39;s create a new one:</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">((( do it )))</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Now open up the router and let&#39;s add an API scope:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  scope <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>/api<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>, <span class="pl-vo" style="box-sizing: border-box;">CorsTest</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    pipe_through <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:api</span>

    resources <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>/widgets<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>, <span class="pl-vo" style="box-sizing: border-box;">WidgetController</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">only:</span> [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:index</span>]
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Now we need to modify the WidgetController and the View so that we can respond to this API call. We&#39;ll handle the controller first:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> index(conn, _params) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    widgets <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">Repo</span>.all(<span class="pl-vo" style="box-sizing: border-box;">Widget</span>)
    render conn, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">widgets:</span> widgets
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Here we&#39;ve just switched to using the 2-arity version of render. Now we need to specify how to render the json version of this action in our view:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defmodule</span> <span class="pl-en" style="box-sizing: border-box; color: rgb(121, 93, 163);">CorsTest.WidgetView</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">use</span> <span class="pl-vo" style="box-sizing: border-box;">CorsTest</span>.<span class="pl-vo" style="box-sizing: border-box;">Web</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:view</span>

  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> render(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>index.json<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>, %{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">widgets:</span> widgets}) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    widgets
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Nothing big here - we&#39;re just pattern matching on the widgets and returning them. The default serialization will kick in here. At this point our API is usable - let&#39;s have a look at it:</p>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">[jadams:~] $ curl -H&quot;Accept: application/json&quot; http://localhost:4000/api/widgets
[{&quot;updated_at&quot;:&quot;2015-04-01T00:27:02Z&quot;,&quot;name&quot;:&quot;stest&quot;,&quot;inserted_at&quot;:&quot;2015-04-01T00:21:04Z&quot;,&quot;id&quot;:3,&quot;__meta__&quot;:{&quot;state&quot;:&quot;loaded&quot;,&quot;source&quot;:&quot;widgets&quot;}}]
</code></pre>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">So here we have a list of widgets. You can see we get some meta information as well. If we want to have tighter control over our serialization, we can. We would just implement an encoder for our widgets. We&#39;ll just do that in the Widget model:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defimpl</span> <span class="pl-vo" style="box-sizing: border-box;">Poison</span>.<span class="pl-vo" style="box-sizing: border-box;">Encoder</span>, <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">for</span>: <span class="pl-vo" style="box-sizing: border-box;">CorsTest</span>.<span class="pl-vo" style="box-sizing: border-box;">Widget</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> encode(widget, _options) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    %{
      <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">name:</span> widget.name
    } <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> <span class="pl-vo" style="box-sizing: border-box;">Poison</span>.<span class="pl-vo" style="box-sizing: border-box;">Encoder</span>.encode([])
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Now our serialization is under our control:</p>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">[jadams:~] $ curl -H&quot;Accept: application/json&quot; http://localhost:4000/api/widgets
[{&quot;name&quot;:&quot;stest&quot;}]
</code></pre>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Now we&#39;d like to make a CORS-friendly request to this API. Rather than build out some frontend, we&#39;ll try it straight from the browser.</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">((( open up&nbsp;<a href="http://api.jquery.com/jquery.get/" rel="noreferrer" style="box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;">http://api.jquery.com/jquery.get/</a>&nbsp;just to get some jquery sadness on ))) ((( do this from the console )))</p>

<div class="highlight highlight-javascript" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
$.get(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>http://localhost:4000/api/widgets<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>).then(<span class="pl-st" style="box-sizing: border-box; color: rgb(167, 29, 93);">function</span>(<span class="pl-vpf" style="box-sizing: border-box;">val</span>){ <span class="pl-en" style="box-sizing: border-box; color: rgb(121, 93, 163);">console</span><span class="pl-s3" style="box-sizing: border-box; color: rgb(0, 134, 179);">.log</span>(val);})</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">So in the console here, we can see that we&#39;re rejected due to CORS. If you don&#39;t know what CORS is, I&#39;ve linked to the Wikipedia page in the resources. Basically, it is a means for browsers to safely determine whether resources should be loaded from a domain different than the browser&#39;s current domain. The remote server can specify which domains are allowed. If it responds with an asterisk, they&#39;re all allowed. Let&#39;s make our server do that. Open the controller:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> index(conn, _params) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    widgets <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">Repo</span>.all(<span class="pl-vo" style="box-sizing: border-box;">Widget</span>)
    render allow_cors(conn), <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">widgets:</span> widgets
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defp</span> allow_cors(conn) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    put_resp_header(conn, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>Access-Control-Allow-Origin<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>*<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>)
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">OK, so now let&#39;s try it from the browser again...and it works! Obviously you could wrap this in a plug that adds this header, and in fact there&#39;s a configurable one out there called&nbsp;<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">cors_plug</code>&nbsp;that I&#39;ve referenced in the resources. I haven&#39;t used it, but it looks very reasonable, and more full-featured than this quickie hack.</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Summary</h2>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">In today&#39;s episode, we looked at building a quick API with the latest Phoenix release, and we saw how to make sure that CORS requests can work with it. This is important if you serve your frontend from a separate domain than your backend, which is something that I highly recommend. Anyway, hope you enjoyed it. See you soon.</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Resources</h2>

<ul class="task-list" style="box-sizing: border-box; padding-right: 0px; padding-left: 2em; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">
	<li style="box-sizing: border-box;"><a href="http://en.wikipedia.org/wiki/Cross-origin_resource_sharing" rel="noreferrer" style="box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;">CORS</a></li>
	<li style="box-sizing: border-box;"><a href="https://gist.github.com/rubysolo/41186c7e56cd70af579b" rel="noreferrer" style="box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;">CORS with Phoenix gist</a></li>
	<li style="box-sizing: border-box;"><a href="https://github.com/mschae/cors_plug" rel="noreferrer" style="box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;"><code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">mschae/cors_plug</code></a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=48470">153_Phoenix_APIs_and_CORS.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=48471">153_Phoenix_APIs_and_CORS.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-c66db07a4b4754fb5c48623fcff2eaa9f7b69e3a</guid>
      <pubDate>Tue, 31 Mar 2015 21:29:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/48470/153_Phoenix_APIs_and_CORS.mp4" length="49100750" type="video/mp4"/>
      <itunes:subtitle>Building a basic API with Phoenix, and allowing remote domains to access it from the browser.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[152 - erlang_js]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=730</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><h1>Episode 152: <code>erlang_js</code></h1>

<p>To increase approachability for the Riak database, Basho wanted to provide a means to build various bits of client functionality in javascript. To enable this, they built a library called <code>erlang_js</code> that makes interacting with a SpiderMonkey interpreter pretty trivial. Let&#39;s look at how you could use it.</p>

<h2>Project</h2>

<h3>Setup (not on the video)</h3>

<div class="highlight highlight-sh">
<pre>
mix new js_playground
<span class="pl-s3">cd</span> js_playground
vim mix.exs</pre>
</div>

<div class="highlight highlight-elixir">
<pre>
  <span class="pl-k">defp</span> deps <span class="pl-k">do</span>
    [
      {<span class="pl-c1">:erlang_js</span>, <span class="pl-c1">github:</span> <span class="pl-s1"><span class="pl-pds">&quot;</span>basho/erlang_js<span class="pl-pds">&quot;</span></span>}
    ]
  <span class="pl-k">end</span></pre>
</div>

<div class="highlight highlight-sh">
<pre>
mix deps.get</pre>
</div>

<h3>Playing</h3>

<p>Now we&#39;re just going to open up the tests and play around with this library. Open up <code>test/js_playground_test.exs</code>:</p>

<div class="highlight highlight-elixir">
<pre>
  test <span class="pl-s1"><span class="pl-pds">&quot;</span>getting data out of the JavaScript interpreter<span class="pl-pds">&quot;</span></span> <span class="pl-k">do</span>
<span class="pl-c">    # First, we start this app and its dependencies</span>
    <span class="pl-c1">:application</span>.ensure_all_started(<span class="pl-c1">:erlang_js</span>)
<span class="pl-c">    # Next, we make a new instance of SpiderMonkey</span>
    {<span class="pl-c1">:ok</span>, js} <span class="pl-k">=</span> <span class="pl-c1">:js_driver</span>.new
<span class="pl-c">    # Next, we define a variable in it that is wrapping a function</span>
    <span class="pl-c1">:ok</span> <span class="pl-k">=</span> <span class="pl-c1">:js</span>.define(js, <span class="pl-s1"><span class="pl-pds">&quot;</span>var addOne = function(n) { return n+1; };<span class="pl-pds">&quot;</span></span>)
<span class="pl-c">    # Finally, we call the function with an erlang data type, and we get back an</span>
<span class="pl-c">    # erlang data type out of it</span>
    assert {<span class="pl-c1">:ok</span>, <span class="pl-c1">3</span>} <span class="pl-k">==</span> <span class="pl-c1">:js</span>.call(js, <span class="pl-s1"><span class="pl-pds">&quot;</span>addOne<span class="pl-pds">&quot;</span></span>, [<span class="pl-c1">2</span>])
  <span class="pl-k">end</span></pre>
</div>

<p>This is the core of the library - you really can just do anything javascripty that you want from here. A good follow-up is reading through HashNuke&#39;s coffeescript rotor. Let&#39;s have a look:</p>

<p>((( open up <a href="https://github.com/HashNuke/coffee_rotor/blob/master/lib/coffee_rotor.ex" rel="noreferrer">https://github.com/HashNuke/coffee_rotor/blob/master/lib/coffee_rotor.ex</a> )))</p>

<p>Here we can see that he just loads in coffeescript, then maps a list of files through the javascript coffeescript compiler. I love the simplicity of this, and the fact that it really does feel like using complicated javascript libraries just isn&#39;t a hassle.</p>

<h2>Summary</h2>

<p>I just wanted to show this off. It&#39;s been on my list for at least 6 months but it never bubbled to the top. There&#39;s been a lot of talk about Elixir and JavaScript interoperability on the Mailing List in the past few weeks, so I figured it was time. See you soon!</p>

<h2>Resources</h2>

<ul class="task-list">
	<li><a href="https://github.com/basho/erlang_js" rel="noreferrer"><code>basho/erlang_js</code></a></li>
	<li><a href="https://github.com/HashNuke/coffee_rotor" rel="noreferrer"><code>HashNuke/coffee_rotor</code></a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=48267">152_erlang_js.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=48268">152_erlang_js.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-e03c6c229e258d43db66ba923630a788e8e77fd8</guid>
      <pubDate>Sat, 28 Mar 2015 15:57:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/48267/152_erlang_js.mp4" length="11272311" type="video/mp4"/>
      <itunes:subtitle>Evaluating javascript on a SpiderMonkey interpreter and getting back Erlang terms.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[151 - System Information]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=729</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><h1>Episode 151: System Information</h1>

<p>The Erlang VM has a lot of interesting features at its disposal that we haven&#39;t looked at in detail. I just went through the Erlang Solutions training for Advanced Erlang, and I took a few notes about things that I thought were interesting. Let&#39;s have a look:</p>

<h2>Project</h2>

<p>We&#39;ll open up the shell. The first thing I wanted to show off was the <code>process_info/1</code> function:</p>

<div class="highlight highlight-elixir">
<pre>
<span class="pl-c1">:erlang</span>.process_info(<span class="pl-c1">:erlang</span>.whereis(<span class="pl-c1">:error_logger</span>))</pre>
</div>

<pre>
<code>[registered_name: :error_logger, current_function: {:gen_event, :fetch_msg, 5},
 initial_call: {:proc_lib, :init_p, 5}, status: :waiting, message_queue_len: 0,
 messages: [], links: [#PID&lt;0.25.0&gt;, #PID&lt;0.52.0&gt;, #PID&lt;0.0.0&gt;],
 dictionary: [&quot;$ancestors&quot;: [#PID&lt;0.2.0&gt;],
  &quot;$initial_call&quot;: {:gen_event, :init_it, 6}], trap_exit: true,
 error_handler: :error_handler, priority: :normal, group_leader: #PID&lt;0.25.0&gt;,
 total_heap_size: 1363, heap_size: 987, stack_size: 8, reductions: 467,
 garbage_collection: [min_bin_vheap_size: 46422, min_heap_size: 233,
  fullsweep_after: 65535, minor_gcs: 6], suspending: []]
</code></pre>

<p>Now, by default this returns all of the messages on the message queue. If the number of messages is large, this will be terrible. Consequently, there&#39;s the 2-arity version of this function, where you can specify options. One of those is <code>message_queue_len</code> so you can see the size of the message queue for that process withuot reading them all out.:</p>

<div class="highlight highlight-elixir">
<pre>
<span class="pl-c1">:erlang</span>.process_info(<span class="pl-c1">:erlang</span>.whereis(<span class="pl-c1">:error_logger</span>), [<span class="pl-c1">:message_queue_len</span>])</pre>
</div>

<pre>
<code>[message_queue_len: 0]
</code></pre>

<p>You can also see all registered processes. Right now this is on the <code>c</code> module but I&#39;ve got a patch in to add this to IEx&#39;s Helpers directly, with some mild ANSI coloring:</p>

<div class="highlight highlight-elixir">
<pre>
<span class="pl-c1">:c</span>.regs()</pre>
</div>

<p>You can find out information on all the processes in the system with <code>i</code>. I&#39;ve also got a patch out for adding this to IEx Helpers:</p>

<div class="highlight highlight-elixir">
<pre>
<span class="pl-c1">:c</span>.i()</pre>
</div>

<p>Here if we scroll up to the header, you can see that for each process, we can see how it was started, what it&#39;s doing now, how big its heap and stack are, how many reductions it has gone through, how many messages are in the queue, and what its registered name is if it has one.</p>

<p>You can also use process flags to trap information about the last calls a given process handled:</p>

<div class="highlight highlight-elixir">
<pre>
pid <span class="pl-k">=</span> self
<span class="pl-c1">:erlang</span>.process_flag(<span class="pl-c1">:save_calls</span>, <span class="pl-c1">30</span>)
integer <span class="pl-k">=</span> <span class="pl-c1">1234</span>
string <span class="pl-k">=</span> <span class="pl-s1"><span class="pl-pds">&quot;</span>hey<span class="pl-pds">&quot;</span></span>
<span class="pl-c1">:erlang</span>.process_info(pid, <span class="pl-c1">:last_calls</span>)</pre>
</div>

<p>It&#39;s not so easy to actually interpret this information on the shell process, but it&#39;s good to know it&#39;s possible to do this.</p>

<p>You can show a backtrace of what the process is doing currently:</p>

<div class="highlight highlight-elixir">
<pre>
<span class="pl-c1">:erlang</span>.process_display(self, <span class="pl-c1">:backtrace</span>)</pre>
</div>

<p>You can also suspend and resume processes. Here we&#39;ll make a process that counts to 20, waiting 5 seconds between numbers.</p>

<div class="highlight highlight-elixir">
<pre>
pid <span class="pl-k">=</span> spawn(<span class="pl-k">fn</span>() <span class="pl-k">-</span><span class="pl-k">&gt;</span> <span class="pl-vo">Enum</span>.map(<span class="pl-c1">1</span><span class="pl-k">..</span><span class="pl-c1">20</span>, <span class="pl-k">fn</span>(i) <span class="pl-k">-</span><span class="pl-k">&gt;</span> <span class="pl-vo">IO</span>.puts <span class="pl-s1"><span class="pl-pds">&quot;</span>We&#39;re at <span class="pl-s2"><span class="pl-pse">#{</span>i<span class="pl-pse">}</span></span>!<span class="pl-pds">&quot;</span></span>; <span class="pl-c1">:timer</span>.sleep(<span class="pl-c1">5000</span>) <span class="pl-k">end</span>) <span class="pl-k">end</span>)</pre>
</div>

<p>Now we can suspend it:</p>

<div class="highlight highlight-elixir">
<pre>
<span class="pl-c1">:erlang</span>.suspend_process(pid)</pre>
</div>

<p>And it&#39;ll do nothing. We can wait as long as we want here. While we&#39;re at it, let&#39;s explore a little bit. Recall that we can use <code>:c.i</code> to get process information. Let&#39;s look at our pid and then find it in the output:</p>

<div class="highlight highlight-elixir">
<pre>
pid
<span class="pl-c1">:c</span>.i</pre>
</div>

<p>It&#39;s at the bottom there. So I was curious whether a suspended process can receive messages into its mailbox - it seemed like it could, but I don&#39;t have to guess:</p>

<div class="highlight highlight-elixir">
<pre>
send(pid, <span class="pl-c1">:foo</span>)
<span class="pl-c1">:c</span>.i</pre>
</div>

<p>And there we can see it has a message waiting for it (that it will never try to read). Now we can resume the process:</p>

<div class="highlight highlight-elixir">
<pre>
<span class="pl-c1">:erlang</span>.resume_process(pid)</pre>
</div>

<p>And all is well.</p>

<h2>Summary</h2>

<p>Anyway, today I just wanted to show off some of the more interesting &quot;system information&quot;-related things you can do inside of a running erlang system. See you soon!</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=48263">151_system_information.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=48264">151_system_information.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-9424815bed16a09dc9cff6261233a9cef58b64cc</guid>
      <pubDate>Sat, 28 Mar 2015 15:16:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/48263/151_system_information.mp4" length="35205887" type="video/mp4"/>
      <itunes:subtitle>Exploring a running Erlang system using tools from the shell.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[150 - JInterface]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=720</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><h1 style="box-sizing: border-box; font-size: 2.25em; margin-right: 0px; margin-bottom: 16px; margin-left: 0px; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; margin-top: 0px !important;">Episode 150: JInterface</h1>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">JInterface is a Java library that ships with the Erlang standard release. It can be used to allow Java processes to communicate with Erlang processes, or for Java to Java interprocess communication, or for Java to C interprocess communication. Today we&#39;re going to use it to communicate from a Java process to an Elixir process. Let&#39;s get started.</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Project</h2>

<h3 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.43; font-size: 1.5em; position: relative; font-weight: bold; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Starting a new project (not in the video)</h3>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">We&#39;ll kick off a new project for this:</p>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
mix new jinterface_playground --sup
<span class="pl-s3" style="box-sizing: border-box; color: rgb(0, 134, 179);">cd</span> jinterface_playground</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Next we&#39;re adding a requirement on ExActor:</p>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
vim mix.exs</pre>
</div>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defp</span> deps <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
  [
    {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:exactor</span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>2.0.1<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>}
  ]
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
mix deps.get
vim lib/calculator_server.ex</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Here&#39;s the calculator server from the wx calc episodes, with a slight modification for changes to ExActor</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defmodule</span> <span class="pl-en" style="box-sizing: border-box; color: rgb(121, 93, 163);">CalculatorServer</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">use</span> <span class="pl-vo" style="box-sizing: border-box;">ExActor</span>.<span class="pl-vo" style="box-sizing: border-box;">GenServer</span>

  defstart start_link, <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>: initial_state(%{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">display:</span> <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>0<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">numbers:</span> [], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">value:</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">current_operation:</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:noop</span>})

  defcall get_display, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">state:</span> state, <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>: reply(state.display)

  defcast number(num), <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">state:</span> state <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    new_numbers <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> state.numbers <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">++</span> [num]
    new_state(%{state <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">numbers:</span> new_numbers, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">display:</span> <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.join(new_numbers)})
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

  defcast add, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">state:</span> state <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    update_state(state, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:addition</span>) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> new_state
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

  defcast subtract, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">state:</span> state <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    update_state(state, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:subtraction</span>) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> new_state
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

  defcast multiply, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">state:</span> state <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    update_state(state, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:multiplication</span>) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> new_state
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

  defcast divide, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">state:</span> state <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    update_state(state, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:division</span>) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> new_state
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

  defcast equals, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">state:</span> state <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    update_state(state, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:noop</span>) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> new_state
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> update_state(state, new_operation) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    entered_number <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> get_entered_number(state.numbers)
    new_value <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> get_new_value(state.value, entered_number, state.current_operation)
    new_display <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span><span class="pl-s2" style="box-sizing: border-box; color: rgb(51, 51, 51);"><span class="pl-pse" style="box-sizing: border-box;">#{</span>new_value<span class="pl-pse" style="box-sizing: border-box;">}</span></span><span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>
    %{state <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">numbers:</span> [], <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">display:</span> new_display, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">value:</span> new_value, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">current_operation:</span> new_operation}
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> get_entered_number(numbers) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    {entered_number, _rest} <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> numbers <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.join <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">|</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> <span class="pl-vo" style="box-sizing: border-box;">Integer</span>.parse
    entered_number
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> get_new_value(current_value, number, operation) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">case</span> operation <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
      <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:noop</span>     <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> number
      <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:addition</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> current_value <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">+</span> number
      <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:subtraction</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> current_value <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span> number
      <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:multiplication</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> current_value <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">*</span> number
      <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:division</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> current_value <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">/</span> number
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Finally, we&#39;ll start one of these and register it when our app starts. This is not supervised, and it&#39;s not how you ought to do this, but we&#39;re just playing a bit here right now. Open up<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">lib/jinterface_playground.ex</code></p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
    {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:ok</span>, pid} <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">CalculatorServer</span>.start_link
    <span class="pl-vo" style="box-sizing: border-box;">Process</span>.register(pid, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:calc</span>)</pre>
</div>

<h3 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.43; font-size: 1.5em; position: relative; font-weight: bold; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">With existing project (in the video)</h3>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">I&#39;ve already started a project. I&#39;m depending on ExActor in the project, but other than that there are no real dependencies since JInterface is in the standard release. We&#39;re going to reuse the calculator server from WxCalc, and then we&#39;ll use it from Java to show how JInterface works. First let&#39;s see the GenServer in action:</p>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
iex -S mix</pre>
</div>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">iex(1)&gt; CalculatorServer.number(:calc, 4)
:ok
iex(2)&gt; CalculatorServer.add(:calc)
:ok
iex(3)&gt; CalculatorServer.number(:calc, 4)
:ok
iex(4)&gt; CalculatorServer.equals(:calc)
:ok
iex(5)&gt; CalculatorServer.get_display(:calc)
&quot;8&quot;
</code></pre>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">So here we can see that we&#39;ve got a globally registered process for our calculator server. This is nothing new. Now we&#39;ll start a new Java project. God help us.</p>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
mvn -B archetype:generate \
  -DarchetypeGroupId=org.apache.maven.archetypes \
  -DgroupId=com.elixirsips.jinterface \
  -DartifactId=jinterface-java

<span class="pl-s3" style="box-sizing: border-box; color: rgb(0, 134, 179);">cd</span> jinterface-java</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Now we&#39;ll add jinterface to the java project via the mvn repository. Open up pom.xml:</p>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">    &lt;dependency&gt;
      &lt;groupId&gt;org.erlang.otp&lt;/groupId&gt;
      &lt;artifactId&gt;jinterface&lt;/artifactId&gt;
      &lt;version&gt;1.5.6&lt;/version&gt;
    &lt;/dependency&gt;
</code></pre>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">We&#39;ll download the dependency when we compile the project. Get it:</p>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
mvn compile</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Alright, so now we have JInterface in place. We&#39;re going to build an executable JAR for this, for ease. This means we need to pull in the &quot;Apache Maven Shade&quot; plugin. Open up the pom again, and I&#39;m going to paste this in because XML of this nature was never meant to be written by hand, geez.</p>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;
xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0
http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;
  ...
  &lt;build&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt;
        &lt;version&gt;2.3&lt;/version&gt;
        &lt;executions&gt;
          &lt;execution&gt;
            &lt;phase&gt;package&lt;/phase&gt;
            &lt;goals&gt;
              &lt;goal&gt;shade&lt;/goal&gt;
            &lt;/goals&gt;
            &lt;configuration&gt;
              &lt;transformers&gt;
                &lt;transformer implementation=&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;&gt;
                  &lt;mainClass&gt;com.elixirsips.jinterface.App&lt;/mainClass&gt;
                &lt;/transformer&gt;
              &lt;/transformers&gt;
            &lt;/configuration&gt;
          &lt;/execution&gt;
        &lt;/executions&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
&lt;/project&gt;
</code></pre>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">So here all we&#39;re saying is that our main entry point for the application is our App class. The maven archetype provided that class for us. Let&#39;s look at it, then see how our build process is doing.</p>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
vim src/main/java/com/elixirsips/jinterface/App.java</pre>
</div>

<div class="highlight highlight-java" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">package</span> <span class="pl-smp" style="box-sizing: border-box;">com.elixirsips.jinterface</span>;

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">/**</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);"> * Hello world!</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);"> *</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);"> */</span>
<span class="pl-s" style="box-sizing: border-box; color: rgb(167, 29, 93);">public</span> <span class="pl-s" style="box-sizing: border-box; color: rgb(167, 29, 93);">class</span> <span class="pl-en" style="box-sizing: border-box; color: rgb(121, 93, 163);">App</span>
{
    <span class="pl-s" style="box-sizing: border-box; color: rgb(167, 29, 93);">public</span> <span class="pl-s" style="box-sizing: border-box; color: rgb(167, 29, 93);">static</span> <span class="pl-st" style="box-sizing: border-box; color: rgb(167, 29, 93);">void</span> <span class="pl-en" style="box-sizing: border-box; color: rgb(121, 93, 163);">main</span>( <span class="pl-st" style="box-sizing: border-box; color: rgb(167, 29, 93);">String</span>[] <span class="pl-v" style="box-sizing: border-box; color: rgb(29, 62, 129);">args</span> )
    {
        <span class="pl-stj" style="box-sizing: border-box;">System</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">.</span>out<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">.</span>println( <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>Hello World!<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> );
    }
}</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">OK, so if we package and try to run the app, we should print to standard out. Let&#39;s try it:</p>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
mvn package
java -jar target/jinterface-java-1.0-SNAPSHOT.jar
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);"># Hello World!</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Alright, so we have a CLI java app ready for us to do stuff in it. That&#39;s a good start. Now the way JInterface works is to act like an Erlang node communicating on the network. So what we&#39;re going to want to do is conceptually simple:</p>

<ul class="task-list" style="box-sizing: border-box; padding-right: 0px; padding-left: 2em; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">
	<li style="box-sizing: border-box;">Create an OtpNode with a name</li>
	<li style="box-sizing: border-box;">Create a mailbox on that node</li>
	<li style="box-sizing: border-box;">Construct a message to send to our calc server</li>
	<li style="box-sizing: border-box;">Send the message via that mailbox</li>
</ul>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">We&#39;ll start out by creating the OtpNode. This is easy enough:</p>

<div class="highlight highlight-java" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">package</span> <span class="pl-smp" style="box-sizing: border-box;">com.elixirsips.jinterface</span>;

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">// I don&#39;t want to deal with imports, so we&#39;ll import everything...</span>
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">import</span> <span class="pl-smi" style="box-sizing: border-box;">com.ericsson.otp.erlang.*</span>;

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">/**</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);"> * Hello world!</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);"> *</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);"> */</span>
<span class="pl-s" style="box-sizing: border-box; color: rgb(167, 29, 93);">public</span> <span class="pl-s" style="box-sizing: border-box; color: rgb(167, 29, 93);">class</span> <span class="pl-en" style="box-sizing: border-box; color: rgb(121, 93, 163);">App</span>
{
  <span class="pl-s" style="box-sizing: border-box; color: rgb(167, 29, 93);">public</span> <span class="pl-s" style="box-sizing: border-box; color: rgb(167, 29, 93);">static</span> <span class="pl-st" style="box-sizing: border-box; color: rgb(167, 29, 93);">void</span> <span class="pl-en" style="box-sizing: border-box; color: rgb(121, 93, 163);">main</span>( <span class="pl-st" style="box-sizing: border-box; color: rgb(167, 29, 93);">String</span>[] <span class="pl-v" style="box-sizing: border-box; color: rgb(29, 62, 129);">args</span> )
  {
    <span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">// Let&#39;s write out our pseudocode for now</span>
    <span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">// - Create an OtpNode with a name and a cookie</span>
    <span class="pl-stj" style="box-sizing: border-box;">OtpNode</span> node <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">new</span> <span class="pl-stj" style="box-sizing: border-box;">OtpNode</span>(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>javaland<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>test<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>);
    <span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">// - Create a mailbox on that node</span>
    <span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">// - Construct a message to send to our calc server</span>
    <span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">// - Send the message via that mailbox</span>
    <span class="pl-stj" style="box-sizing: border-box;">System</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">.</span>out<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">.</span>println( <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>Hello World!<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> );
  }
}</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">That&#39;s easy enough. Turns out JInterface is pretty nice. Next, we&#39;ll create the mailbox:</p>

<div class="highlight highlight-java" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
    <span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">// - Create a mailbox on that node</span>
    <span class="pl-stj" style="box-sizing: border-box;">OtpMbox</span> mbox <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> node<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">.</span>createMbox(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>javambox<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>);</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Next we need to construct a message to send. Now, here&#39;s where some relatively-arcane knowledge comes in. Let&#39;s pop open an iex session again and I&#39;ll show you what you&#39;re actually sending when you use GenServer.cast:</p>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">
iex(4)&gt; message = {:&quot;$gen_cast&quot;, {:number, 3}}
{:&quot;$gen_cast&quot;, {:number, 3}}
iex(5)&gt; send(:calc, message)
{:&quot;$gen_cast&quot;, {:number, 3}}
iex(6)&gt; CalculatorServer.get_display(:calc)
&quot;3&quot;
iex(7)&gt; send(:calc, message)
{:&quot;$gen_cast&quot;, {:number, 3}}
iex(8)&gt; CalculatorServer.get_display(:calc)
&quot;33&quot;
iex(9)&gt; send(:calc, message)
{:&quot;$gen_cast&quot;, {:number, 3}}
iex(10)&gt; CalculatorServer.get_display(:calc)
&quot;333&quot;
</code></pre>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">So here you can see that we&#39;re sending the actual erlang message that a gen cast consists of behind the scenes. Next we&#39;re going to have our JInterface program do this instead of doing it from Elixir:</p>

<div class="highlight highlight-java" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
    <span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">// - Construct a message to send to our calc server</span>
    <span class="pl-st" style="box-sizing: border-box; color: rgb(167, 29, 93);">OtpErlangObject</span>[] msg <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">new</span> <span class="pl-stj" style="box-sizing: border-box;">OtpErlangObject</span>[<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">2</span>];
    msg[<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>] <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">new</span> <span class="pl-stj" style="box-sizing: border-box;">OtpErlangAtom</span>(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>$gen_cast<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>);
    <span class="pl-st" style="box-sizing: border-box; color: rgb(167, 29, 93);">OtpErlangObject</span>[] number <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">new</span> <span class="pl-stj" style="box-sizing: border-box;">OtpErlangObject</span>[<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">2</span>];
    number[<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>] <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">new</span> <span class="pl-stj" style="box-sizing: border-box;">OtpErlangAtom</span>(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>number<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>);
    number[<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">1</span>] <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">new</span> <span class="pl-stj" style="box-sizing: border-box;">OtpErlangInt</span>(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">3</span>);
    msg[<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">1</span>] <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">new</span> <span class="pl-stj" style="box-sizing: border-box;">OtpErlangTuple</span>(number);</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">This is pretty verbose, but hey, types. Anyway, this is the message we want to send. All that&#39;s left now is to send it:</p>

<div class="highlight highlight-java" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
    <span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">// - Send the message via that mailbox</span>
    mbox<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">.</span>send(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>calc<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>elixirnode<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>, <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">new</span> <span class="pl-stj" style="box-sizing: border-box;">OtpErlangTuple</span>(msg));</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">So here we&#39;re specifying the process name we&#39;re sending to, as well as the remote node name for that process. We will have to start our elixir node with that name. Let&#39;s do that:</p>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
iex --sname elixirnode --cookie <span class="pl-s3" style="box-sizing: border-box; color: rgb(0, 134, 179);">test</span> -S mix</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">OK, so now we should be in business. Let&#39;s see what happens when we run our java program while the elixir program is running:</p>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">mvn package
</code></pre>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">And of course it doesn&#39;t compile, because we haven&#39;t noted that this can throw an IOException because this is a network operation. So let&#39;s add that:</p>

<div class="highlight highlight-java" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">package</span> <span class="pl-smp" style="box-sizing: border-box;">com.elixirsips.jinterface</span>;

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">// I don&#39;t want to deal with imports, so we&#39;ll import everything...</span>
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">import</span> <span class="pl-smi" style="box-sizing: border-box;">com.ericsson.otp.erlang.*</span>;
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">import</span> <span class="pl-smi" style="box-sizing: border-box;">java.io.IOException</span>;

<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">/**</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);"> * Hello world!</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);"> *</span>
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);"> */</span>
<span class="pl-s" style="box-sizing: border-box; color: rgb(167, 29, 93);">public</span> <span class="pl-s" style="box-sizing: border-box; color: rgb(167, 29, 93);">class</span> <span class="pl-en" style="box-sizing: border-box; color: rgb(121, 93, 163);">App</span>
{
  <span class="pl-s" style="box-sizing: border-box; color: rgb(167, 29, 93);">public</span> <span class="pl-s" style="box-sizing: border-box; color: rgb(167, 29, 93);">static</span> <span class="pl-st" style="box-sizing: border-box; color: rgb(167, 29, 93);">void</span> <span class="pl-en" style="box-sizing: border-box; color: rgb(121, 93, 163);">main</span>( <span class="pl-st" style="box-sizing: border-box; color: rgb(167, 29, 93);">String</span>[] <span class="pl-v" style="box-sizing: border-box; color: rgb(29, 62, 129);">args</span> ) <span class="pl-s" style="box-sizing: border-box; color: rgb(167, 29, 93);">throws</span> <span class="pl-stj" style="box-sizing: border-box;">IOException</span>
  {
    <span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">// Let&#39;s write out our pseudocode for now</span>
    <span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">// - Create an OtpNode with a name</span>
    <span class="pl-stj" style="box-sizing: border-box;">OtpNode</span> node <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">new</span> <span class="pl-stj" style="box-sizing: border-box;">OtpNode</span>(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>javaland<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>);
    <span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">// - Create a mailbox on that node</span>
    <span class="pl-stj" style="box-sizing: border-box;">OtpMbox</span> mbox <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> node<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">.</span>createMbox(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>javambox<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>);
    <span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">// - Construct a message to send to our calc server</span>
    <span class="pl-st" style="box-sizing: border-box; color: rgb(167, 29, 93);">OtpErlangObject</span>[] msg <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">new</span> <span class="pl-stj" style="box-sizing: border-box;">OtpErlangObject</span>[<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">2</span>];
    msg[<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>] <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">new</span> <span class="pl-stj" style="box-sizing: border-box;">OtpErlangAtom</span>(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>$gen_cast<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>);
    <span class="pl-st" style="box-sizing: border-box; color: rgb(167, 29, 93);">OtpErlangObject</span>[] number <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">new</span> <span class="pl-stj" style="box-sizing: border-box;">OtpErlangObject</span>[<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">2</span>];
    number[<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">0</span>] <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">new</span> <span class="pl-stj" style="box-sizing: border-box;">OtpErlangAtom</span>(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>number<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>);
    number[<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">1</span>] <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">new</span> <span class="pl-stj" style="box-sizing: border-box;">OtpErlangInt</span>(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">3</span>);
    msg[<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">1</span>] <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">new</span> <span class="pl-stj" style="box-sizing: border-box;">OtpErlangTuple</span>(number);
    <span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">// - Send the message via that mailbox</span>
    mbox<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">.</span>send(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>calc<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>elixirnode<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>, <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">new</span> <span class="pl-stj" style="box-sizing: border-box;">OtpErlangTuple</span>(msg));
    <span class="pl-stj" style="box-sizing: border-box;">System</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">.</span>out<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">.</span>println( <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>Hello World!<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span> );
  }
}</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Now we can package it up:</p>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
mvn package</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">And run it:</p>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
java -jar target/jinterface-java-1.0-SNAPSHOT.jar</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">And if we check the display from the elixir side, we can see that the cast from java came through:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-vo" style="box-sizing: border-box;">CalculatorServer</span>.get_display(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:calc</span>)</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">We&#39;ll do that a few more times for kicks.</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Summary</h2>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">In today&#39;s episode, we walked through writing a Java application that can interface with a running Elixir system. I think this is pretty great, and this was the cornerstone of the talk I gave at ElixirConf and OSCon last year where we did some robotics stuff with Elixir. I&#39;ve linked to it in the show notes if you haven&#39;t seen it. See you soon!</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Resources</h2>

<ul class="task-list" style="box-sizing: border-box; padding-right: 0px; padding-left: 2em; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">
	<li style="box-sizing: border-box;"><a href="http://www.erlang.org/doc/apps/jinterface/jinterface_users_guide.html" rel="noreferrer" style="box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;">Erlang JInterface Users&#39; Guide</a></li>
	<li style="box-sizing: border-box;"><a href="http://maven.apache.org/plugins/maven-shade-plugin/examples/executable-jar.html" rel="noreferrer" style="box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;">Maven Shade Plugin executable JAR example</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=47410">150_JInterface.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=47411">150_JInterface.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-45d429d6603673157a7cd2e6372304e55fc3ac58</guid>
      <pubDate>Tue, 17 Mar 2015 22:24:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/47410/150_JInterface.mp4" length="60034947" type="video/mp4"/>
      <itunes:subtitle>Talking to Elixir from Java</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[149 - ejabberd Packet Filters]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=719</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><h1 style="box-sizing: border-box; font-size: 2.25em; margin-right: 0px; margin-bottom: 16px; margin-left: 0px; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; margin-top: 0px !important;">Episode 159: ejabberd Packet Filters</h1>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">In the last episode, we saw how to get notified of presence messages from users connected to the ejabberd server. Now we&#39;re going to look at how we can modify messages as they are sent from user to user. Specifically, we&#39;re going to build a module that makes everyone yell all the time.</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Project</h2>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">We&#39;re going to just start where the last episode left off. Let&#39;s add a new module first.</p>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
cp lib/mod_presence_demo.ex lib/filter_packet_demo.ex
vim lib/filter_packet_demo.ex</pre>
</div>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defmodule</span> <span class="pl-en" style="box-sizing: border-box; color: rgb(121, 93, 163);">FilterPacketDemo</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">import</span> <span class="pl-vo" style="box-sizing: border-box;">Ejabberd</span>.<span class="pl-vo" style="box-sizing: border-box;">Logger</span> <span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);"># this allow using info, error, etc for logging</span>
  <span class="pl-vo" style="box-sizing: border-box;">@behaviour</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:gen_mod</span>

  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> start(_host, _opts) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    info(<span class="pl-s3" style="box-sizing: border-box; color: rgb(0, 134, 179);"><span class="pl-pds" style="box-sizing: border-box; color: rgb(223, 80, 0);">&#39;</span>Starting ejabberd module Filter Packet Demo<span class="pl-pds" style="box-sizing: border-box; color: rgb(223, 80, 0);">&#39;</span></span>)
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # NOTE: The second argument here is global</span>
    <span class="pl-vo" style="box-sizing: border-box;">Ejabberd</span>.<span class="pl-vo" style="box-sizing: border-box;">Hooks</span>.add(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:filter_packet</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:global</span>, <span class="pl-v" style="box-sizing: border-box; color: rgb(29, 62, 129);">__ENV__</span>.module, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:on_filter_packet</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">50</span>)
    <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:ok</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> stop(_host) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    info(<span class="pl-s3" style="box-sizing: border-box; color: rgb(0, 134, 179);"><span class="pl-pds" style="box-sizing: border-box; color: rgb(223, 80, 0);">&#39;</span>Stopping ejabberd module Filter Packet Demo<span class="pl-pds" style="box-sizing: border-box; color: rgb(223, 80, 0);">&#39;</span></span>)
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # NOTE: The second argument here is global</span>
    <span class="pl-vo" style="box-sizing: border-box;">Ejabberd</span>.<span class="pl-vo" style="box-sizing: border-box;">Hooks</span>.delete(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:filter_packet</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:global</span>, <span class="pl-v" style="box-sizing: border-box; color: rgb(29, 62, 129);">__ENV__</span>.module, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:on_filter_packet</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">50</span>)
    <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:ok</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> on_filter_packet({from, to, xml} <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> packet) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    info(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>Filtering packet: <span class="pl-s2" style="box-sizing: border-box; color: rgb(51, 51, 51);"><span class="pl-pse" style="box-sizing: border-box;">#{</span>inspect {from, to, xml}<span class="pl-pse" style="box-sizing: border-box;">}</span></span><span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>)
    packet
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Now I&#39;ll compile it and install it with my ,t mapping.</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Now let&#39;s enable this module in our server. Open up the config in ~/my-ejabberd and add our new module.</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Next let&#39;s just start the ejabberd server:</p>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
./sbin/ejabberdctl iexlive</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">We&#39;ll connect with two users and chat between them, and we&#39;ll see all the packets that flow through ejabberd. Of course, we only really want to do anything to messages, so let&#39;s restrict our hook to only catch those:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defmodule</span> <span class="pl-en" style="box-sizing: border-box; color: rgb(121, 93, 163);">FilterPacketDemo</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> on_filter_packet({from, to, xml<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span>{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:xmlel</span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>message<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>, _attributes, _children}} <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> packet) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    info(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>Filtering message: <span class="pl-s2" style="box-sizing: border-box; color: rgb(51, 51, 51);"><span class="pl-pse" style="box-sizing: border-box;">#{</span>inspect packet<span class="pl-pse" style="box-sizing: border-box;">}</span></span><span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>)
    body <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:xml</span>.get_subtag(xml, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>body<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>)
    info(inspect body)
    packet
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> on_filter_packet(packet), <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>: packet
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Compile and restart, send some messages, and now we only see info logs on our actual messages...You&#39;ll note there&#39;s an empty message sent every time we send one with a body as well. I believe this is just the confirmation of receipt of a given message.</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">We want to just write a filter that will upcase all of these messages, to begin with. To do that, all we would have to do is replace the body with the upcased body. Let&#39;s think about how to do that. Basically, we would just want to map the children tags of the message, modifying the cdata if they match a certain tag name, and then use the mapped result as the children of the packet that we pass along. Let&#39;s try that.</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defmodule</span> <span class="pl-en" style="box-sizing: border-box; color: rgb(121, 93, 163);">FilterPacketDemo</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">import</span> <span class="pl-vo" style="box-sizing: border-box;">Ejabberd</span>.<span class="pl-vo" style="box-sizing: border-box;">Logger</span> <span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);"># this allow using info, error, etc for logging</span>
  <span class="pl-vo" style="box-sizing: border-box;">@behaviour</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:gen_mod</span>

  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> start(host, _opts) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    info(<span class="pl-s3" style="box-sizing: border-box; color: rgb(0, 134, 179);"><span class="pl-pds" style="box-sizing: border-box; color: rgb(223, 80, 0);">&#39;</span>Starting ejabberd module Filter Packet Demo<span class="pl-pds" style="box-sizing: border-box; color: rgb(223, 80, 0);">&#39;</span></span>)
    <span class="pl-vo" style="box-sizing: border-box;">Ejabberd</span>.<span class="pl-vo" style="box-sizing: border-box;">Hooks</span>.add(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:filter_packet</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:global</span>, <span class="pl-v" style="box-sizing: border-box; color: rgb(29, 62, 129);">__ENV__</span>.module, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:on_filter_packet</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">50</span>)
    <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:ok</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> stop(host) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    info(<span class="pl-s3" style="box-sizing: border-box; color: rgb(0, 134, 179);"><span class="pl-pds" style="box-sizing: border-box; color: rgb(223, 80, 0);">&#39;</span>Stopping ejabberd module Filter Packet Demo<span class="pl-pds" style="box-sizing: border-box; color: rgb(223, 80, 0);">&#39;</span></span>)
    <span class="pl-vo" style="box-sizing: border-box;">Ejabberd</span>.<span class="pl-vo" style="box-sizing: border-box;">Hooks</span>.delete(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:filter_packet</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:global</span>, <span class="pl-v" style="box-sizing: border-box; color: rgb(29, 62, 129);">__ENV__</span>.module, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:on_filter_packet</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">50</span>)
    <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:ok</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> on_filter_packet({from, to, xml<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span>{<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:xmlel</span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>message<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>, attributes, children}} <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> packet) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    info(<span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>Filtering message: <span class="pl-s2" style="box-sizing: border-box; color: rgb(51, 51, 51);"><span class="pl-pse" style="box-sizing: border-box;">#{</span>inspect packet<span class="pl-pse" style="box-sizing: border-box;">}</span></span><span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>)

    new_children <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">=</span> <span class="pl-vo" style="box-sizing: border-box;">Enum</span>.map(children, <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">fn</span>(child) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span>
      <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">case</span> child <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
        {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:xmlel</span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>body<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>, [], [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">xmlcdata:</span> text]} <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span>
          {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:xmlel</span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>body<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>, [], [<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">xmlcdata:</span> <span class="pl-vo" style="box-sizing: border-box;">String</span>.upcase(text)]}
        _ <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">-</span><span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">&gt;</span> child
      <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
    <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>)

    {from, to, {<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:xmlel</span>, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>message<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>, attributes, new_children}}
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> on_filter_packet(packet), <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>: packet
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Go ahead and compile it and restart the server, and let&#39;s send some messages.</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">(( do that, note they are upcased ))</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Summary</h2>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">With that little bit of code, we&#39;re able to modify the behaviour of this ejabberd server with respect to messages being sent. Obviously you could imagine how to do more interesting things here, but this was a pretty simple introduction into packet filtering with ejabberd. See you soon!</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Resources</h2>

<ul class="task-list" style="box-sizing: border-box; padding-right: 0px; padding-left: 2em; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">
	<li style="box-sizing: border-box;"><a href="http://stackoverflow.com/questions/1939879/how-to-filter-messages-in-ejabberd" rel="noreferrer" style="box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;">SO - filtering messages in ejabberd</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=47095">149_ejabberd_packet_filters.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=47096">149_ejabberd_packet_filters.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-151b5f5d5075d3202fb7487f331ba85ad0430a0e</guid>
      <pubDate>Fri, 13 Mar 2015 21:05:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/47095/149_ejabberd_packet_filters.mp4" length="90033742" type="video/mp4"/>
      <itunes:subtitle>Modifying messages inside of our ejabberd server, specifically - making everyone yell at each other.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[148 - ejabberd with Elixir]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=718</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><h1 style="box-sizing: border-box; font-size: 2.25em; margin-right: 0px; margin-bottom: 16px; margin-left: 0px; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; margin-top: 0px !important;">Episode 148: ejabberd with Elixir</h1>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">ejabberd is an XMPP server that is widely used to power either vanilla XMPP installs or XMPP-backed applications. It&#39;s one of Erlang&#39;s success stories, and it recently added Elixir support. I&#39;ve linked to the blog post announcing this support in the resources section.</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Setup</h2>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">I followed the blog post regarding compiling ejabberd with Elixir support. Let&#39;s see the support in action:</p>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-s3" style="box-sizing: border-box; color: rgb(0, 134, 179);">cd</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">~</span>/my-ejabberd
./sbin/ejabberdctl iexlive</pre>
</div>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">iex(ejabberd@localhost)1&gt; IO.puts &quot;ejabberdSips!&quot;
ejabberdSips!
:ok
iex(ejabberd@localhost)2&gt; :ejabberd_auth.try_register(&quot;elixirsips&quot;, &quot;localhost&quot;, &quot;mypass&quot;)
{:atomic, :ok}
</code></pre>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Alright, so we&#39;ve registered a elixirsips user locally. Let&#39;s see if our XMPP client can connect:</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">((( open up gajim, add account )))</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">So there, we&#39;ve connected to the account with the user we added from Elixir. Now the blog post says for us to build the smallest possible module, but they have already provided it for us.</p>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-s3" style="box-sizing: border-box; color: rgb(0, 134, 179);">cd</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">~</span>/erlang/ejabberd
vim lib/mod_presence_demo.ex</pre>
</div>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">defmodule</span> <span class="pl-en" style="box-sizing: border-box; color: rgb(121, 93, 163);">ModPresenceDemo</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">import</span> <span class="pl-vo" style="box-sizing: border-box;">Ejabberd</span>.<span class="pl-vo" style="box-sizing: border-box;">Logger</span> <span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);"># this allow using info, error, etc for logging</span>
  <span class="pl-vo" style="box-sizing: border-box;">@behaviour</span> <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:gen_mod</span>

  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> start(host, _opts) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    info(<span class="pl-s3" style="box-sizing: border-box; color: rgb(0, 134, 179);"><span class="pl-pds" style="box-sizing: border-box; color: rgb(223, 80, 0);">&#39;</span>Starting ejabberd module Presence Demo<span class="pl-pds" style="box-sizing: border-box; color: rgb(223, 80, 0);">&#39;</span></span>)
    <span class="pl-vo" style="box-sizing: border-box;">Ejabberd</span>.<span class="pl-vo" style="box-sizing: border-box;">Hooks</span>.add(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:set_presence_hook</span>, host, <span class="pl-v" style="box-sizing: border-box; color: rgb(29, 62, 129);">__ENV__</span>.module, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:on_presence</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">50</span>)
    <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:ok</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> stop(host) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    info(<span class="pl-s3" style="box-sizing: border-box; color: rgb(0, 134, 179);"><span class="pl-pds" style="box-sizing: border-box; color: rgb(223, 80, 0);">&#39;</span>Stopping ejabberd module Presence Demo<span class="pl-pds" style="box-sizing: border-box; color: rgb(223, 80, 0);">&#39;</span></span>)
    <span class="pl-vo" style="box-sizing: border-box;">Ejabberd</span>.<span class="pl-vo" style="box-sizing: border-box;">Hooks</span>.delete(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:set_presence_hook</span>, host, <span class="pl-v" style="box-sizing: border-box; color: rgb(29, 62, 129);">__ENV__</span>.module, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:on_presence</span>, <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">50</span>)
    <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:ok</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>

  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> on_presence(user, _server, _resource, _packet) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    info(<span class="pl-s3" style="box-sizing: border-box; color: rgb(0, 134, 179);"><span class="pl-pds" style="box-sizing: border-box; color: rgb(223, 80, 0);">&#39;</span>Receive presence for <span class="pl-s2" style="box-sizing: border-box;"><span class="pl-pse" style="box-sizing: border-box;">#{</span>user<span class="pl-pse" style="box-sizing: border-box;">}</span></span><span class="pl-pds" style="box-sizing: border-box; color: rgb(223, 80, 0);">&#39;</span></span>)
    <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:none</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span>
<span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Here you can see that, when enabled, this will announce presence for every user when they change presence. We didn&#39;t see that happen when I connected, so it must not be enabled. Let&#39;s open up the yaml configuration file:</p>

<div class="highlight highlight-sh" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
<span class="pl-s3" style="box-sizing: border-box; color: rgb(0, 134, 179);">cd</span> <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">~</span>/my-ejabberd
vim etc/ejabberd/ejabberd.yml</pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">In the modules section, add:</p>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">ModPresenceDemo: {}
</code></pre>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Now we&#39;ll restart and connect again. Now every time we change presence, an update gets logged.</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">This is the end of the introductory blog post. Let&#39;s see if we can take it a little bit further. Open up the module again:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> on_presence(user, _server, _resource, packet) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    info(<span class="pl-s3" style="box-sizing: border-box; color: rgb(0, 134, 179);"><span class="pl-pds" style="box-sizing: border-box; color: rgb(223, 80, 0);">&#39;</span>Receive presence for <span class="pl-s2" style="box-sizing: border-box;"><span class="pl-pse" style="box-sizing: border-box;">#{</span>user<span class="pl-pse" style="box-sizing: border-box;">}</span></span><span class="pl-pds" style="box-sizing: border-box; color: rgb(223, 80, 0);">&#39;</span></span>)
<span class="pl-c" style="box-sizing: border-box; color: rgb(150, 152, 150);">    # We&#39;ll inspect the packet that we&#39;re sent in this event</span>
    info(inspect packet)
    <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:none</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Now recompile everything and reinstall, and start it back up. Now I&#39;ll connect again with my client and we&#39;ll see what a presence packet looks like.</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">((( connect, mark yourself away with a given status )))</p>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">19:54:04.160 [info] Receive presence for elixirsips
19:54:04.161 [info] {:xmlel, &quot;presence&quot;, [{&quot;xml:lang&quot;, &quot;en&quot;}, {&quot;id&quot;, &quot;56&quot;}], [{:xmlel, &quot;priority&quot;, [], [xmlcdata: &quot;40&quot;]}, {:xmlel, &quot;show&quot;, [], [xmlcdata: &quot;away&quot;]}, {:xmlel, &quot;x&quot;, [{&quot;xmlns&quot;, &quot;vcard-temp:x:update&quot;}], [{:xmlel, &quot;photo&quot;, [], []}]}, {:xmlel, &quot;c&quot;, [{&quot;xmlns&quot;, &quot;http://jabber.org/protocol/caps&quot;}, {&quot;node&quot;, &quot;http://gajim.org&quot;}, {&quot;ver&quot;, &quot;47EPEmSc9oqPGwcrbNtpKcYyJcE=&quot;}, {&quot;hash&quot;, &quot;sha-1&quot;}], []}, {:xmlel, &quot;status&quot;, [], [xmlcdata: &quot;asdf&quot;]}]}
</code></pre>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">So here we can see what an away presence message with a status looks like. Let&#39;s log it a bit nicer:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> on_presence(user, _server, _resource, packet) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    info(<span class="pl-s3" style="box-sizing: border-box; color: rgb(0, 134, 179);"><span class="pl-pds" style="box-sizing: border-box; color: rgb(223, 80, 0);">&#39;</span>Receive presence for <span class="pl-s2" style="box-sizing: border-box;"><span class="pl-pse" style="box-sizing: border-box;">#{</span>user<span class="pl-pse" style="box-sizing: border-box;">}</span></span><span class="pl-pds" style="box-sizing: border-box; color: rgb(223, 80, 0);">&#39;</span></span>)
    info(inspect(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:xml</span>.get_subtag(packet, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>show<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>)))
    <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:none</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Now I&#39;ll do my common happy-path &quot;,t&quot; thing and map that key combination to build and install the new plugin, so we can easily do that part, then restart the server every time we want to see a change:</p>

<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; background-color: rgb(247, 247, 247);">
<code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0px; margin: 0px; border-radius: 3px; word-break: normal; white-space: pre; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; word-wrap: normal; background: transparent;">:map ,t :!make &amp;&amp; make install&lt;cr&gt;
</code></pre>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">Let&#39;s use it, and restart the server. Now change our status a few times.</p>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">We can see that there&#39;s no &quot;show&quot; subtag when we&#39;re just available, but otherwise it maps to various defined states. Let&#39;s also log the status if it exists:</p>

<div class="highlight highlight-elixir" style="box-sizing: border-box; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;">
<pre style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 3px; word-wrap: normal; word-break: normal; background-color: rgb(247, 247, 247);">
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">def</span> on_presence(user, _server, _resource, packet) <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">do</span>
    info(<span class="pl-s3" style="box-sizing: border-box; color: rgb(0, 134, 179);"><span class="pl-pds" style="box-sizing: border-box; color: rgb(223, 80, 0);">&#39;</span>Receive presence for <span class="pl-s2" style="box-sizing: border-box;"><span class="pl-pse" style="box-sizing: border-box;">#{</span>user<span class="pl-pse" style="box-sizing: border-box;">}</span></span><span class="pl-pds" style="box-sizing: border-box; color: rgb(223, 80, 0);">&#39;</span></span>)
    info(inspect(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:xml</span>.get_subtag(packet, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>show<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>)))
    info(inspect(<span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:xml</span>.get_subtag(packet, <span class="pl-s1" style="box-sizing: border-box; color: rgb(223, 80, 0);"><span class="pl-pds" style="box-sizing: border-box;">&quot;</span>status<span class="pl-pds" style="box-sizing: border-box;">&quot;</span></span>)))
    <span class="pl-c1" style="box-sizing: border-box; color: rgb(0, 134, 179);">:none</span>
  <span class="pl-k" style="box-sizing: border-box; color: rgb(167, 29, 93);">end</span></pre>
</div>

<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">We could do a bit more, but this shows a decent start. In the next episode, we&#39;ll look at how you can filter packets as they pass through the system. See you soon!</p>

<h2 style="box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.225; font-size: 1.75em; position: relative; font-weight: bold; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;">Resources</h2>

<ul class="task-list" style="box-sizing: border-box; padding-right: 0px; padding-left: 2em; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 20.4799995422363px;">
	<li style="box-sizing: border-box;"><a href="https://www.ejabberd.im/" rel="noreferrer" style="box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;">ejabberd</a></li>
	<li style="box-sizing: border-box;"><a href="https://github.com/processone/ejabberd" rel="noreferrer" style="box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;">processone/ejabberd</a></li>
	<li style="box-sizing: border-box;"><a href="https://blog.process-one.net/ejabberd-joins-the-elixir-revolution/" rel="noreferrer" style="box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;">ejabberd Joins the Elixir Revolution</a></li>
	<li style="box-sizing: border-box;"><a href="http://lists.jabber.ru/mailman/listinfo/ejabberd" rel="noreferrer" style="box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;">ejabberd Mailing List</a></li>
	<li style="box-sizing: border-box;"><a href="http://docs.ejabberd.im/developer/hooks/" rel="noreferrer" style="box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;">ejabberd hooks documentation</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=46992">148_ejabberd_with_elixir.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=46993">148_ejabberd_with_elixir.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-4c30ef69eaac733e69473a1f4668fa3d7e4316a7</guid>
      <pubDate>Thu, 12 Mar 2015 22:07:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/46992/148_ejabberd_with_elixir.mp4" length="70786177" type="video/mp4"/>
      <itunes:subtitle>Getting started interacting with a battle-hardened XMPP chat server by writing Elixir modules for it.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[147 - webassembly]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=716</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><h1 style="margin-left:0px; margin-right:0px">Episode 147: WebAssembly</h1>

<p>When I first got involved in Ruby, I was a huge fan of &quot;_why the lucky stiff&quot;. Everything that he did was amazing to me, because he was so prolific. One of his projects was called Markaby, which was just &quot;markup as Ruby&quot;. WebAssembly is loosely based on Markaby inasmuch as it is just &quot;markup as Elixir&quot;. This appeals to me, so I figured I&#39;d spend some time trying it out. Let&#39;s get started...</p>

<h2>Project (for readers)</h2>

<p>We&#39;ll set up a project with:</p>

<pre>
mix new webassembly_playground
cd webassembly_playground
vim mix.exs
</pre>

<pre>
  <span style="color:rgb(167, 29, 93)">defp</span> deps <span style="color:rgb(167, 29, 93)">do</span>
    [
      {<span style="color:rgb(0, 134, 179)">:webassembly</span>, <span style="color:rgb(223, 80, 0)">&quot;~&gt; 0.5.1&quot;</span>}
    ]
  <span style="color:rgb(167, 29, 93)">end</span></pre>

<pre>
mix deps.get</pre>

<h2>Project (for the video)</h2>

<p>I&#39;ve already got a project set up that includes the&nbsp;webassembly&nbsp;dependency. Let&#39;s build a module that defines a little bit of html.</p>

<pre>
<span style="color:rgb(167, 29, 93)">defmodule</span> <span style="color:rgb(121, 93, 163)">WebassemblyPlayground</span> <span style="color:rgb(167, 29, 93)">do</span>
  <span style="color:rgb(167, 29, 93)">use</span> WebAssembly

  <span style="color:rgb(167, 29, 93)">def</span> a_list(things) <span style="color:rgb(167, 29, 93)">do</span>
    builder <span style="color:rgb(167, 29, 93)">do</span>
      ul <span style="color:rgb(167, 29, 93)">do</span>
        <span style="color:rgb(167, 29, 93)">for</span> thing <span style="color:rgb(167, 29, 93)">&lt;</span><span style="color:rgb(167, 29, 93)">-</span> things <span style="color:rgb(167, 29, 93)">do</span>
          li thing
        <span style="color:rgb(167, 29, 93)">end</span>
      <span style="color:rgb(167, 29, 93)">end</span>
    <span style="color:rgb(167, 29, 93)">end</span>
  <span style="color:rgb(167, 29, 93)">end</span>
<span style="color:rgb(167, 29, 93)">end</span></pre>

<p>So if we give this a list of things, it will output them as an unordered list in HTML. Let&#39;s try that out in iex:</p>

<pre>
iex(1)&gt; WebassemblyPlayground.a_list([1, 2, 3])
[&quot;\n&lt;ul&gt;&quot;, [&quot;\n&lt;li&gt;&quot;, 1, &quot;&lt;/li&gt;&quot;, &quot;\n&lt;li&gt;&quot;, 2, &quot;&lt;/li&gt;&quot;, &quot;\n&lt;li&gt;&quot;, 3, &quot;&lt;/li&gt;&quot;],
 &quot;&lt;/ul&gt;&quot;]
</pre>

<p>Let&#39;s hop back into the module and build a template that tells us all about Logger:</p>

<pre>
<span style="color:rgb(167, 29, 93)">defmodule</span> <span style="color:rgb(121, 93, 163)">WebassemblyPlayground</span> <span style="color:rgb(167, 29, 93)">do</span>
  <span style="color:rgb(167, 29, 93)">use</span> WebAssembly
<span style="color:rgb(150, 152, 150)">  #...</span>
<span style="color:rgb(150, 152, 150)">  # So we want a function that you can pass a module into, and it returns some</span>
<span style="color:rgb(150, 152, 150)">  # markup describing that module&#39;s functions.</span>
  <span style="color:rgb(167, 29, 93)">def</span> module_functions(module) <span style="color:rgb(167, 29, 93)">do</span>
    builder <span style="color:rgb(167, 29, 93)">do</span>
<span style="color:rgb(150, 152, 150)">      # Here I&#39;m just using some pretty fun meta-information about the modules</span>
<span style="color:rgb(150, 152, 150)">      # This is how you can get the module&#39;s name.  This is identical to just</span>
<span style="color:rgb(150, 152, 150)">      # using module...I&#39;m showboating here.</span>
      h2 module.__info__(<span style="color:rgb(0, 134, 179)">:module</span>)
      ul <span style="color:rgb(167, 29, 93)">do</span>
<span style="color:rgb(150, 152, 150)">        # This is how you can get the module&#39;s list of functions</span>
        <span style="color:rgb(167, 29, 93)">for</span> {name, arity} <span style="color:rgb(167, 29, 93)">&lt;</span><span style="color:rgb(167, 29, 93)">-</span> module.__info__(<span style="color:rgb(0, 134, 179)">:functions</span>) <span style="color:rgb(167, 29, 93)">do</span>
          li <span style="color:rgb(167, 29, 93)">do</span>
            strong name
            em arity
          <span style="color:rgb(167, 29, 93)">end</span>
        <span style="color:rgb(167, 29, 93)">end</span>
      <span style="color:rgb(167, 29, 93)">end</span>
    <span style="color:rgb(167, 29, 93)">end</span>
  <span style="color:rgb(167, 29, 93)">end</span>
<span style="color:rgb(167, 29, 93)">end</span></pre>

<p>Let&#39;s try that out:</p>

<pre>
iex(1)&gt; WebassemblyPlayground.module_functions(String)
[&quot;\n&lt;h2&gt;&quot;, String, &quot;&lt;/h2&gt;&quot;, &quot;\n&lt;ul&gt;&quot;,
 [&quot;\n&lt;li&gt;&quot;, [&quot;\n&lt;strong&gt;&quot;, :at, &quot;&lt;/strong&gt;&quot;, &quot;\n&lt;em&gt;&quot;, 2, &quot;&lt;/em&gt;&quot;], &quot;&lt;/li&gt;&quot;,
  &quot;\n&lt;li&gt;&quot;, [&quot;\n&lt;strong&gt;&quot;, :capitalize, &quot;&lt;/strong&gt;&quot;, &quot;\n&lt;em&gt;&quot;, 1, &quot;&lt;/em&gt;&quot;],
  &quot;&lt;/li&gt;&quot;, &quot;\n&lt;li&gt;&quot;, [&quot;\n&lt;strong&gt;&quot;, :chunk, &quot;&lt;/strong&gt;&quot;, &quot;\n&lt;em&gt;&quot;, 2, &quot;&lt;/em&gt;&quot;],
  &quot;&lt;/li&gt;&quot;, &quot;\n&lt;li&gt;&quot;,
  [&quot;\n&lt;strong&gt;&quot;, :codepoints, &quot;&lt;/strong&gt;&quot;, &quot;\n&lt;em&gt;&quot;, 1, &quot;&lt;/em&gt;&quot;], &quot;&lt;/li&gt;&quot;,
  &quot;\n&lt;li&gt;&quot;, [&quot;\n&lt;strong&gt;&quot;, :contains?, &quot;&lt;/strong&gt;&quot;, &quot;\n&lt;em&gt;&quot;, 2, &quot;&lt;/em&gt;&quot;],
  &quot;&lt;/li&gt;&quot;, &quot;\n&lt;li&gt;&quot;,
  [&quot;\n&lt;strong&gt;&quot;, :downcase, &quot;&lt;/strong&gt;&quot;, &quot;\n&lt;em&gt;&quot;, 1, &quot;&lt;/em&gt;&quot;], &quot;&lt;/li&gt;&quot;,
  &quot;\n&lt;li&gt;&quot;, [&quot;\n&lt;strong&gt;&quot;, :duplicate, &quot;&lt;/strong&gt;&quot;, &quot;\n&lt;em&gt;&quot;, 2, &quot;&lt;/em&gt;&quot;],
  &quot;&lt;/li&gt;&quot;, &quot;\n&lt;li&gt;&quot;,
  [&quot;\n&lt;strong&gt;&quot;, :ends_with?, &quot;&lt;/strong&gt;&quot;, &quot;\n&lt;em&gt;&quot;, 2, &quot;&lt;/em&gt;&quot;], &quot;&lt;/li&gt;&quot;,
  &quot;\n&lt;li&gt;&quot;, [&quot;\n&lt;strong&gt;&quot;, :first, &quot;&lt;/strong&gt;&quot;, &quot;\n&lt;em&gt;&quot;, 1, &quot;&lt;/em&gt;&quot;], &quot;&lt;/li&gt;&quot;,
  &quot;\n&lt;li&gt;&quot;, [&quot;\n&lt;strong&gt;&quot;, :graphemes, &quot;&lt;/strong&gt;&quot;, &quot;\n&lt;em&gt;&quot;, 1, &quot;&lt;/em&gt;&quot;],
  &quot;&lt;/li&gt;&quot;, &quot;\n&lt;li&gt;&quot;, [&quot;\n&lt;strong&gt;&quot;, :last, &quot;&lt;/strong&gt;&quot;, &quot;\n&lt;em&gt;&quot;, 1, &quot;&lt;/em&gt;&quot;],
  &quot;&lt;/li&gt;&quot;, &quot;\n&lt;li&gt;&quot;, [&quot;\n&lt;strong&gt;&quot;, :length, &quot;&lt;/strong&gt;&quot;, &quot;\n&lt;em&gt;&quot;, 1, &quot;&lt;/em&gt;&quot;],
  &quot;&lt;/li&gt;&quot;, &quot;\n&lt;li&gt;&quot;, [&quot;\n&lt;strong&gt;&quot;, :ljust, &quot;&lt;/strong&gt;&quot;, &quot;\n&lt;em&gt;&quot;, 2, &quot;&lt;/em&gt;&quot;],
  &quot;&lt;/li&gt;&quot;, &quot;\n&lt;li&gt;&quot;, [&quot;\n&lt;strong&gt;&quot;, :ljust, &quot;&lt;/strong&gt;&quot;, &quot;\n&lt;em&gt;&quot;, ...],
  &quot;&lt;/li&gt;&quot;, &quot;\n&lt;li&gt;&quot;, [&quot;\n&lt;strong&gt;&quot;, ...], &quot;&lt;/li&gt;&quot;, ...], &quot;&lt;/ul&gt;&quot;]
</pre>

<h2>Summary</h2>

<p>OK, so that was pretty fun. You will have noticed that this isn&#39;t one giant binary. This is an iolist, which I haven&#39;t discussed before. Basically, anything that deals with io in the Erlang VM is expected to deal with an iolist just fine. It&#39;s pretty obvious that you can just concatenate these things together and get your big string to send down an HTTP connection or write to a file. Anyway, I really enjoyed this because it reminds me of markaby. See you soon!</p>

<h2>Resources</h2>

<ul>
	<li><a href="https://github.com/herenowcoder/webassembly">herenowcoder/webassembly</a></li>
	<li><a href="http://hexdocs.pm/webassembly">webassembly on hexdocs.pm</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=46446">147_webassembly.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=46447">147_webassembly.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-e1751af797c4f1307c68f71bba0e00b9a4c1a79b</guid>
      <pubDate>Fri, 06 Mar 2015 21:31:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/46447/147_webassembly.mp4" length="19534883" type="video/mp4"/>
      <itunes:subtitle>Generate markup from blocks of elixir code, in the style of _why the lucky stiff's markaby.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[146 - mailman]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=714</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><h1 style="margin-left:0px; margin-right:0px">Episode 146: Mailman</h1>

<p>Though I&#39;ve done some production applications in Elixir, none have yet called for email, so I haven&#39;t dealt with it before now. Consequently, I&#39;ve never sent an email from Elixir before now. Today, we rectify that using the&nbsp;mailman&nbsp;library. Let&#39;s get started.</p>

<h2>Project</h2>

<h3>NOTE: I did this part ahead of time, and so I skipped it in the video</h3>

<p>We&#39;ll start out with a new project:</p>

<pre>
mix new mailman_playground --sup
<span style="color:rgb(0, 134, 179)">cd</span> mailman_playground
vim mix.exs</pre>

<pre>
  <span style="color:rgb(167, 29, 93)">defp</span> deps <span style="color:rgb(167, 29, 93)">do</span>
    [
      {<span style="color:rgb(0, 134, 179)">:mailman</span>, <span style="color:rgb(0, 134, 179)">github:</span> <span style="color:rgb(223, 80, 0)">&quot;kamilc/mailman&quot;</span>}
    ]
  <span style="color:rgb(167, 29, 93)">end</span></pre>

<pre>
mix deps.get</pre>

<h3>Here&#39;s the video bit</h3>

<p>I&#39;ve already generated a new project with mailman as a dependency. It&#39;s important at present that you use the github dependency rather than what&#39;s published to hex, as that one fails on parsing emails. So I ran into that gotcha for you, but it was fairly trivial.</p>

<p>The next thing we need to do is to start the test email server that it ships with - this is an email server that you can use in tests to verify which emails have been sent. We&#39;ll modify the supervisor to start it...not in the best way, but just to show you what&#39;s possible:</p>

<pre>
<span style="color:rgb(150, 152, 150)">  # Add this in the app start</span>
  Mailman.TestServer.start</pre>

<p>Next, we&#39;ll define a mailer. For expediency, I&#39;ll just slap the module in this file we&#39;re already in:</p>

<pre>
<span style="color:rgb(167, 29, 93)">defmodule</span> <span style="color:rgb(121, 93, 163)">MailmanPlayground.Mailer</span> <span style="color:rgb(167, 29, 93)">do</span>
  <span style="color:rgb(167, 29, 93)">def</span> deliver(email) <span style="color:rgb(167, 29, 93)">do</span>
    Mailman.deliver(email, config)
  <span style="color:rgb(167, 29, 93)">end</span>

  <span style="color:rgb(167, 29, 93)">def</span> config <span style="color:rgb(167, 29, 93)">do</span>
    %Mailman.Context{
        <span style="color:rgb(0, 134, 179)">config:</span>   %Mailman.TestConfig{},
        <span style="color:rgb(0, 134, 179)">composer:</span> %Mailman.EexComposeConfig{}
      }
  <span style="color:rgb(167, 29, 93)">end</span>
<span style="color:rgb(167, 29, 93)">end</span></pre>

<p>So this is how the Mailman is configured. It consists of two components - the adapter, and the composer. The adapter is how we&#39;re going to send mail. Here we&#39;re using the TestConfig adapter configuration, so that it will use our TestServer. There&#39;s also a LocalSmtpConfig and an SmtpConfig available.</p>

<p>The other component is the composer. The only composer configuration that ships with Mailman at present is the EexComposerConfig, but you can implement your own if you need to.</p>

<p>With this configuration, Mailman&#39;s ready to deliver emails. The next thing you need to do is define an email to send. This just consists of generating a struct. We&#39;ll define a function that does that:</p>

<pre>
<span style="color:rgb(167, 29, 93)">defmodule</span> <span style="color:rgb(121, 93, 163)">MailmanPlayground.Emails</span> <span style="color:rgb(167, 29, 93)">do</span>
  <span style="color:rgb(167, 29, 93)">def</span> testing_email <span style="color:rgb(167, 29, 93)">do</span>
    %Mailman.Email{
      <span style="color:rgb(0, 134, 179)">subject:</span> <span style="color:rgb(223, 80, 0)">&quot;Hey from elixirsips&quot;</span>,
      <span style="color:rgb(0, 134, 179)">from:</span> <span style="color:rgb(223, 80, 0)">&quot;josh@elixirsips.com&quot;</span>,
      <span style="color:rgb(0, 134, 179)">to:</span> [ <span style="color:rgb(223, 80, 0)">&quot;josh.rubyist@gmail.com&quot;</span> ],
      <span style="color:rgb(0, 134, 179)">cc:</span> [ <span style="color:rgb(223, 80, 0)">&quot;josh@isotope11.com&quot;</span>] ,
      <span style="color:rgb(0, 134, 179)">bcc:</span> [ <span style="color:rgb(223, 80, 0)">&quot;someone@example.com&quot;</span> ],
      <span style="color:rgb(0, 134, 179)">data:</span> [
        <span style="color:rgb(0, 134, 179)">name:</span> <span style="color:rgb(223, 80, 0)">&quot;Yo yo ma&quot;</span>
      ],
      <span style="color:rgb(0, 134, 179)">text:</span> <span style="color:rgb(223, 80, 0)">&quot;Hello! &lt;%= name %&gt;.  Hope things are going well!&quot;</span>,
      <span style="color:rgb(0, 134, 179)">html:</span> <span style="color:rgb(223, 80, 0)">&quot;&quot;&quot;</span>
<span style="color:rgb(223, 80, 0)">&lt;html&gt;</span>
<span style="color:rgb(223, 80, 0)">&lt;body&gt;</span>
<span style="color:rgb(223, 80, 0)"> &lt;b&gt;Hello! &lt;%= name %&gt;&lt;/b&gt;.  Hope things are going well!</span>
<span style="color:rgb(223, 80, 0)">&lt;/body&gt;</span>
<span style="color:rgb(223, 80, 0)">&lt;/html&gt;</span>
<span style="color:rgb(223, 80, 0)">      &quot;&quot;&quot;</span>
      }
  <span style="color:rgb(167, 29, 93)">end</span>
<span style="color:rgb(167, 29, 93)">end</span></pre>

<p>So here you can see that you can place a keywordlist in the&nbsp;data&nbsp;field of the struct, and that is the context that is used for the eex template. You define multipart emails just by passing in both the text and the html version of your email, each of which will be templated. It&#39;s also possible to add attachments, though we aren&#39;t showing that here.</p>

<p>So let&#39;s see how it works. We&#39;ll fire up iex:</p>

<pre>
MailmanPlayground.Mailer.deliver(MailmanPlayground.Emails.testing_email)
[delivery<span style="color:rgb(167, 29, 93)">|</span>_] <span style="color:rgb(167, 29, 93)">=</span> Mailman.TestServer.deliveries
Mailman.Email.parse! delivery</pre>

<p>In this parsed email, you can see it was delivered because the &quot;delivery&quot; field has been filled out in the email&#39;s struct. Using this TestServer, you can easily write functional tests to verify an appropriate email has been sent by your application. I think this is great - Ruby didn&#39;t have libraries that robust at 1.0 :)</p>

<h2>Summary</h2>

<p>Anyway, this was basically just a quick walkthrough of mailman&#39;s README, to be honest. I started out tonight trying to write an episode on SNMP, but it turns out I had nowhere near enough time to write a concise episode on that topic. I was a bit too ambitious it seems. Emails are at least as good as SNMP though, right? Hope you enjoyed it. See you soon!</p>

<h2>Resources</h2>

<ul>
	<li><a href="https://github.com/kamilc/mailman">kamilc/mailman</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=46199">146_mailman.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=46200">146_mailman.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-e803848bb958b19303529b4b071824ec69cba226</guid>
      <pubDate>Tue, 03 Mar 2015 23:44:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/46199/146_mailman.mp4" length="30221227" type="video/mp4"/>
      <itunes:subtitle>Easily send emails, parse emails, and verify email related features in your tests using this One Neat Trick.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[145_good_times]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=710</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><h1 style="margin-left:0px; margin-right:0px">Episode 145:&nbsp;good_times</h1>

<p>Recently on the elixir-lang-talk mailing list, someone announced their new time-related library,good_times. I figured we could look at it, since we just looked at the calendar module.</p>

<h2>Project</h2>

<p>We&#39;ll clone the project:</p>

<pre>
hub clone magplus/good_times
<span style="color:rgb(0, 134, 179)">cd</span> good_times
mix deps.get
mix compile
iex -S mix</pre>

<p>We&#39;ll start out looking at what the README suggests:</p>

<pre>
iex(1)&gt; import GoodTimes
nil
iex(2)&gt; now
{{2015, 2, 26}, {15, 39, 55}}
iex(3)&gt; 10 |&gt; seconds_from_now
{{2015, 2, 26}, {15, 40, 05}}
iex(4)&gt; 60 |&gt; seconds_ago
{{2015, 2, 26}, {15, 38, 55}
</pre>

<p>OK, so that&#39;s pretty cool. Let&#39;s look at the code and see how it&#39;s laid out:</p>

<p>((( open up&nbsp;lib/good_times.ex&nbsp;)))</p>

<p>So there&#39;s some basic module attributes and specs:</p>

<pre>
  @seconds_per_minute <span style="color:rgb(0, 134, 179)">60</span>
  @seconds_per_hour <span style="color:rgb(0, 134, 179)">3600</span>
  @seconds_per_day <span style="color:rgb(0, 134, 179)">86400</span>

  @type year  <span style="color:rgb(167, 29, 93)">::</span> non_neg_integer
  @type month <span style="color:rgb(167, 29, 93)">::</span> <span style="color:rgb(0, 134, 179)">1</span><span style="color:rgb(167, 29, 93)">..</span><span style="color:rgb(0, 134, 179)">12</span>
  @type day   <span style="color:rgb(167, 29, 93)">::</span> <span style="color:rgb(0, 134, 179)">1</span><span style="color:rgb(167, 29, 93)">..</span><span style="color:rgb(0, 134, 179)">31</span>
  @type hour   <span style="color:rgb(167, 29, 93)">::</span> <span style="color:rgb(0, 134, 179)">0</span><span style="color:rgb(167, 29, 93)">..</span><span style="color:rgb(0, 134, 179)">23</span>
  @type minute <span style="color:rgb(167, 29, 93)">::</span> <span style="color:rgb(0, 134, 179)">0</span><span style="color:rgb(167, 29, 93)">..</span><span style="color:rgb(0, 134, 179)">59</span>
  @type second <span style="color:rgb(167, 29, 93)">::</span> <span style="color:rgb(0, 134, 179)">0</span><span style="color:rgb(167, 29, 93)">..</span><span style="color:rgb(0, 134, 179)">59</span>
  @type datetime <span style="color:rgb(167, 29, 93)">::</span> {{year, month, day}, {hour, minute, second}}</pre>

<p>I&#39;m pretty happy to see&nbsp;now&nbsp;returned as both a usable datetime and in universal format:</p>

<pre>
  @spec now <span style="color:rgb(167, 29, 93)">::</span> datetime
  <span style="color:rgb(167, 29, 93)">def</span> now, <span style="color:rgb(167, 29, 93)">do</span>: <span style="color:rgb(0, 134, 179)">:calendar</span>.universal_time</pre>

<p>So the whole library is built on this function - adding seconds to a given datetime. This is why those module attributes were so sensible at the top:</p>

<pre>
  @spec seconds_after(integer, datetime) <span style="color:rgb(167, 29, 93)">::</span> datetime
  <span style="color:rgb(167, 29, 93)">def</span> seconds_after(seconds, datetime) <span style="color:rgb(167, 29, 93)">do</span>
    datetime
    <span style="color:rgb(167, 29, 93)">|</span><span style="color:rgb(167, 29, 93)">&gt;</span> <span style="color:rgb(0, 134, 179)">:calendar</span>.datetime_to_gregorian_seconds
    <span style="color:rgb(167, 29, 93)">|</span><span style="color:rgb(167, 29, 93)">&gt;</span> Kernel.<span style="color:rgb(167, 29, 93)">+</span>(seconds)
    <span style="color:rgb(167, 29, 93)">|</span><span style="color:rgb(167, 29, 93)">&gt;</span> <span style="color:rgb(0, 134, 179)">:calendar</span>.gregorian_seconds_to_datetime
  <span style="color:rgb(167, 29, 93)">end</span></pre>

<p>From here you can see each of the remaining functions just builds on top of this function in a one-liner, in a sensible way.</p>

<h2>Summary</h2>

<p>Honestly, one of my favorite things about this library is that in Elixir we get it standalone, and it isn&#39;t modifying the underlying language. Compare that to ActiveSupport in Ruby and you will understand why this is preferable :) See you soon!</p>

<h2>Resources</h2>

<ul>
	<li><a href="https://github.com/magplus/good_times">magplus/good_times</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=46019">145_good_times.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=46020">145_good_times.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-eb535897309f8344fcea73020a27ddcdd6cb4caf</guid>
      <pubDate>Mon, 02 Mar 2015 14:23:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/46019/145_good_times.mp4" length="27878405" type="video/mp4"/>
      <itunes:subtitle>An elixir library for trivially specifying relative dates and times.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[144 - Erlang's `calendar` module]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=705</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Interacting with Erlang&#39;s native date and time types.</p>

<h1 style="margin-left:0px; margin-right:0px">Episode 144: Erlang&#39;s&nbsp;calendar&nbsp;module</h1>

<p>Erlang&#39;s&nbsp;calendar&nbsp;module provides local and universal time, day-of-the-week, date and time conversions.</p>

<h2>Project</h2>

<p>We&#39;ll explore the way erlang deals with times a bit in iex. Open it up:</p>

<pre>
iex</pre>

<p>Now, the&nbsp;date()&nbsp;type in erlang is a 3-element tuple, consisting of years, months, and days. It looks like this:</p>

<pre>
iex(1)&gt; date = {2015, 03, 01}
{2015, 3, 1}
</pre>

<p>You can figure out how many gregorian days have occured since year 0 till the given date:</p>

<pre>
iex(2)&gt; :calendar.date_to_gregorian_days(date)
736023
</pre>

<p>The&nbsp;time()&nbsp;type in erlang is also a 3-element tuple, consisting of hours, minutes, and seconds. It looks like this:</p>

<pre>
iex&gt; time = {0, 0, 0} # midnight
</pre>

<p>The&nbsp;datetime()&nbsp;type is a 2-element tuple consisting of a&nbsp;date&nbsp;type and a&nbsp;time&nbsp;type:</p>

<pre>
iex&gt; datetime = {date, time}
</pre>

<p>If you want second-level granularity since year 0, you can use&nbsp;datetime_to_gregorian_seconds:</p>

<pre>
iex(5)&gt; :calendar.datetime_to_gregorian_seconds(datetime)
63592387200
</pre>

<p>You can find out what day of the week it is on a given date. For instance, today is Sunday:</p>

<pre>
iex(6)&gt; :calendar.day_of_the_week(date)
7
</pre>

<p>You can see if a given year is a leap year:</p>

<pre>
iex&gt; {year, _, _} = date
iex&gt; :calendar.is_leap_year(year)
false
</pre>

<p>You can find out the iso standard week number for the current date:</p>

<pre>
<span style="color:rgb(0, 134, 179)">:calendar</span>.iso_week_number</pre>

<p>Or for a given date:</p>

<pre>
<span style="color:rgb(0, 134, 179)">:calendar</span>.iso_week_number(date)</pre>

<p>For a given year and month, you can find the last day of the month:</p>

<pre>
<span style="color:rgb(0, 134, 179)">:calendar</span>.last_day_of_the_month(<span style="color:rgb(0, 134, 179)">2014</span>, <span style="color:rgb(0, 134, 179)">2</span>)
<span style="color:rgb(0, 134, 179)">:calendar</span>.last_day_of_the_month(<span style="color:rgb(0, 134, 179)">2012</span>, <span style="color:rgb(0, 134, 179)">2</span>)</pre>

<p>You can find the underlying operating system&#39;s local time:</p>

<pre>
<span style="color:rgb(0, 134, 179)">:calendar</span>.local_time <span style="color:rgb(150, 152, 150)"># do this a few times to see the seconds tick</span></pre>

<p>You can get the current local time, but in universal time, taking dst into account:</p>

<pre>
<span style="color:rgb(0, 134, 179)">:calendar</span>.local_time_to_universal_time_dst(<span style="color:rgb(0, 134, 179)">:calendar</span>.local_time)</pre>

<p>You can get a human-readable form of the current time from&nbsp;erlang.now:</p>

<pre>
iex(23)&gt; :erlang.now
{1425, 234553, 673975}
iex(22)&gt; :calendar.now_to_local_time(:erlang.now)
{{2015, 3, 1}, {12, 29, 11}}
</pre>

<p>You can turn a given number of seconds into days, hours, minutes, and seconds:</p>

<pre>
<span style="color:rgb(0, 134, 179)">:calendar</span>.seconds_to_daystime(<span style="color:rgb(0, 134, 179)">1_000_000</span>)</pre>

<p>You can see the difference between two times:</p>

<pre>
time1 <span style="color:rgb(167, 29, 93)">=</span> <span style="color:rgb(0, 134, 179)">:calendar</span>.local_time
<span style="color:rgb(150, 152, 150)"># wait a bit</span>
time2 <span style="color:rgb(167, 29, 93)">=</span> <span style="color:rgb(0, 134, 179)">:calendar</span>.local_time
<span style="color:rgb(0, 134, 179)">:calendar</span>.time_difference(time1, time2) <span style="color:rgb(150, 152, 150)"># note that the later time comes second</span></pre>

<p>You can see how many seconds have passed today:</p>

<pre>
iex(<span style="color:rgb(0, 134, 179)">29</span>)<span style="color:rgb(167, 29, 93)">&gt;</span> {date, time} <span style="color:rgb(167, 29, 93)">=</span> <span style="color:rgb(0, 134, 179)">:calendar</span>.local_time
{{<span style="color:rgb(0, 134, 179)">2015</span>, <span style="color:rgb(0, 134, 179)">3</span>, <span style="color:rgb(0, 134, 179)">1</span>}, {<span style="color:rgb(0, 134, 179)">12</span>, <span style="color:rgb(0, 134, 179)">33</span>, <span style="color:rgb(0, 134, 179)">58</span>}}
iex(<span style="color:rgb(0, 134, 179)">30</span>)<span style="color:rgb(167, 29, 93)">&gt;</span> <span style="color:rgb(0, 134, 179)">:calendar</span>.time_to_seconds(time)
<span style="color:rgb(0, 134, 179)">45238</span></pre>

<p>You can get the universal time reported by the underlying operating system:</p>

<pre>
utime <span style="color:rgb(167, 29, 93)">=</span> <span style="color:rgb(0, 134, 179)">:calendar</span>.universal_time</pre>

<p>And you can convert the universal time to the local time:</p>

<pre>
<span style="color:rgb(0, 134, 179)">:calendar</span>.universal_time_to_local_time(utime)</pre>

<p>Finally, you can check to see if a date is valid:</p>

<pre>
iex(<span style="color:rgb(0, 134, 179)">34</span>)<span style="color:rgb(167, 29, 93)">&gt;</span> <span style="color:rgb(0, 134, 179)">:calendar</span>.valid_date({<span style="color:rgb(0, 134, 179)">2014</span>, <span style="color:rgb(0, 134, 179)">02</span>, <span style="color:rgb(0, 134, 179)">29</span>})
<span style="color:rgb(0, 134, 179)">false</span>
iex(<span style="color:rgb(0, 134, 179)">35</span>)<span style="color:rgb(167, 29, 93)">&gt;</span> <span style="color:rgb(0, 134, 179)">:calendar</span>.valid_date({<span style="color:rgb(0, 134, 179)">2012</span>, <span style="color:rgb(0, 134, 179)">02</span>, <span style="color:rgb(0, 134, 179)">29</span>})
<span style="color:rgb(0, 134, 179)">true</span></pre>

<h2>Resources</h2>

<ul>
	<li><a href="http://erlang.org/doc/man/calendar.html">calendar</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=45875">144_erlangs_calendar_module.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=45876">144_erlangs_calendar_module.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-f49a420e1fe7a98b74b854396f7e4a443a2af0e7</guid>
      <pubDate>Sun, 01 Mar 2015 14:31:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/45875/144_erlangs_calendar_module.mp4" length="15252186" type="video/mp4"/>
      <itunes:subtitle>Interacting with Erlang's native date and time types.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[143 - phoenix_generator]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=703</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>A project that adds code generation to Phoenix for building models, controllers, templates, and channels.</p>

<p>---</p>

<h1>Episode 143: Phoenix Generator</h1>

<p>A couple of people have started to build generators for phoenix, in the style of rails&#39; generators. Today I&#39;m going to look at the&nbsp;phoenix_generator&nbsp;project:</p>

<h2>Project</h2>

<p>I&#39;ve got a Phoenix 0.9 project prepared:</p>

<pre>
hub clone knewter/phoenix_blog
<span style="color:rgb(0, 134, 179)">cd</span> phoenix_blog
git checkout start
mix deps.get
mix compile</pre>

<p>Now this is just a vanilla phoenix project that includes the&nbsp;phoenix_generator&nbsp;package. We can get started with ecto model generation with the&nbsp;jumpstart&nbsp;generator:</p>

<pre>
mix phoenix.gen.jumpstart</pre>

<p>Next, we&#39;ll configure the database connection (I have these env vars set up - obviously this is different for you). Open up&nbsp;config/config.exs:</p>

<pre>
config <span style="color:rgb(0, 134, 179)">:phoenix_blog</span>, PhoenixBlog.Repo,
  <span style="color:rgb(0, 134, 179)">database:</span> <span style="color:rgb(223, 80, 0)">&quot;phoenix_blog_repo&quot;</span>,
  <span style="color:rgb(0, 134, 179)">username:</span> System.get_env(<span style="color:rgb(223, 80, 0)">&quot;PHOENIX_BLOG_DB_USERNAME&quot;</span>),
  <span style="color:rgb(0, 134, 179)">password:</span> System.get_env(<span style="color:rgb(223, 80, 0)">&quot;PHOENIX_BLOG_DB_PASSWORD&quot;</span>),
  <span style="color:rgb(0, 134, 179)">hostname:</span> <span style="color:rgb(223, 80, 0)">&quot;localhost&quot;</span></pre>

<p>Next we&#39;ll create the database:</p>

<pre>
mix ecto.create</pre>

<p>Next, we&#39;ll scaffold a post:</p>

<pre>
mix phoenix.gen.scaffold post title:string body:string</pre>

<p>That generated some scaffolding for us, and told us to migrate. So we&#39;ll do that:</p>

<pre>
mix ecto.migrate</pre>

<p>And now we can just run it and see what this scaffolding afforded us:</p>

<pre>
mix phoenix.server</pre>

<p>((( open up http://localhost:4000/posts )))</p>

<p>So cool, it&#39;s relatively simple to build out CRUD apps in Phoenix now. That&#39;s pretty neat. Let&#39;s see what the scaffolding looked like. Open up&nbsp;web/router.ex:</p>

<pre>
  scope <span style="color:rgb(223, 80, 0)">&quot;/&quot;</span>, PhoenixBlog <span style="color:rgb(167, 29, 93)">do</span>
    pipe_through <span style="color:rgb(0, 134, 179)">:browser</span> <span style="color:rgb(150, 152, 150)"># Use the default browser stack</span>

    get <span style="color:rgb(223, 80, 0)">&quot;/&quot;</span>, PageController, <span style="color:rgb(0, 134, 179)">:index</span>
    resources <span style="color:rgb(223, 80, 0)">&quot;/posts&quot;</span>, PostController <span style="color:rgb(150, 152, 150)"># OK so we got our posts route</span>
  <span style="color:rgb(167, 29, 93)">end</span></pre>

<p>Next open up&nbsp;web/controllers/post_controller.ex:</p>

<pre>
<span style="color:rgb(167, 29, 93)">defmodule</span> <span style="color:rgb(121, 93, 163)">PhoenixBlog.PostController</span> <span style="color:rgb(167, 29, 93)">do</span>
  <span style="color:rgb(167, 29, 93)">use</span> Phoenix.Controller

  plug <span style="color:rgb(0, 134, 179)">:action</span>

<span style="color:rgb(150, 152, 150)">  # So here&#39;s something neat - the generated controller stores the repo and</span>
<span style="color:rgb(150, 152, 150)">  # model in module attributes.  There&#39;s no magic here, which is nice :)</span>
  @repo PhoenixBlog.Repo
  @model PhoenixBlog.Post
  @resource_path <span style="color:rgb(223, 80, 0)">&quot;posts&quot;</span>

  <span style="color:rgb(167, 29, 93)">def</span> index(conn, _params) <span style="color:rgb(167, 29, 93)">do</span>
    render conn, <span style="color:rgb(0, 134, 179)">:index</span>, <span style="color:rgb(0, 134, 179)">resources:</span> @repo.all(@model)
  <span style="color:rgb(167, 29, 93)">end</span>

  <span style="color:rgb(167, 29, 93)">def</span> show(conn, params) <span style="color:rgb(167, 29, 93)">do</span>
    render conn, <span style="color:rgb(0, 134, 179)">:show</span>, <span style="color:rgb(0, 134, 179)">resource:</span> @repo.get(@model, params[<span style="color:rgb(223, 80, 0)">&quot;id&quot;</span>])
  <span style="color:rgb(167, 29, 93)">end</span>

  <span style="color:rgb(167, 29, 93)">def</span> new(conn, _params) <span style="color:rgb(167, 29, 93)">do</span>
    render conn, <span style="color:rgb(0, 134, 179)">:new</span>, <span style="color:rgb(0, 134, 179)">resource:</span> @model.__struct__
  <span style="color:rgb(167, 29, 93)">end</span>

  <span style="color:rgb(167, 29, 93)">def</span> edit(conn, params) <span style="color:rgb(167, 29, 93)">do</span>
    render conn, <span style="color:rgb(0, 134, 179)">:edit</span>, <span style="color:rgb(0, 134, 179)">resource:</span> @repo.get(@model, params[<span style="color:rgb(223, 80, 0)">&quot;id&quot;</span>])
  <span style="color:rgb(167, 29, 93)">end</span>

  <span style="color:rgb(167, 29, 93)">def</span> create(conn, params) <span style="color:rgb(167, 29, 93)">do</span>
<span style="color:rgb(150, 152, 150)">    # So here they&#39;re using the new Ecto changeset bits.  These landed in early</span>
<span style="color:rgb(150, 152, 150)">    # January and I haven&#39;t looked into them much yet.</span>
    changeset <span style="color:rgb(167, 29, 93)">=</span> @model.changeset(@model.__struct__, params[<span style="color:rgb(223, 80, 0)">&quot;resource&quot;</span>])
    <span style="color:rgb(167, 29, 93)">if</span> changeset.valid? <span style="color:rgb(167, 29, 93)">do</span>
      resource <span style="color:rgb(167, 29, 93)">=</span> @repo.insert(changeset)
      render conn, <span style="color:rgb(0, 134, 179)">:index</span>, <span style="color:rgb(0, 134, 179)">resources:</span> @repo.all(@model)
    <span style="color:rgb(167, 29, 93)">else</span>
      render conn, <span style="color:rgb(0, 134, 179)">:new</span>, <span style="color:rgb(0, 134, 179)">resource:</span> Map.merge(@model.__struct__, params[<span style="color:rgb(223, 80, 0)">&quot;resource&quot;</span>])
    <span style="color:rgb(167, 29, 93)">end</span>
  <span style="color:rgb(167, 29, 93)">end</span>

  <span style="color:rgb(167, 29, 93)">def</span> update(conn, params) <span style="color:rgb(167, 29, 93)">do</span>
    changeset <span style="color:rgb(167, 29, 93)">=</span> @model.changeset(@repo.get(@model, params[<span style="color:rgb(223, 80, 0)">&quot;id&quot;</span>]), params[<span style="color:rgb(223, 80, 0)">&quot;resource&quot;</span>])
    <span style="color:rgb(167, 29, 93)">if</span> changeset.valid? <span style="color:rgb(167, 29, 93)">do</span>
      resource <span style="color:rgb(167, 29, 93)">=</span> @repo.update(changeset)
      render conn, <span style="color:rgb(0, 134, 179)">:show</span>, <span style="color:rgb(0, 134, 179)">resource:</span> resource
    <span style="color:rgb(167, 29, 93)">else</span>
<span style="color:rgb(150, 152, 150)">    # This is probably not right - This should render the edit template I would</span>
<span style="color:rgb(150, 152, 150)">    # think.</span>
      render conn, <span style="color:rgb(0, 134, 179)">:new</span>, <span style="color:rgb(0, 134, 179)">resource:</span> Map.merge(@repo.get(@model, params[<span style="color:rgb(223, 80, 0)">&quot;id&quot;</span>]), params[<span style="color:rgb(223, 80, 0)">&quot;resource&quot;</span>])
    <span style="color:rgb(167, 29, 93)">end</span>
  <span style="color:rgb(167, 29, 93)">end</span>

  <span style="color:rgb(167, 29, 93)">def</span> delete(conn, params) <span style="color:rgb(167, 29, 93)">do</span>
    resource <span style="color:rgb(167, 29, 93)">=</span> @repo.get(@model, params[<span style="color:rgb(223, 80, 0)">&quot;id&quot;</span>])
    @repo.delete resource
    redirect conn, <span style="color:rgb(0, 134, 179)">to:</span> <span style="color:rgb(223, 80, 0)">&quot;/&quot;</span> <span style="color:rgb(167, 29, 93)">&lt;&gt;</span> @resource_path
  <span style="color:rgb(167, 29, 93)">end</span>



<span style="color:rgb(167, 29, 93)">end</span></pre>

<p>OK, so that&#39;s a neat controller. Let&#39;s check out the model before we move on to the template:</p>

<pre>
<span style="color:rgb(167, 29, 93)">defmodule</span> <span style="color:rgb(121, 93, 163)">PhoenixBlog.Post</span> <span style="color:rgb(167, 29, 93)">do</span>
  <span style="color:rgb(167, 29, 93)">use</span> Ecto.Model

  schema <span style="color:rgb(223, 80, 0)">&quot;posts&quot;</span> <span style="color:rgb(167, 29, 93)">do</span>
    field <span style="color:rgb(0, 134, 179)">:title</span>, <span style="color:rgb(0, 134, 179)">:string</span>
    field <span style="color:rgb(0, 134, 179)">:body</span>, <span style="color:rgb(0, 134, 179)">:string</span>
    <span style="color:rgb(0, 134, 179)">false</span> <span style="color:rgb(150, 152, 150)"># I&#39;m not sure what the false at the end of this block does</span>
  <span style="color:rgb(167, 29, 93)">end</span>

  <span style="color:rgb(167, 29, 93)">def</span> changeset(resource, params) <span style="color:rgb(167, 29, 93)">do</span>
<span style="color:rgb(150, 152, 150)">    # And I need to read up on the changeset stuff still</span>
    params
    <span style="color:rgb(167, 29, 93)">|</span><span style="color:rgb(167, 29, 93)">&gt;</span> cast resource, [], [<span style="color:rgb(223, 80, 0)">&quot;title&quot;</span>, <span style="color:rgb(223, 80, 0)">&quot;body&quot;</span>]
  <span style="color:rgb(167, 29, 93)">end</span>

<span style="color:rgb(167, 29, 93)">end</span></pre>

<p>OK, so what does the template look like? Here&#39;s the index:</p>

<pre>
&lt;div class=&quot;well&quot;&gt;
  &lt;%= render __MODULE__, &quot;_list.html&quot;, resources: @resources,
      resource_name: resource_name, action: :index %&gt;
  &lt;a class=&quot;btn btn-primary&quot; href=&quot;/&lt;%= resource_name %&gt;/new&quot;&gt;New&lt;/a&gt;
&lt;/div&gt;
</pre>

<p>OK, so basically render a list and a button. Here&#39;s the list partial:</p>

<pre>
&lt;%= unless Enum.any? @resources do %&gt;
  &lt;%= if @action == :index do %&gt;
    There are no resources yet.
  &lt;% else %&gt;
    404, not found.&lt;br&gt;&lt;br&gt;
  &lt;% end %&gt;
&lt;% else %&gt;
  &lt;% keys = List.first(@resources) |&gt; Map.from_struct |&gt; Map.delete(:__state__) |&gt; Map.keys %&gt;
  &lt;table class=&quot;table table-striped table-hover&quot;&gt;
    &lt;thead&gt;
      &lt;tr&gt;
        &lt;%= for key &lt;- keys do %&gt;
          &lt;th&gt;&lt;%= key %&gt;&lt;/th&gt;
        &lt;% end %&gt;
        &lt;%= if @action == :index do %&gt;
          &lt;th&gt;&lt;/th&gt;
        &lt;% end %&gt;
        &lt;th&gt;&lt;/th&gt;
      &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
    &lt;%= for resource &lt;- @resources do %&gt;
      &lt;% resource = Map.from_struct(resource) %&gt;
      &lt;tr&gt;
        &lt;%= for key &lt;- keys do %&gt;
          &lt;td&gt;&lt;%= resource[key] %&gt;&lt;/td&gt;
        &lt;% end %&gt;
        &lt;td&gt;
          &lt;a class=&quot;btn btn-warning&quot; href=&quot;/&lt;%= resource_name %&gt;/&lt;%= resource[:id] %&gt;/edit&quot;&gt;Edit&lt;/a&gt;
        &lt;/td&gt;
        &lt;%= if @action == :index do %&gt;
          &lt;td&gt;
            &lt;a class=&quot;btn btn-primary&quot; href=&quot;/&lt;%= resource_name %&gt;/&lt;%= resource[:id] %&gt;&quot;&gt;Show&lt;/a&gt;
          &lt;/td&gt;
        &lt;% else %&gt;
          &lt;td&gt;
            &lt;form class=&quot;form-inline&quot; action=&quot;/&lt;%= resource_name %&gt;/&lt;%= resource[:id] %&gt;&quot; method=&quot;POST&quot;&gt;
              &lt;input name=&quot;_method&quot; type=&quot;hidden&quot; value=&quot;delete&quot; /&gt;
              &lt;input type=&quot;hidden&quot; name=&quot;_csrf_token&quot; value=&quot;&lt;%= csrf_token(@conn) %&gt;&quot;&gt;
              &lt;input class=&quot;btn btn-danger&quot; type=&quot;submit&quot; value=&quot;Delete&quot;&gt;
            &lt;/form&gt;
          &lt;/td&gt;
        &lt;% end %&gt;
      &lt;/tr&gt;
    &lt;% end %&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;% end %&gt;
</pre>

<p>Alright, basically a few list comprehensions and some eex. I&#39;d also like to see the form just for my own curiosity:</p>

<pre>
&lt;%= if @action == :create do %&gt;
  &lt;form action=&quot;/&lt;%= resource_name %&gt;&quot; method=&quot;POST&quot;&gt;
&lt;% else %&gt;
  &lt;form action=&quot;/&lt;%= resource_name %&gt;/&lt;%= @resource.id %&gt;&quot; method=&quot;POST&quot;&gt;
  &lt;input name=&quot;_method&quot; type=&quot;hidden&quot; value=&quot;patch&quot; /&gt;
&lt;% end %&gt;
  &lt;input type=&quot;hidden&quot; name=&quot;_csrf_token&quot; value=&quot;&lt;%= csrf_token(@conn) %&gt;&quot;&gt;
  &lt;% resource = Map.from_struct @resource %&gt;
  &lt;% fields =  Map.from_struct(@resource) |&gt; Map.delete(:__state__) |&gt; Map.keys %&gt;
  &lt;%= for field &lt;- fields, field != :id do %&gt;
    &lt;div class=&quot;form-group&quot;&gt;
      &lt;label for=&quot;resource_&lt;%= field %&gt;&quot;&gt;&lt;%= field %&gt;&lt;/label&gt;
      &lt;input type=&quot;text&quot; class=&quot;form-control&quot; name=&quot;resource[&lt;%= field %&gt;]&quot;
             id=&quot;resource_&lt;%= field %&gt;&quot; value=&quot;&lt;%= resource[field]%&gt;&quot; &gt;
    &lt;/div&gt;
  &lt;% end %&gt;
  &lt;%= if @action == :create do %&gt;
    &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;Create&lt;/button&gt;
    &lt;a class=&quot;btn&quot; href=&quot;/&lt;%= resource_name %&gt;&quot;&gt;Cancel&lt;/a&gt;
  &lt;% else %&gt;
    &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;Save&lt;/button&gt;
    &lt;a class=&quot;btn&quot; href=&quot;/&lt;%= resource_name %&gt;/&lt;%= @resource.id %&gt;&quot;&gt;Cancel&lt;/a&gt;
  &lt;% end %&gt;
&lt;/form&gt;
</pre>

<p>Alright so it determines what fields to add at runtime rather than at generation time, which is why the body came before the title in the form.</p>

<h2>Summary</h2>

<p>So that&#39;s all I really wanted to show off today from this library. It&#39;s also got a generator that will build a whole little chatroom application for you, which looks pretty cool. See you soon!</p>

<h2>Resources</h2>

<ul>
	<li><a href="https://github.com/etufe/phoenix_generator">etufe/phoenix_generator</a></li>
	<li><a href="https://github.com/elixir-lang/ecto/blob/master/lib/ecto/changeset.ex">Ecto Changeset</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=45267">143_phoenix_generator.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=45268">143_phoenix_generator.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-f41f618d39f1ecd5a003c8b2a3622c139a0c3554</guid>
      <pubDate>Fri, 20 Feb 2015 20:10:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/45267/143_phoenix_generator.mp4" length="50345445" type="video/mp4"/>
      <itunes:subtitle>A project that adds code generation to Phoenix for building models, controllers, templates, and channels.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[142 - escript]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=698</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Building quick &#39;binaries&#39; after a fashion using Elixir&#39;s tooling. (NOTE: They aren&#39;t binaries at all, but they&#39;re mostly redistributable)</p>

<p><strong>Resources</strong></p>

<ul>
	<li><a href="http://elixir-lang.org/docs/master/mix/Mix.Tasks.Escript.Build.html">Mix.Tasks.Escript.Build Documentation</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=45000">142_escript.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=45001">142_escript.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-beaeb46bd3c742812b96552df89b9e2521c7599d</guid>
      <pubDate>Tue, 17 Feb 2015 20:56:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/45000/142_escript.mp4" length="18252513" type="video/mp4"/>
      <itunes:subtitle>Building quick 'binaries' after a fashion using Elixir's tooling.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[141 - Set]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=696</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Elixir ships with a Set behaviour, and a default HashSet implementation.</p>

<p><strong>Resources</strong></p>

<ul>
	<li><a href="http://elixir-lang.org/docs/stable/elixir/Set.html">Set</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=44739">141_Set.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=44740">141_Set.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-6908aae4d850ee73b81ef2994a2c98b1bb01488e</guid>
      <pubDate>Wed, 11 Feb 2015 21:31:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/44740/141_Set.mp4" length="9924450" type="video/mp4"/>
      <itunes:subtitle>Elixir ships with a Set behaviour, and a default HashSet implementation.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[140 - gopher]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=695</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Using `goma`, which is essentially WebMachine for The Internet Gopher Protocol, to build an elixir-powered gopher server.</p>

<p><strong>Resources</strong></p>

<ul>
	<li><a href="https://github.com/beerriot/goma">beerriot/goma</a></li>
	<li><a href="http://tools.ietf.org/html/rfc1436">The Internet Gopher Protocol</a></li>
	<li><a href="https://github.com/basho/webmachine">basho/webmachine</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=44649">140_gopher.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=44650">140_gopher.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-2dfbeab1b57c04c1b95df9c248db85dfdacaa7e4</guid>
      <pubDate>Tue, 10 Feb 2015 21:35:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/44649/140_gopher.mp4" length="43261293" type="video/mp4"/>
      <itunes:subtitle>Using `goma`, which is essentially WebMachine for The Internet Gopher Protocol, to build an elixir-powered gopher server.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[139 - hexdocs]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=693</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Elixir&#39;s package manager, hex.pm, also provides a documentation server for elixir packages. &nbsp;We&#39;ll see how to push documentation up.</p>

<p><strong>Resources</strong></p>

<ul>
	<li><a href="http://hexdocs.pm">hexdocs.pm</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=44357">139_hexdocs.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=44358">139_hexdocs.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-87ef3d65563417c89fe166f34d92087bc9507d6c</guid>
      <pubDate>Thu, 05 Feb 2015 21:17:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/44357/139_hexdocs.mp4" length="21481025" type="video/mp4"/>
      <itunes:subtitle>Elixir's package manager, hex.pm, also provides a documentation server for elixir packages.  We'll see how to push documentation up.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[138 - Monitors and Links]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=692</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Two of the core building blocks that the Erlang VM provides. &nbsp;I&#39;d neglected discussing them until now. &nbsp;Oops.</p>

<p><strong>Resources</strong></p>

<ul>
	<li><a href="http://www.javalimit.com/2011/05/erlang-is-not-a-concurrent-functional-programming-language.html">Erlang is not a Concurrent Functional Programming Language</a></li>
	<li><a href="http://www.erlang.org/doc/man/erlang.html#monitor-2">monitor</a></li>
	<li><a href="http://www.erlang.org/doc/man/erlang.html#link-1">link</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=44174">138_Monitors_and_Links.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=44175">138_Monitors_and_Links.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-d9f0a938bff2bc69e69de65ad890d51af68ff229</guid>
      <pubDate>Tue, 03 Feb 2015 20:37:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/44174/138_Monitors_and_Links.mp4" length="20881305" type="video/mp4"/>
      <itunes:subtitle>Two of the core building blocks that the Erlang VM provides.  I'd neglected discussing them until now.  Oops.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[137 - Asterisk AGI with Elixir]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=691</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Building out an erlagi handler module in Elixir that interacts with a remote HTTP API.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=44053">137_Asterisk_AGI_with_Elixir.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=44054">137_Asterisk_AGI_with_Elixir.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-7948abbc366cb961c1105a329949426ba607bfc4</guid>
      <pubDate>Sun, 01 Feb 2015 13:02:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/44053/137_Asterisk_AGI_with_Elixir.mp4" length="19754302" type="video/mp4"/>
      <itunes:subtitle>Building out an erlagi handler module in Elixir that interacts with a remote HTTP API.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[136 - Interfacing with Asterisk]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=688</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Using the `erlagi` application from Elixir to control the logic of an extension in a PBX system via Asterisk&#39;s AGI protocol.</p>

<p><strong>Resources</strong></p>

<ul>
	<li><a href="http://www.asterisk.org/">Asterisk</a></li>
	<li><a href="http://www.asterisk.org/sites/asterisk/files/mce_files/documents/asterisk_quick_start_guide.pdf">Asterisk Quick Start Guide</a></li>
	<li><a href="https://www.packtpub.com/books/content/primer-agi-asterisk-gateway-interface">A Primer to AGI</a></li>
	<li><a href="https://github.com/knewter/erlagi">knewter/erlagi</a>&nbsp;- specifically the `feature/rebar3` branch</li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=44016">136_Interfacing_with_Asterisk.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=44017">136_Interfacing_with_Asterisk.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-f2c8a30c643e48b247bbd02f326617ef9edb2feb</guid>
      <pubDate>Sat, 31 Jan 2015 16:35:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/44016/136_Interfacing_with_Asterisk.mp4" length="48947940" type="video/mp4"/>
      <itunes:subtitle>Using the `erlagi` application from Elixir to control the logic of an extension in a PBX system via Asterisk's AGI protocol.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[135 - Benchwarmer]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=680</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Another benchmarking tool, with a little bit less setup required.</p>

<p><strong>Resources</strong></p>

<ul>
	<li><a href="https://github.com/mroth/benchwarmer">mroth/benchwarmer</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=43632">135_Benchwarmer.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=43633">135_Benchwarmer.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-bcc38614b2c6a209b36584b6ef895c758e4cd099</guid>
      <pubDate>Thu, 22 Jan 2015 20:23:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/43632/135_Benchwarmer.mp4" length="9990777" type="video/mp4"/>
      <itunes:subtitle>Another benchmarking tool, with a little bit less setup required.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[134 - Elastic Search with Tirexs]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=679</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>An easy way to interact with ElasticSearch.</p>

<p><strong>Resources</strong></p>

<ul>
	<li><a href="http://www.zohaib.me/elasticsearch-from-elixir-and-docker/">Using ElasticSearch in Elixir</a></li>
	<li><a href="https://github.com/zabirauf/tirexs">zabirauf/tirexs</a></li>
	<li><a href="http://www.elasticsearch.org/">ElasticSearch</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=43510">134_Elastic_Search_with_Tirexs.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=43511">134_Elastic_Search_with_Tirexs.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-d7d73146694311e2ba95ad13d61a3bcc80356e11</guid>
      <pubDate>Mon, 19 Jan 2015 21:04:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/43510/134_Elastic_Search_with_Tirexs.mp4" length="47534482" type="video/mp4"/>
      <itunes:subtitle>An easy way to interact with ElasticSearch.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[133 - Boltun: Postgres Listen Notify]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=678</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>An Elixir package providing fantastically simple support for&nbsp;Postgres&#39;s built-in pubsub notifications.</p>

<p><strong>Resources</strong></p>

<ul>
	<li><a href="http://www.postgresql.org/docs/9.1/static/sql-notify.html">Postgres&#39; sql-notify documentation</a></li>
	<li><a href="https://github.com/briksoftware/boltun">briksoftware/boltun</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=43373">133_Boltun_Postgres_Listen_Notify.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=43374">133_Boltun_Postgres_Listen_Notify.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-d1948a5a47138c34e463f8df906c62991c49037f</guid>
      <pubDate>Sat, 17 Jan 2015 21:34:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/43373/133_Boltun_Postgres_Listen_Notify.mp4" length="38842550" type="video/mp4"/>
      <itunes:subtitle>An Elixir package providing fantastically simple support for Postgres's built-in pubsub notifications.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[132 - Randomness in the Erlang VM]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=671</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>An exploration of where our randomness in Tetris went so horribly wrong, along with an exposition<br />
of how to think about which process your code is running in, and why that&#39;s important.</p>

<p><strong>Resources</strong></p>

<ul>
	<li><a href="http://erlang.or/doc/mans/random.html">Erlang&#39;s random</a></li>
	<li><a href="http://github.com/knewter/extris_web">knewter/extris_web</a></li>
	<li><a href="http://github.com/knewter/extris">knewter/extris</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=43108">132_Randomness_in_the_Erlang_VM.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=43109">132_Randomness_in_the_Erlang_VM.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-e4ddf485e1b49e9a33f7e8e848edb265e5fd830c</guid>
      <pubDate>Tue, 13 Jan 2015 20:39:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/43108/132_Randomness_in_the_Erlang_VM.mp4" length="28222024" type="video/mp4"/>
      <itunes:subtitle>An exploration of where our randomness in Tetris went so horribly wrong, along with an exposition&#13;
of how to think about which process your code is running in, and why that's important.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[131 - ExProf]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=669</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>An Elixir profiler, useful for finding where your program is spending its time.</p>

<p><strong>Resources</strong></p>

<ul>
	<li><a href="http://github.com/parroty/exprof">parroty/exprof</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=42734">131_ExProf.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=42735">131_ExProf.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=42736">131_slow_reverse.tar.gz</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-5e3092780d751537d1e6d8660cdc24ce5e09bab5</guid>
      <pubDate>Wed, 07 Jan 2015 00:52:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/42734/131_ExProf.mp4" length="16985968" type="video/mp4"/>
      <itunes:subtitle>An Elixir profiler, useful for finding where your program is spending its time.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[130 - Extris Web Client]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=663</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Using Phoenix&#39;s websockets to build a JavaScript canvas-based renderer and interaction module for Extris games running in processes on the server.</p>

<p><strong>Resources</strong></p>

<ul>
	<li><a href="http://phoenixframework.org">Phoenix</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=42296">130_Extris_Web_Client.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=42297">130_extris.js</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=42298">130_Extris_Web_Client.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-624c28e2f55980e246502e699e1b07cf2b2c66b2</guid>
      <pubDate>Sat, 27 Dec 2014 20:55:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/42296/130_Extris_Web_Client.mp4" length="96116572" type="video/mp4"/>
      <itunes:subtitle>Using Phoenix's websockets to build a JavaScript canvas-based renderer and interaction module for Extris games running in processes on the server.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[129 - egd]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=662</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>A module in the Erlang Standard Library meant for doing basic graphics.</p>

<p>Resources</p>

<ul>
	<li><a href="http://www.erlang.org/doc/man/egd.html">egd</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=42006">129_egd.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=42007">129_image.exs</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=42008">129_egd.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-1dcdd2c2d0b9773eed1bd43b88c26b6ea6973ae2</guid>
      <pubDate>Mon, 22 Dec 2014 20:04:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/42006/129_egd.mp4" length="11969666" type="video/mp4"/>
      <itunes:subtitle>A module in the Erlang Standard Library meant for doing basic graphics.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[128 - Managing Docker]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=659</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Programmatically interacting with Docker using&nbsp;Elixir and erldocker.</p>

<p><strong>Resources</strong></p>

<ul>
	<li><a href="http://www.docker.com">Docker</a></li>
	<li><a href="https://github.com/tsloughter/erldocker">erldocker</a></li>
	<li><a href="http://blog.trifork.com/2013/12/24/docker-from-a-distance-the-remote-api/">Docker from a Distance</a></li>
	<li><a href="https://github.com/docker/docker/issues/9428">Docker bug - database locked, when built with go 1.4</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=41829">128_Managing_Docker.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=41830">128_Managing_Docker.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-9f8495ceada8026321e6ff0a2853c31cfd9eb241</guid>
      <pubDate>Sat, 20 Dec 2014 12:07:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/41830/128_Managing_Docker.mp4" length="28316104" type="video/mp4"/>
      <itunes:subtitle>Programmatically interacting with Docker using Elixir and erldocker.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[127 - SSH Client Commands]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=657</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Becoming an SSH client and sending commands to an SSH server with Elixir.</p>

<p><strong>Resources</strong></p>

<ul>
	<li><a href="http://www.erlang.org/doc/apps/ssh/using_ssh.html">Using ssh</a></li>
	<li><a href="http://www.erlang.org/doc/man/ssh.html">ssh</a></li>
	<li><a href="http://www.erlang.org/doc/man/ssh_connection.html">ssh_connection</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=41616">127_SSH_Client_Commands.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=41617">127_SSH_Client_Commands.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-e233171442d1ae0754eacc4696e939640b5bfe20</guid>
      <pubDate>Tue, 16 Dec 2014 21:03:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/41617/127_SSH_Client_Commands.mp4" length="8889160" type="video/mp4"/>
      <itunes:subtitle>Becoming an SSH client and sending commands to an SSH server with Elixir.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[126 - Piping Into Elixir]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=654</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Handling typical unix-script style stdin and stdout pipes trivially from your Elixir scripts.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=41108">126_pipe.exs</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=41109">126_Piping_Into_Elixir.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=41110">126_Piping_Into_Elixir.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-a87e5eb201b180640c670543ba086c7b7d4a9f72</guid>
      <pubDate>Tue, 09 Dec 2014 18:59:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/41110/126_Piping_Into_Elixir.mp4" length="7559584" type="video/mp4"/>
      <itunes:subtitle>Handling typical unix-script style stdin and stdout pipes trivially from your Elixir scripts.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[125 - Dialyzer]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=645</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Letting the computer (rather than logs or users) tell you when you&#39;ve written crap code.</p>

<p><strong>Resources</strong></p>

<ul>
	<li><a href="http://www.erlang.org/doc/man/dialyzer.html">Dialyzer</a></li>
	<li><a href="https://github.com/knewter/typespecs_playground">knewter/typespecs_playground</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=40788">125_Dialyzer.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=40789">125_typespecs_playground.tar.gz</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=40790">125_Dialyzer.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-ee99fa700b78a267fa1f8c55f8c01511456df35f</guid>
      <pubDate>Wed, 03 Dec 2014 23:33:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/40788/125_Dialyzer.mp4" length="30691838" type="video/mp4"/>
      <itunes:subtitle>Letting the computer (rather than logs or users) tell you when you've written crap code.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[124 - Typespecs]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=643</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Layering type information over your functions to aid users and static analysis tools, and to catch errors.</p>
<p><strong>Resources</strong></p>
<ul>
<li><a href="http://elixir-lang.org/docs/stable/elixir/Kernel.Typespec.html">Kernel.Typespec</a></li>
<li><a href="http://stackoverflow.com/questions/23622096/elixir-defining-type-specification-for-maps-hashdicts">Defining interesting types based on maps</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=40619">124_typespecs_playground.tar.gz</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=40620">124_Typespecs.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=40621">124_Typespecs.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-c00cd6d759f761b0a0b742de63f9c29a96a6f699</guid>
      <pubDate>Mon, 01 Dec 2014 07:59:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/40620/124_Typespecs.mp4" length="21023281" type="video/mp4"/>
      <itunes:subtitle>Layering type information over your functions to aid users and static analysis tools, and to catch errors.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[123 - SDL Extris]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=638</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Writing a renderer for the Tetris clone using SDL.</p>
<p><strong>Resources</strong></p>
<ul>
<li><a href="http://github.com/knewter/extris">knewter/extris</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=40311">123_extris.tar.gz</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=40312">123_SDL_Extris.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=40313">123_SDL_Extris.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-927333737693cfb77a9706a96783b0b26e0a5224</guid>
      <pubDate>Tue, 25 Nov 2014 20:44:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/40313/123_SDL_Extris.mp4" length="124180716" type="video/mp4"/>
      <itunes:subtitle>Writing a renderer for the Tetris clone using SDL.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[122 - SDL]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=637</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Using the SDL library for graphics from your Elixir programs.</p>
<p><strong>Resources</strong></p>
<ul>
<li><a href="https://github.com/ninenines/esdl2">ninenines/esdl2</a></li>
<li><a href="http://lazyfoo.net/tutorials/SDL/index.php">Lazy Foo' Productions SDL intro</a></li>
<li><a href="https://wiki.libsdl.org/SDL_RenderPresent">SDL_RenderPresent</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=40191">122_SDL.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=40192">122_SDL.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=40193">122_sdl_playground.tar.gz</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-e37cbee9e0fe7e7d1788f953d18f89b6aa406ce5</guid>
      <pubDate>Sat, 22 Nov 2014 17:16:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/40192/122_SDL.mp4" length="34985286" type="video/mp4"/>
      <itunes:subtitle>Using the SDL library for graphics from your Elixir programs.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[121 - WxExtris, Part 8]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=634</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Test-driven implementation of clearing full lines off of the board.</p>
<p>Resources</p>
<ul>
<li><a href="http://github.com/knewter/extris">knewter/extris</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=40082">121_Wx_Extris_Part_8.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=40083">121_Wx_Extris_Part_8.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=40084">121_extris.tar.gz</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-4ee0aac740bec073ce1bb91ff3ff5929c5c828b7</guid>
      <pubDate>Thu, 20 Nov 2014 08:16:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/40083/121_Wx_Extris_Part_8.mp4" length="41294207" type="video/mp4"/>
      <itunes:subtitle>Test-driven implementation of clearing full lines off of the board.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[120 - WxExtris, Part 7]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=631</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Introducing collision detection and cleaning up the renderer / game board data structure.</p>
<p><strong>Resources</strong></p>
<ul>
<li><a href="http://github.com/knewter/extris">knewter/extris</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=39745">120_Wx_Extris_Part_7.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=39746">120_extris.tar.gz</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=39929">120_Wx_Extris_Part_7.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-2f8286bdd29e9bb7d86e9676638a666c86a1ff8e</guid>
      <pubDate>Fri, 14 Nov 2014 21:37:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/39929/120_Wx_Extris_Part_7.mp4" length="304754733" type="video/mp4"/>
      <itunes:subtitle>Introducing collision detection and cleaning up the renderer / game board data structure.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[119 - WxExtris Part 6]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=627</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Introducing multiple processes into the game, and running the render loop separately from the game logic.</p>
<p><strong>Resources</strong></p>
<ul>
<li><a href="http://github.com/knewter/extris">knewter/extris</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=39396">119_Wx_Extris_Part_6.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=39397">119_extris.tar.gz</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=39398">119_Wx_Extris_Part_6.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-6a46442be4571a93705954a582c5885a497ff685</guid>
      <pubDate>Thu, 06 Nov 2014 23:22:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/39396/119_Wx_Extris_Part_6.mp4" length="76571057" type="video/mp4"/>
      <itunes:subtitle>Introducing multiple processes into the game, and running the render loop separately from the game logic.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[118 - WxExtris Part 5]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=624</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Defining the bottom game board boundary and providing the next shape when needed.</p>
<p><strong>Resources</strong></p>
<ul>
<li><a href="http://github.com/knewter/extris">knewter/extris</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=38893">118_extris.tar.gz</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=38894">118_Wx_Extris_Part_5.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=38895">118_Wx_Extris_Part_5.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-f233bbfc33aa85e7832a11426671183d2d95dc55</guid>
      <pubDate>Sun, 02 Nov 2014 23:18:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/38895/118_Wx_Extris_Part_5.mp4" length="41116020" type="video/mp4"/>
      <itunes:subtitle>Defining the bottom game board boundary and providing the next shape when needed.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[117: Wx Extris Part 4 - Testing]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=622</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Writing some tests and implementing board boundary collision.</p>
<p><strong>Resources</strong></p>
<ul>
<li><a href="http://github.com/knewter/extris">knewter/extris</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=38885">117_extris.tar.gz</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=38886">117_Wx_Extris_Part_4_Testing.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=38887">117_Wx_Extris_Part_4_Testing.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-811a3aa5d8966503cc49ed3c9757055a5bcf9586</guid>
      <pubDate>Sun, 02 Nov 2014 21:23:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/38887/117_Wx_Extris_Part_4_Testing.mp4" length="85182614" type="video/mp4"/>
      <itunes:subtitle>Writing some tests and implementing board boundary collision.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[116 - Wx Extris Part 3: Refactoring]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=619</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Turning a gigantic module into something a little more sensible and well-factored.</p>
<p><strong>Resources</strong></p>
<ul>
<li><a href="http://github.com/knewter/extris">knewter/extris</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=38564">116_extris.tar.gz</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=38565">116_Wx_Extris_Part_3_Refactoring.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=38566">116_Wx_Extris_Part_3_Refactoring.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-fef031dde7b866f23950072bea13e731c590177f</guid>
      <pubDate>Tue, 28 Oct 2014 21:04:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/38565/116_Wx_Extris_Part_3_Refactoring.mp4" length="79518078" type="video/mp4"/>
      <itunes:subtitle>Turning a gigantic module into something a little more sensible and well-factored.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[115 - Wx Extris Continued]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=615</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Making pieces fall and drawing the game board.</p>
<p><strong>Resources</strong></p>
<ul>
<li><a href="http://github.com/knewter/extris">knewter/extris</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=38246">115_extris.tar.gz</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=38247">115_Wx_Extris_Continued.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=38248">115_Wx_Extris_Continued.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-9490d359b6f6480466e0d17fb0ceeb5025c70a7c</guid>
      <pubDate>Fri, 24 Oct 2014 07:41:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/38248/115_Wx_Extris_Continued.mp4" length="49987779" type="video/mp4"/>
      <itunes:subtitle>Making pieces fall and drawing the game board.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[114 - Wx Keyboard Events]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=613</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Handling keyboard input in a wx application.</p>
<p><strong>Resources</strong></p>
<ul>
<li><a href="https://github.com/knewter/extris">knewter/extris</a></li>
<li><a href="https://github.com/tylerneylon/termtris">tylerneylon/termtris</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=37985">114_Wx_Keyboard_Events.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=37986">114_extris.tar.gz</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=38022">114_Wx_Keyboard_Events.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-f3edf3f7c6d966f64791adb64d9e9cc6f3eca92a</guid>
      <pubDate>Sun, 19 Oct 2014 10:20:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/38022/114_Wx_Keyboard_Events.mp4" length="44064160" type="video/mp4"/>
      <itunes:subtitle>Handling keyboard input in a wx application.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[113 - Monitoring Network Traffic]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=610</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Using libpcap from Elixir to see the stream of data passing across your computer's network interface.</p>
<p><strong>Resources</strong></p>
<ul>
<li><a href="https://github.com/msantos/epcap">msantos/epcap</a></li>
<li><a href="https://github.com/msantos/procket">msantos/procket</a>&nbsp;- if you wanted to do a little more and you're on a BSD system (a Mac, for instance), this library might intrigue you.</li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=37786">113_Monitoring_Network_Traffic.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=37787">113_Monitoring_Network_Traffic.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-7fe2b76fd43d84e2c2f074f626c6360885b422ab</guid>
      <pubDate>Tue, 14 Oct 2014 19:11:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/37787/113_Monitoring_Network_Traffic.mp4" length="89438628" type="video/mp4"/>
      <itunes:subtitle>Using libpcap from Elixir to see the stream of data passing across your computer's network interface.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[112 - Benchfella]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=608</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>A pleasant-to-use benchmarking tool that includes graph output.</p>
<p><strong>Resources</strong></p>
<ul>
<li><a href="https://github.com/alco/benchfella">alco/benchfella</a></li>
<li><a href="https://github.com/pragdave/earmark">pragdave/earmark</a></li>
<li><a href="https://github.com/asaaki/discount.ex">asaaki/discount.ex</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=37585">112_benchfella.tar.gz</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=37586">112_Benchfella.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=37587">simple.md</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=37588">complex.md</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=37589">112_Benchfella.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-aa0ea81d95cc77daf72a85eb9a4d7b2cc14e32c5</guid>
      <pubDate>Fri, 10 Oct 2014 20:11:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/37589/112_Benchfella.mp4" length="24902572" type="video/mp4"/>
      <itunes:subtitle>A pleasant-to-use benchmarking tool that includes graph output.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[111 - ExTwitter, Part 2]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=604</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Streaming a Twitter search to the browser, because Phoenix Channels are meant to be paired with Elixir Streams, I promise.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=37188">111_ExTwitter_Part_2.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=37189">111_ExTwitter_Part_2.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-e8e5511796e5bc8f391ff65b4014adf8899e50f8</guid>
      <pubDate>Sun, 05 Oct 2014 21:34:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/37189/111_ExTwitter_Part_2.mp4" length="39584710" type="video/mp4"/>
      <itunes:subtitle>Streaming a Twitter search to the browser, because Phoenix Channels are meant to be paired with Elixir Streams, I promise.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[110 - ExTwitter]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=601</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>A library for interacting with the Twitter API, using standard requests or the streaming responses.</p>
<p><strong>Resources</strong></p>
<ul>
<li><a href="https://github.com/parroty/extwitter">parroty/extwitter</a></li>
<li><a href="https://github.com/tim/erlang-oauth">tim/erlang-oauth</a></li>
<li><a href="https://apps.twitter.com/">Twitter Apps Console</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=36828">110_ExTwitter.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=36829">110_ExTwitter.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-c89075095b1d46d4a13e2d11958d01656caf19ae</guid>
      <pubDate>Sun, 28 Sep 2014 20:31:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/36828/110_ExTwitter.mp4" length="54253955" type="video/mp4"/>
      <itunes:subtitle>A library for interacting with the Twitter API, using standard requests or the streaming responses.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[109 - Socket]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=598</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>A pleasant abstraction around `gen_tcp`, `gen_udp`, `gen_sctp`, and `ssl`.</p>
<p><strong>Resources</strong></p>
<ul>
<li><a href="https://github.com/meh/elixir-socket">meh/elixir-socket</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=36422">109_Socket.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=36423">109_Socket.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-083ba8cf5050fa6ce7eeb0af9491f43cbcc0ff43</guid>
      <pubDate>Tue, 23 Sep 2014 08:53:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/36422/109_Socket.mp4" length="34691938" type="video/mp4"/>
      <itunes:subtitle>A pleasant abstraction around `gen_tcp`, `gen_udp`, `gen_sctp`, and `ssl`.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[108 - Release Upgrades]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=597</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Upgrading an application in-place without losing the running state.</p>
<p><strong>Resources</strong></p>
<ul>
<li><a href="https://github.com/bitwalker/exrm">bitwalker/exrm</a></li>
<li><a href="https://github.com/knewter/ping_upgrade">knewter/ping_upgrade</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=36377">108_Release_Upgrades.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=36379">108_Release_Upgrades.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-c58f993cd7989a400eede8dd47a7af8d46a27d9f</guid>
      <pubDate>Mon, 22 Sep 2014 08:24:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/36377/108_Release_Upgrades.mp4" length="37282901" type="video/mp4"/>
      <itunes:subtitle>Upgrading an application in-place without losing the running state.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[107 - Phoenix Release]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=593</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Using `exrm` to build a release of the BEAM Toolbox webapp, for deployment.</p>
<p><strong>Resources</strong></p>
<ul>
<li><a href="https://github.com/lancehalvorsen/phoenix-guides/blob/master/deployment.md">Phoenix Guides</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=36086">107_Phoenix_Release.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=36087">107_Phoenix_Release.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-acf2a0f4cb183eb062a40a9598a9302c7a626f39</guid>
      <pubDate>Tue, 16 Sep 2014 21:39:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/36087/107_Phoenix_Release.mp4" length="34405264" type="video/mp4"/>
      <itunes:subtitle>Using `exrm` to build a release of the BEAM Toolbox webapp, for deployment.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[106 - Text Parsing]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=587</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Building a parser for a custom text format.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=35165">106_Text_Parsing.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=35166">sample_output.txt</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=35167">sample.txt</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=35168">106_text_parsing.tar.gz</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=35226">106_Text_Parsing.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-b8ac8701972a04a0cbd6b0c60bf492c2737bbbe0</guid>
      <pubDate>Wed, 03 Sep 2014 10:30:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/35165/106_Text_Parsing.mp4" length="91421933" type="video/mp4"/>
      <itunes:subtitle>Building a parser for a custom text format.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[105 - Farkov Chain]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=583</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Generating killer marketing strategies with Elixir.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=34807">105_Farkov_Chain.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=34808">105_Farkov_Chain.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-c665b632229ab6dc424973039ae636f48e4890be</guid>
      <pubDate>Wed, 27 Aug 2014 21:50:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/34807/105_Farkov_Chain.mp4" length="74288781" type="video/mp4"/>
      <itunes:subtitle>Generating killer marketing strategies with Elixir.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[104: Ruby to Elixir via BERT-RPC]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=580</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Trivial interop between Ruby and Elixir processes using BERT-RPC.</p>
<p><strong>Resources</strong></p>
<ul>
<li><a href="http://bert-rpc.org/">BERT and BERT-RPC Spec</a></li>
<li><a href="https://github.com/mprymek/bertgate">bertgate</a></li>
<li><a href="https://github.com/edgurgel/bertrpcex">bertrpcex</a></li>
<li><a href="https://github.com/edgurgel/bertex">bertex</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=34586">104_Ruby_to_Elixir_Via_BERTRPC.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=34587">104_Ruby_to_Elixir_Via_BERTRPC.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-5111589d3b478af44902337fe7afe52576b60989</guid>
      <pubDate>Fri, 22 Aug 2014 22:31:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/34586/104_Ruby_to_Elixir_Via_BERTRPC.mp4" length="23748946" type="video/mp4"/>
      <itunes:subtitle>Trivial interop between Ruby and Elixir processes using BERT-RPC.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[103 - BEAM Toolbox, Episode 11]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=579</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Switching to the expression style in Ecto, and using Phoenix's new routing helpers because we must.</p>
<p>Resources</p>
<ul>
<li><a href="https://github.com/knewter/beam_toolbox_data/commit/d6fd7cf944dd6c7ae81da11229f2644364d001b8">use expression style for ecto queries</a></li>
<li><a href="https://github.com/knewter/beam_toolbox_web/commit/2463023be7666670e7daa4c6ebf592372640fea4">use new phoenix routing path helpers</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=34583">103_BEAM_Toolbox_Part_11.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=34584">103_BEAM_Toolbox_Part_11.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-5f317ac754021b12102cae9ba157bc2d809b5649</guid>
      <pubDate>Fri, 22 Aug 2014 21:02:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/34583/103_BEAM_Toolbox_Part_11.mp4" length="39287945" type="video/mp4"/>
      <itunes:subtitle>Switching to the expression style in Ecto, and using Phoenix's new routing helpers because we must.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[102 - BEAM Toolbox, Episode 10]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=575</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Building a projects listing page, and reviewing some changes to the toolbox.</p>
<p><strong>Resources</strong></p>
<ul>
<li><a href="http://github.com/knewter/beam_toolbox_web">knewter/beam_toolbox_web</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=34186">102_BEAM_Toolbox_Part_10.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=34187">102_BEAM_Toolbox_Part_10.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=34188">102_beam_toolbox_web.tar.gz</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-91f1b312424926a9a9a6b2426cb0a927dbd78102</guid>
      <pubDate>Thu, 14 Aug 2014 21:56:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/34186/102_BEAM_Toolbox_Part_10.mp4" length="40406021" type="video/mp4"/>
      <itunes:subtitle>Building a projects listing page, and reviewing some changes to the toolbox.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[101 - BEAM Toolbox, Part 9]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=573</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Building a CLI utility for categorizing our projects as a Mix task.</p>
<p><strong>Resources</strong></p>
<ul>
<li><a href="http://elixir-lang.org/docs/stable/elixir/IO.ANSI.html">IO.ANSI</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=34074">101_BEAM_Toolbox_Part_9.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=34075">101_BEAM_Toolbox_Part_9.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=34076">101_beam_toolbox_data.tar.gz</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-f81f297bd0350327a6e0c1faced14ab6811363a3</guid>
      <pubDate>Tue, 12 Aug 2014 22:17:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/34074/101_BEAM_Toolbox_Part_9.mp4" length="90316084" type="video/mp4"/>
      <itunes:subtitle>Building a CLI utility for categorizing our projects as a Mix task.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[100 - BEAM Toolbox, Part 8]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=570</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Making the BEAM Toolbox a bit more useful, including adding in Disqus support.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=33917">100_BEAM_Toolbox_Part_8.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=33918">100_BEAM_Toolbox_Part_8.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-585b5ae36896368f777ef3195edb016d1ead6e91</guid>
      <pubDate>Sat, 09 Aug 2014 19:06:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/33917/100_BEAM_Toolbox_Part_8.mp4" length="65546843" type="video/mp4"/>
      <itunes:subtitle>Making the BEAM Toolbox a bit more useful, including adding in Disqus support.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[099 - BEAM Toolbox, Part 7]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=568</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Managing relationships in Ecto, and integrating Ecto into a Phoenix application.</p>
<p><strong>Resources</strong></p>
<ul>
<li><a href="http://github.com/knewter/beam_toolbox_data">knewter/beam_toolbox_data</a></li>
<li><a href="http://github.com/knewter/beam_toolbox_web">knewter/beam_toolbox_web</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=33758">099_BEAM_Toolbox_Part_7.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=33759">099_BEAM_Toolbox_Part_7.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-02f5a698c7d6d087cdb5cd18d3b5cdcf85e7363b</guid>
      <pubDate>Wed, 06 Aug 2014 21:13:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/33759/099_BEAM_Toolbox_Part_7.mp4" length="60507224" type="video/mp4"/>
      <itunes:subtitle>Managing relationships in Ecto, and integrating Ecto into a Phoenix application.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[098 - Contributing to Open Source]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=565</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>In which we contribute to the elixir codebase and open a pull request.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=33448">098_Contributing_to_Open_Source.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-2fc64308b007410f03d937162254b10973ab220b</guid>
      <pubDate>Fri, 01 Aug 2014 21:26:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/33448/098_Contributing_to_Open_Source.mp4" length="160452532" type="video/mp4"/>
      <itunes:subtitle>In which we contribute to the elixir codebase and open a pull request.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[097 - BEAM Toolbox, Part 6]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=564</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Resurrecting the Toolbox with an Ecto-based data layer from scratch, and synchronizing data with the Hex API.</p>
<p><strong>Resources</strong></p>
<ul>
<li><a href="https://hex.pm/">hex.pm</a></li>
<li><a href="https://github.com/hexpm/hex_web">hexpm/hex_web</a></li>
<li><a href="http://github.com/knewter/beam_toolbox_data">knewter/beam_toolbox_data</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=33445">097_BEAM_Toolbox_Part_6.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=33446">097_BEAM_Toolbox_Part_6.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-49e8f9751e2d5a3208fb6ffb842a523e7f46162c</guid>
      <pubDate>Fri, 01 Aug 2014 20:07:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/33446/097_BEAM_Toolbox_Part_6.mp4" length="35341493" type="video/mp4"/>
      <itunes:subtitle>Resurrecting the Toolbox with an Ecto-based data layer from scratch, and synchronizing data with the Hex API.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[096 - Arduino Motor Driver]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=560</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>An unusually formatted episode discussing an ad hoc serial protocol for controlling an Arduino Motor Controller.</p>
<p><strong>Resources</strong></p>
<ul>
<li><a href="https://github.com/knewter/arduino_motor_driver">knewter/arduino_motor_driver</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=32817">096_Arduino_Motor_Driver.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-302ae6d30a495321152d507c8b317be4d435d738</guid>
      <pubDate>Thu, 24 Jul 2014 13:30:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/32817/096_Arduino_Motor_Driver.mp4" length="65293517" type="video/mp4"/>
      <itunes:subtitle>An unusually formatted episode discussing an ad hoc serial protocol for controlling an Arduino Motor Controller.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[095 - Link Extractor, Part 4]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=558</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Fixing some bugs and setting up a Zapier integration.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=32403">095_Link_Extractor_Part_4.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=32404">095_Link_Extractor_Part_4.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-5a370d8efd28e8e2cc174a2b2449aad11fac37f1</guid>
      <pubDate>Sat, 19 Jul 2014 18:13:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/32403/095_Link_Extractor_Part_4.mp4" length="84771401" type="video/mp4"/>
      <itunes:subtitle>Fixing some bugs and setting up a Zapier integration.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[094 - Link Extractor, Part 3]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=555</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Deploying our application to a VPS from scratch and pushing in our first message.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=32020">094_Link_Extractor_Part_3.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=32021">094_Link_Extractor_Part_3.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-883ff61ee202bcb7ba7da9fbae418e4bd3ae21a9</guid>
      <pubDate>Wed, 16 Jul 2014 08:18:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/32021/094_Link_Extractor_Part_3.mp4" length="112006576" type="video/mp4"/>
      <itunes:subtitle>Deploying our application to a VPS from scratch and pushing in our first message.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[093 - Link Extractor, Part 2]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=551</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Using Phoenix to build an HTTP API for posting links into the system, and a page to view posted links.</p>
<p><strong>Resources</strong></p>
<ul>
<li><a href="http://github.com/phoenixframework/phoenix">phoenixframework/phoenix</a></li>
<li><a href="http://github.com/knewter/link_extractor">knewter/link_extractor</a></li>
<li><a href="http://github.com/knewter/link_extractor_web">knewter/link_extractor_web</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=31753">093_link_extractor_web.tar.gz</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=31754">093_Link_Extractor_Part_2.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=31755">093_Link_Extractor_Part_2.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-d9706ecb2eddc2f1265977c3767132d703e63b14</guid>
      <pubDate>Sat, 12 Jul 2014 10:07:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/31755/093_Link_Extractor_Part_2.mp4" length="78432567" type="video/mp4"/>
      <itunes:subtitle>Using Phoenix to build an HTTP API for posting links into the system, and a page to view posted links.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[092 - Link Extractor]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=549</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Using poolboy to build a service for extracting data from a set of links and collecting them into memory for viewing later.</p>
<p><strong>Resources</strong></p>
<ul>
<li><a href="http://github.com/devinus/poolboy">devinus/poolboy</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=31600">092_link_extractor.tar.gz</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=31601">092_Link_Extractor.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=31602">092_Link_Extractor.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-4d7756a95e58a7151b033edbeb9ac9386df4d36e</guid>
      <pubDate>Wed, 09 Jul 2014 18:31:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/31602/092_Link_Extractor.mp4" length="98368285" type="video/mp4"/>
      <itunes:subtitle>Using poolboy to build a service for extracting data from a set of links and collecting them into memory for viewing later.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[091 - Test Coverage]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=546</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Exploring test coverage report generation, using both Erlang's `cover` application and the Coverex tool.</p>
<p><strong>Resources</strong></p>
<ul>
<li><a href="http://github.com/knewter/quickie_synth">knewter/quickie_synth</a></li>
<li><a href="https://github.com/parroty/excoveralls">parroty/excoveralls</a> - I didn't talk about this, but it provides coveralls support for your project.</li>
<li><a href="https://github.com/alfert/coverex">alfert/coverex</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=31411">091_Test_Coverage.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=31412">091_Test_Coverage.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-180544202457b1d326bf80666b28af22046a3e75</guid>
      <pubDate>Sun, 06 Jul 2014 20:02:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/31412/091_Test_Coverage.mp4" length="19663748" type="video/mp4"/>
      <itunes:subtitle>Exploring test coverage report generation, using both Erlang's `cover` application and the Coverex tool.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[090 - Websockets Terminal]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=544</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Taking advantage of Phoenix's native websockets support to build an in-browser bash terminal proxy.</p>
<p><strong>Resources</strong></p>
<p>- <a href="http://github.com/phoenixframework/phoenix">Phoenix</a></p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=31368">090_Websockets_Terminal.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=31369">090_websockets_terminal.tar.gz</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=31370">090_Websockets_Terminal.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-0fdc55a7a7013258f5a35f37fa503d09e73e0356</guid>
      <pubDate>Thu, 03 Jul 2014 23:44:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/31370/090_Websockets_Terminal.mp4" length="117951092" type="video/mp4"/>
      <itunes:subtitle>Taking advantage of Phoenix's native websockets support to build an in-browser bash terminal proxy.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[089 - Protocol Buffers]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=542</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Easy cross-language serialization and deserialization of data structures using Google's Protocol Buffers and exprotobuf.</p>
<p><strong>Resources</strong></p>
<ul>
<li><a href="https://developers.google.com/protocol-buffers/">Protocol Buffers</a></li>
<li><a href="https://github.com/bitwalker/exprotobuf">bitwalker/exprotobuf</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=31179">089_exprotobuf_playground.tar.gz</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=31180">089_Protocol_Buffers.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=31181">089_Protocol_Buffers.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-b02d6c3df00731d250faf39354fe4a7095f9ee04</guid>
      <pubDate>Sun, 29 Jun 2014 19:39:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/31181/089_Protocol_Buffers.mp4" length="29666829" type="video/mp4"/>
      <itunes:subtitle>Easy cross-language serialization and deserialization of data structures using Google's Protocol Buffers and exprotobuf.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[088 - Porcelain]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=540</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>External Process interaction like the Port module but both simpler and more powerful.</p>
<p><strong>Resources</strong></p>
<ul>
<li><a href="https://github.com/alco/porcelain">alco/porcelain</a></li>
<li><a href="http://porcelain.readthedocs.org/en/v1.0.0/">Porcelain documentation</a></li>
<li><a href="https://github.com/alco/goon">alco/goon</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=31004">088_Porcelain.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=31005">088_porcelain_playground.tar.gz</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=31006">088_Porcelain.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-5798eed6be9e1bf456e98152b373fc342ec95a2b</guid>
      <pubDate>Wed, 25 Jun 2014 19:32:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/31006/088_Porcelain.mp4" length="75945854" type="video/mp4"/>
      <itunes:subtitle>External Process interaction like the Port module but both simpler and more powerful.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[087 - WordCloud]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=536</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Using Elixir to do a word frequency count on a corpus of text and generate input for a WordCloud generator.</p>
<p><strong>Resources</strong></p>
<ul>
<li><a href="http://www.wordle.net">Wordle</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=30797">087_word_clouds.tar.gz</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=30798">087_WordCloud.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=30799">087_WordCloud.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-b3f1b7c7e02310104d87c390dddbf98cd266e7a7</guid>
      <pubDate>Fri, 20 Jun 2014 22:03:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/30799/087_WordCloud.mp4" length="79066357" type="video/mp4"/>
      <itunes:subtitle>Using Elixir to do a word frequency count on a corpus of text and generate input for a WordCloud generator.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[086 - put_in and get_in]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=534</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>(and friends) Easy access to deeply nested data structures.</p>
<p><strong>Resources</strong></p>
<ul>
<li><a href="https://github.com/elixir-lang/elixir/blob/master/CHANGELOG.md#v0140-2014-06-08">The CHANGELOG where these were introduced</a></li>
<li><a href="http://clojuredocs.org/clojure_core/1.2.0/clojure.core/update-in">Clojure's update-in</a></li>
<li><a href="http://elixir-lang.org/docs/stable/elixir/Kernel.html#defstruct/1">@derive docs</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=30713">086_nested_playground.tar.gz</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=30714">086_put_in_and_get_in.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=30715">086_put_in_and_get_in.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-4b8e26be7785f03eafdc51bb0c0f47c64e8351ed</guid>
      <pubDate>Wed, 18 Jun 2014 20:13:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/30715/086_put_in_and_get_in.mp4" length="53123055" type="video/mp4"/>
      <itunes:subtitle>(and friends) Easy access to deeply nested data structures.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[085 - Apex]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=532</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Awesome Print for Elixir. &nbsp;An easy way to get insight into unfamiliar data structures.</p>
<p><strong>Resources</strong></p>
<ul>
<li><a href="https://github.com/BjRo/apex">BjRo/apex</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=30472">085_Apex.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=30473">085_Apex.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-12ef837138f05aff4c38e8236d52abdde5768a2a</guid>
      <pubDate>Fri, 13 Jun 2014 20:35:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/30472/085_Apex.mp4" length="12695136" type="video/mp4"/>
      <itunes:subtitle>Awesome Print for Elixir.  An easy way to get insight into unfamiliar data structures.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[084 - PCM Audio]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=529</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Generating PCM Audio and making some noise</p>
<p><strong>Resources</strong></p>
<ul>
<li><a href="http://en.wikipedia.org/wiki/Pulse-code_modulation">Wikipedia page on Pulse-code Modulation</a></li>
<li>Fr<a href="http://www.phy.mtu.edu/~suits/notefreqs.html">equencies of Musical Notes</a></li>
<li><a href="http://github.com/knewter/audio_playground">knewter/audio_playground</a></li>
<li><a href="http://github.com/knewter/ex_midilib">knewter/ex_midilib</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=30289">084_PCM_Audio.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=30290">084_pcm_playground.tar.gz</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=30291">084_PCM_Audio.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-a3f00fa2222695d5201010c1cfe11d6d636da20a</guid>
      <pubDate>Wed, 11 Jun 2014 20:40:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/30289/084_PCM_Audio.mp4" length="25994955" type="video/mp4"/>
      <itunes:subtitle>Generating PCM Audio and making some noise</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[083 - pg2]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=526</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>A replacement for the `pg` module that has some better semantics for distribution.</p>
<p><strong>Resources</strong></p>
<ul>
<li><a href="http://erlang.org/doc/man/pg2.html">pg2 Manual</a></li>
<li><a href="http://christophermeiklejohn.com/erlang/2013/06/03/erlang-pg2-failure-semantics.html">Christopher Meiklejohn's write up on pg2 failure semantics</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=30087">083_pg2.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=30088">083_pg2.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=30089">083_string_processes.tar.gz</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-47d220d5ef4b985a9f07078a20d08a8462c21181</guid>
      <pubDate>Sat, 07 Jun 2014 14:49:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/30087/083_pg2.mp4" length="42390982" type="video/mp4"/>
      <itunes:subtitle>A replacement for the `pg` module that has some better semantics for distribution.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[082 - Protocols]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=525</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>A fantastic method for polymorphism in Elixir. &nbsp;Pairs well with structs. &nbsp;Slight oaky flavor.</p>
<p><strong>Resources</strong></p>
<div>
<div>
<ul>
<li><a href="http://elixir-lang.org/getting_started/16.html">Elixir Getting Started guide on protocols</a></li>
<li><a href="http://elixir-lang.org/docs/stable/elixir/">defprotocol documentation</a></li>
</ul>
</div>
</div>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=29977">082_odd_protocol.tar.gz</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=29978">082_Protocols.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=29979">082_Protocols.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-dcfd4eac814073147a5516503376089f77c5a9f8</guid>
      <pubDate>Thu, 05 Jun 2014 20:04:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/29979/082_Protocols.mp4" length="29012469" type="video/mp4"/>
      <itunes:subtitle>A fantastic method for polymorphism in Elixir.  Pairs well with structs.  Slight oaky flavor.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[081 - EEx]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=520</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Elixir's built-in templating language, useful for embedding Elixir code inside of a string.</p>
<p><strong>Resources</strong></p>
<ul>
<li><a href="http://elixir-lang.org/docs/stable/eex/">EEx Documentation</a></li>
<li><a href="http://elixir-lang.org/docs/stable/eex/EEx.AssignsEngine.html">EEx.AssignsEngine</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=29634">081_EEx.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=29635">081_EEx.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=29636">081_eex_playground.tar.gz</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-43db540c7570c6c7ed3c617a99240f0bbb1f243a</guid>
      <pubDate>Sat, 31 May 2014 20:37:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/29634/081_EEx.mp4" length="25559961" type="video/mp4"/>
      <itunes:subtitle>Elixir's built-in templating language, useful for embedding Elixir code inside of a string.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[080 - erlubi]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=518</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>A client for the Ubigraph visualization server, and an easy way to view a BEAM application's supervision tree in 3D.</p>
<p><strong>Resources</strong></p>
<ul>
<li><a href="https://github.com/krestenkrab/erlubi">krestenkrab/erlubi</a></li>
<li><a href="http://ubietylab.net/ubigraph/index.html">Ubigraph</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=29197">080_erlubi.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=29198">080_erlubi.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-8132ce5c5d34243a225e1c82697de23d3bc624b9</guid>
      <pubDate>Tue, 27 May 2014 21:26:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/29197/080_erlubi.mp4" length="111109006" type="video/mp4"/>
      <itunes:subtitle>A client for the Ubigraph visualization server, and an easy way to view a BEAM application's supervision tree in 3D.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[079 - Tasks]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=516</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>An abstraction for computing a value in the background and receiving the value later.</p>
<p><strong>Resources</strong></p>
<ul>
<li><a href="http://elixir-lang.org/docs/master/Task.html">Task documentation</a></li>
<li><a href="https://github.com/josevalim/xgen">josevalim/xgen</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=28968">079_Tasks.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=28969">079_Tasks.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=28970">079_website_pipeline.tar.gz</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-87e63ba90c98728379af851919648fe07b7a40a6</guid>
      <pubDate>Fri, 23 May 2014 20:01:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/28968/079_Tasks.mp4" length="39406244" type="video/mp4"/>
      <itunes:subtitle>An abstraction for computing a value in the background and receiving the value later.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[078 - Agents]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=514</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>A simple abstraction around state.</p>
<p><strong>Resources</strong></p>
<ul>
<li><a href="http://elixir-lang.org/docs/master/Agent.html">Agent documentation</a></li>
<li><a href="http://github.com/josevalim/xgen">josevalim/xgen</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=28788">078_Agents.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=28789">078_Agents.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-b2e65fcb8b6c7f0ab5b36a4d9ce38912d250ee4d</guid>
      <pubDate>Wed, 21 May 2014 08:41:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/28788/078_Agents.mp4" length="32242370" type="video/mp4"/>
      <itunes:subtitle>A simple abstraction around state.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[077 - Exceptions and Errors]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=511</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Manually raising exceptions, handling them, defining your own, and using them idiomatically.</p>
<p><strong>Resources</strong></p>
<div>
<div>
<ul>
<li><a href="http://elixir-lang.org/getting_started/17.html">Elixir's Getting Started Guide on try, rescue, errors, and exceptions</a></li>
<li><a href="http://elixir-lang.org/docs/master/Kernel.html#defexception/3">`defexception/3` documentation</a></li>
<li><a href="http://elixir-lang.org/docs/master/Kernel.html#raise/1">`raise` documentation</a></li>
<li><a href="https://github.com/elixir-lang/elixir/blob/master/lib/elixir/lib/exception.ex">Most of Elixir's default exceptions are in one place</a></li>
</ul>
</div>
</div>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=28573">077_Exceptions_and_Errors.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=28574">077_Exceptions_and_Errors.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-0baf24d09f1946547bcbbd3cb58b3bcee0a4472d</guid>
      <pubDate>Sat, 17 May 2014 19:30:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/28573/077_Exceptions_and_Errors.mp4" length="16774270" type="video/mp4"/>
      <itunes:subtitle>Manually raising exceptions, handling them, defining your own, and using them idiomatically.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[076 - Streams]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=510</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>A brief overview of Elixir's 'lazy, composable Enumerables'</p>
<p><strong>Resources</strong></p>
<ul>
<li><a href="http://elixir-lang.org/getting_started/10.html">Elixir guide on Streams</a></li>
<li><a href="http://elixir-lang.org/docs/stable/Stream.html">Stream docs</a></li>
<li><a href="https://github.com/elixir-lang/elixir/issues/2285">Filed Stream bug</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=28409">076_Streams.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=28410">076_Streams.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-4553c702f0b65282255299c8889144327e829525</guid>
      <pubDate>Thu, 15 May 2014 19:15:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/28409/076_Streams.mp4" length="21677497" type="video/mp4"/>
      <itunes:subtitle>A brief overview of Elixir's 'lazy, composable Enumerables'</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[075 - DETS]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=508</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>A disk-based version of ETS with a few restrictions.</p>
<p>NOTE: I am aware that the audio in this episode has quite a few janks, and I apologize for it. &nbsp;Not sure what happened. &nbsp;Since I'm a few days late with the episode, I opted to ship it this way rather than re-record. &nbsp;If this is bothersome to any subscribers, I'll gladly re-record it later. &nbsp;Thanks in advance.</p>
<p><strong>Resources</strong></p>
<ul>
<li><a href="http://www.erlang.org/doc/man/dets.html">Erlang `dets Reference Manual</a></li>
</ul>
<p><strong>Bonus Resources :)</strong></p>
<ul>
<li><a href="http://steve.vinoski.net/blog/2011/03/23/dont-lose-your-ets-tables/">Don't lose your ETS tables</a></li>
<li><a href="http://vim.wikia.com/wiki/Improved_hex_editing">Hexmode for vim</a>&nbsp;(for exploring that DETS file)</li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=28019">075_DETS.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=28020">075_ets_playground.tar.gz</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=28021">075_DETS.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-4b31583fdd92d59e040252cb3d5b1570e62e6858</guid>
      <pubDate>Mon, 12 May 2014 20:17:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/28019/075_DETS.mp4" length="33191111" type="video/mp4"/>
      <itunes:subtitle>A disk-based version of ETS with a few restrictions.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[074 - ETS]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=506</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Erlang term storage - a queryable database for your processes to store terms in.</p>
<p><strong>Resources</strong></p>
<ul>
<li>Chapter 10 of the book Erlang Programming</li>
<li><a href="http://www.erlang.org/doc/man/ets.html">The `ets` module Reference Manual</a></li>
<li><a href="http://learnyousomeerlang.com/ets">ETS in "Learn You Some Erlang for great good"</a></li>
<li><a href="http://www.erlang.org/doc/apps/erts/match_spec.html">Match Specifications</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=27461">074_ETS.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=27462">074_ETS.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=27463">074_ets_playground.tar.gz</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-f152d5bdd1d5be150249695d77b4fca5a394c08e</guid>
      <pubDate>Thu, 08 May 2014 20:57:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/27461/074_ETS.mp4" length="52146226" type="video/mp4"/>
      <itunes:subtitle>Erlang term storage - a queryable database for your processes to store terms in.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[073 - Process Dictionaries]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=502</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Process-local state that you likely should never use :)</p>
<h3>Resources</h3>
<ul>
<li><a href="http://www.erlang.org/course/advanced.html#dict">Erlang Process Dictionary</a></li>
<li><a href="http://prog21.dadgum.com/53.html">How I Learned to Stop Worrying and Love Erlang's Process Dictionary</a></li>
<li><a href="http://ferd.ca/on-the-use-of-the-process-dictionary-in-erlang.html">On the use of the Process Dictionary in Erlang</a></li>
<li><a href="http://stackoverflow.com/questions/1483550/in-erlang-what-are-the-benefits-of-using-ets-instead-of-process-dictionary-with">Benefits of ets instead of pdicts</a></li>
<li><a href="http://stackoverflow.com/questions/4073670/is-the-process-dictionary-appropriate-in-this-case">Is the process dictionary useful in this case?</a></li>
<li><a href="https://i.chzbgr.com/maxW500/4355544576/h4A6051D2/">josevalim's feelings regarding :erlang.erase</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=26963">073_Process_Dictionaries.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=26964">073_Process_Dictionaries.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-f3f23a2777bb286c18290efd430e60f228c7e6ed</guid>
      <pubDate>Thu, 01 May 2014 18:39:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/26963/073_Process_Dictionaries.mp4" length="13883178" type="video/mp4"/>
      <itunes:subtitle>Process-local state that you likely should never use :)</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[072 - WxCalc, Part 2]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=501</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Implementing our calculator's logic and wiring it up to wx events.</p>
<h3>Resources</h3>
<ul>
<li><a href="http://github.com/knewter/wx_calc">wx_calc github repo</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=26903">072_WxCalc_Part_2.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=26904">072_WxCalc_Part_2.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=26905">072_wx_calc.tar.gz</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-d95d596e71b591965a5a2bcb28620aabd0ad89e1</guid>
      <pubDate>Wed, 30 Apr 2014 23:48:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/26903/072_WxCalc_Part_2.mp4" length="169841749" type="video/mp4"/>
      <itunes:subtitle>Implementing our calculator's logic and wiring it up to wx events.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[071 - Wx]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=497</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Building a GUI calculator using Erlang's native wx bindings.</p>
<h3>Resources</h3>
<ul>
<li><a href="http://www.erlang.org/doc/man/wx.html">Erlang wx documentation</a></li>
<li><a href="http://www.idiom.com/~turner/wxtut/wxwidgets.html">Getting started with wxWidgets in Erlang</a></li>
<li><a href="https://groups.google.com/d/msg/elixir-lang-talk/soKW-vmLLQA/2nsE-ni2HdoJ">Mail from Joe Armstrong to elixir-lang-talk re: wx</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=26319">071_Wx.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=26320">071_wx.tar.gz</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=26321">071_Wx.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-a9cc177724158a781f328e595c039bb8bc2b2f07</guid>
      <pubDate>Fri, 25 Apr 2014 21:20:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/26319/071_Wx.mp4" length="65307579" type="video/mp4"/>
      <itunes:subtitle>Building a GUI calculator using Erlang's native wx bindings.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[070 - Hex]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=495</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Elixir's new package manager.</p>
<h3>Resources</h3>
<ul>
<li><a href="https://hex.pm/">Hex</a></li>
<li><a href="http://github.com/ericmj/hex">Hex source</a></li>
<li><a href="https://github.com/ericmj/hex_web">HexWeb source</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=26251">070_Hex.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=26252">070_Hex.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-e0cb5d7e0131590b491d2c9275de535b803756c8</guid>
      <pubDate>Thu, 24 Apr 2014 18:56:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/26251/070_Hex.mp4" length="21922452" type="video/mp4"/>
      <itunes:subtitle>Elixir's new package manager.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[069 - Observer]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=492</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>A graphical tool for inspection of a running Erlang/Elixir system and its processes.</p>
<p><strong>Resources</strong></p>
<ul>
<li><a href="http://www.erlang.org/doc/installation_guide/INSTALL.html#Building-a-fast-Erlang-VM-on-Mac-OS-Lion_Building-with-wxErlang" rel="noreferrer">Building Erlang with wx support</a></li>
<li><a href="http://www.erlang.org/doc/apps/observer/" rel="noreferrer">Observer application manual</a></li>
<li><a href="http://www.erlang.org/doc/apps/observer/observer_ug.html" rel="noreferrer">Observer User's Guide</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=25916">069_Observer.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=25917">069_Observer.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-c28fdc36d4fe5fd5474dff2c71630e66287db5f6</guid>
      <pubDate>Fri, 18 Apr 2014 21:54:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/25916/069_Observer.mp4" length="28586014" type="video/mp4"/>
      <itunes:subtitle>A graphical tool for inspection of a running Erlang/Elixir system and its processes.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[068 - Port]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=491</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Interacting with external programs as if they were simple processes.</p>
<h4>Resources</h4>
<ul>
<li><a href="http://www.erlang.org/doc/reference_manual/ports.html" rel="noreferrer">Erlang Port documentation</a></li>
<li><a href="http://www.erlang.org/doc/tutorial/users_guide.html" rel="noreferrer">Erlang Interoperability Tutorial</a></li>
<li><a href="http://elixir-lang.org/docs/stable/Port.html" rel="noreferrer">Elixir Port documentation</a></li>
<li><a href="http://en.wikipedia.org/wiki/Escape_character#ASCII_escape_character" rel="noreferrer">ASCII Escape Character</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=25797">068_Port.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=25798">068_Port.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-e72209bdb29b4bff0ac78eb7ca979cc27c412b48</guid>
      <pubDate>Wed, 16 Apr 2014 22:17:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/25797/068_Port.mp4" length="20078607" type="video/mp4"/>
      <itunes:subtitle>Interacting with external programs as if they were simple processes.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[067 - Deploying to Heroku]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=486</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Using HashNuke's Elixir buildpack for Heroku to deploy BEAM Toolbox. &nbsp;Also, a brief intro to ExConf.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=25396">067_Deploying_to_Heroku.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=25397">067_Deploying_to_Heroku.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-6ebee8d2f0b706ca970a4367194f0127231575fc</guid>
      <pubDate>Fri, 11 Apr 2014 23:08:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/25396/067_Deploying_to_Heroku.mp4" length="51409095" type="video/mp4"/>
      <itunes:subtitle>Using HashNuke's Elixir buildpack for Heroku to deploy BEAM Toolbox.  Also, a brief intro to ExConf.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[066 - Plug.Static]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=484</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Serving static files without an opaque and complicated-looking cowboy handler.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=25289">066_Plug_Static.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=25290">066_Plug_Static.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-4d63be468edc18b13f5aa6e8cb8dab4a7bf8262f</guid>
      <pubDate>Thu, 10 Apr 2014 08:48:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/25289/066_Plug_Static.mp4" length="14239823" type="video/mp4"/>
      <itunes:subtitle>Serving static files without an opaque and complicated-looking cowboy handler.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[065 - SSH]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=482</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Using Erlang's `ssh` module to provide ssh access to a shell running your Elixir code.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=24983">065_SSH.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=24984">065_SSH.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-a658ffc1634b8bc86668e72bd37bfd6f5e73e03d</guid>
      <pubDate>Sun, 06 Apr 2014 22:29:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/24983/065_SSH.mp4" length="10227953" type="video/mp4"/>
      <itunes:subtitle>Using Erlang's `ssh` module to provide ssh access to a shell running your Elixir code.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[064 - Digraph]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=481</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>A look at using the `digraph`module from the Erlang standard library to implement pathfinding on a map.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=24979">064_Digraph.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=24980">064_digraph_maps.tar.gz</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=24982">064_Digraph.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-d99967a1059c652a616cf9921718fd67080257fb</guid>
      <pubDate>Sun, 06 Apr 2014 19:48:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/24982/064_Digraph.mp4" length="64907453" type="video/mp4"/>
      <itunes:subtitle>A look at using the `digraph`module from the Erlang standard library to implement pathfinding on a map.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[063 - Tracing]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=474</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>A quick tour of the `dbg` module from Erlang, and its tracing features.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=24160">063_Tracing.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=24161">063_Tracing.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-4e61ce171d447be49260aa7e2b150fa18f95897e</guid>
      <pubDate>Thu, 27 Mar 2014 21:02:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/24160/063_Tracing.mp4" length="19704255" type="video/mp4"/>
      <itunes:subtitle>A quick tour of the `dbg` module from Erlang, and its tracing features.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[062 - Quickie Synth]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=472</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Using processes, gs, and shelling out to `sox` to build an Elixir-based synthesizer module.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=24014">062_Quickie_Synth.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=24015">062_quickie_synth.tar.gz</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=24016">062_Quickie_Synth.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-0660032706dba19d1e9f0cf08d7cb3e37a21a744</guid>
      <pubDate>Tue, 25 Mar 2014 22:44:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/24016/062_Quickie_Synth.mp4" length="49137361" type="video/mp4"/>
      <itunes:subtitle>Using processes, gs, and shelling out to `sox` to build an Elixir-based synthesizer module.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[061 - Plug]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=469</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Exploring Elixir's library for building composable web application modules.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=23806">061_Plug.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=23807">061_Plug.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=23808">061_plug_playground.tar.gz</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-36c61c1cf1777823ac10c7606ccd7b5f75a67920</guid>
      <pubDate>Sat, 22 Mar 2014 19:20:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/23806/061_Plug.mp4" length="36939911" type="video/mp4"/>
      <itunes:subtitle>Exploring Elixir's library for building composable web application modules.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[060 - New Style Comprehensions]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=467</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Elixir's list comprehensions have been entirely revamped, and made much more general. &nbsp;In this episode, we cover new style comprehensions and show off a few tricks they have that older style list comprehensions lacked.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=23472">060_New_Style_Comprehensions.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=23473">060_New_Style_Comprehensions.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-7322184862f713f43c6c8395259fc337d9153c22</guid>
      <pubDate>Tue, 18 Mar 2014 22:32:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/23473/060_New_Style_Comprehensions.mp4" length="15616663" type="video/mp4"/>
      <itunes:subtitle>Elixir's list comprehensions have been entirely revamped, and made much more general.  In this episode, we cover new style comprehensions and show off a few tricks they have that older style list comprehensions lacked.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[059 - Custom Mix Tasks]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=465</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Looking at building a basic mix task, and how you can go about testing it.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=23307">059_Custom_Mix_Tasks.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=23308">059_Custom_Mix_Tasks.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=23309">059_custom_mix.tar.gz</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-73820b197f2fe7c911ffd1a6e6327bbef4ac578f</guid>
      <pubDate>Sun, 16 Mar 2014 22:35:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/23308/059_Custom_Mix_Tasks.mp4" length="15020905" type="video/mp4"/>
      <itunes:subtitle>Looking at building a basic mix task, and how you can go about testing it.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[058 - BEAM Toolbox, Part 5]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=462</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Building a module that caches our GitHub data for a given project.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=23019">058_BEAM_Toolbox_Part_5.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=23020">058_BEAM_Toolbox_Part_5.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-cce33fba9f7149ccba921db7d3dc8d2e751d6956</guid>
      <pubDate>Thu, 13 Mar 2014 00:14:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/23020/058_BEAM_Toolbox_Part_5.mp4" length="40158815" type="video/mp4"/>
      <itunes:subtitle>Building a module that caches our GitHub data for a given project.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[057 - BEAM Toolbox, Part 4]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=461</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Moving our ad-hoc, tuple-based data layer to one powered by maps/structs.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=22877">057_BEAM_Toolbox_Part_4.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=22878">057_BEAM_Toolbox_Part_4.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-bb321df4c9d144a7344f2fdb61fb74694b61d882</guid>
      <pubDate>Sun, 09 Mar 2014 21:59:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/22878/057_BEAM_Toolbox_Part_4.mp4" length="102342445" type="video/mp4"/>
      <itunes:subtitle>Moving our ad-hoc, tuple-based data layer to one powered by maps/structs.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[056 - Migrating Records To Maps]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=460</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Converting a production use of Records to use maps instead</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=22874">056_Migrating_Records_To_Maps.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=22875">056_Migrating_Records_To_Maps.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-0ef3f8fd496568b10e0d0d39c5d5e8934c0d3e6e</guid>
      <pubDate>Sun, 09 Mar 2014 21:00:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/22875/056_Migrating_Records_To_Maps.mp4" length="20047811" type="video/mp4"/>
      <itunes:subtitle>Converting a production use of Records to use maps instead.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[055 - Maps, Part 2: Structs]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=454</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Introducing structs and demonstrating how they can take the place of public Records.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=22376">055_Maps_Part_2.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=22377">055_Maps_Part_2.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-d1041c309aec57eed32a2ddae004a25b76051172</guid>
      <pubDate>Fri, 28 Feb 2014 08:47:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/22377/055_Maps_Part_2.mp4" length="16533619" type="video/mp4"/>
      <itunes:subtitle>Introducing structs and demonstrating how they can take the place of public Records.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[054 - Maps, Part 1]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=453</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>An introduction to maps, a new feature in Erlang R17 and Elixir 0.13</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=22354">054_Maps_Part_1.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=22455">054_Maps_Part_1.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-4bf94deea259915d3c357b7588820bc5b3318f66</guid>
      <pubDate>Thu, 27 Feb 2014 21:59:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/22354/054_Maps_Part_1.mp4" length="14723611" type="video/mp4"/>
      <itunes:subtitle>An introduction to maps, a new feature in Erlang R17 and Elixir 0.13</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[053 - BEAM Toolbox, Part 3]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=448</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Adding an integration testing layer that drives a browser using Hound, extracting a Controller helper, and adding Project pages.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=21885">053_BEAM_Toolbox_Part_3.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=21886">053_BEAM_Toolbox_Part_3.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-55b3631f3c7a1da543dc917e68b1ae622dcce5d2</guid>
      <pubDate>Thu, 20 Feb 2014 09:10:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/21885/053_BEAM_Toolbox_Part_3.mp4" length="56402425" type="video/mp4"/>
      <itunes:subtitle>Adding an integration testing layer that drives a browser using Hound, extracting a Controller helper, and adding Project pages.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[052 - BEAM Toolbox, Part 2]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=444</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Further work on the data layer, and introducing defoverridable.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=21529">052_BEAM_Toolbox_Part_2.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=21530">052_BEAM_Toolbox_Part_2.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-cc87a225650e38932c583a9c9a6f14a40dba3e78</guid>
      <pubDate>Sat, 15 Feb 2014 09:37:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/21529/052_BEAM_Toolbox_Part_2.mp4" length="87357040" type="video/mp4"/>
      <itunes:subtitle>Further work on the data layer, and introducing defoverridable.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[051 - BEAM Toolbox, Part 1]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=442</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Introducing BEAM Toolbox and starting work on the data layer.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=21303">051_BEAM_Toolbox_Part_1.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=21304">051_BEAM_Toolbox_Part_1.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-b5a31a1c01922facab2dd79afa8f1dcd8f78d168</guid>
      <pubDate>Wed, 12 Feb 2014 08:58:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/21303/051_BEAM_Toolbox_Part_1.mp4" length="44243996" type="video/mp4"/>
      <itunes:subtitle>Introducing BEAM Toolbox and starting work on the data layer.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[050 - Markdown Server, Part 5]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=439</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Accepting environment variables for configuration and filtering out files we don't want. Plus, a call to action to build BEAM Toolbox.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=20836">050_Markdown_Server_Part_5.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=20837">050_Markdown_Server_Part_5.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=20838">050_markdown_server.tar.gz</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-210f6831832d5b498f195a3b100c52c0f1373294</guid>
      <pubDate>Thu, 06 Feb 2014 19:27:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/20836/050_Markdown_Server_Part_5.mp4" length="30805817" type="video/mp4"/>
      <itunes:subtitle>Accepting environment variables for configuration and filtering out files we don't want.  Plus, a call to action to build BEAM Toolbox.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[049 - Markdown Server, Part 4]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=434</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Building a poor man's livereload system using inotify and websockets.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=20484">049_Markdown_Server_Part_4.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=20485">049_markdown_server_part_4.tar.gz</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=20486">049_Markdown_Server_Part_4.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-6a2c146afddf3c6d0aac75a41537080b0fbd0988</guid>
      <pubDate>Sat, 01 Feb 2014 16:35:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/20484/049_Markdown_Server_Part_4.mp4" length="54727566" type="video/mp4"/>
      <itunes:subtitle>Building a poor man's livereload system using inotify and websockets.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[048 - Markdown Server, Part 3]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=433</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Using Eml for markup, and bringing in Compassand Zurb Foundation for styles.</p>
<p>NOTE: The API for Eml will be changing a little bit in the next few weeks. &nbsp;I'll try to update you in the comments on this episode when that happens.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=20398">048_Markdown_Server_Part_3.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=20399">048_markdown_server.tar.gz</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=20400">048_Markdown_Server_Part_3.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-8756e2da33bdff1224a927bb6725375ee4bf3065</guid>
      <pubDate>Fri, 31 Jan 2014 21:35:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/20398/048_Markdown_Server_Part_3.mp4" length="60178041" type="video/mp4"/>
      <itunes:subtitle>Using Eml for markup, and bringing in Compassand Zurb Foundation for styles.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[047 - Markdown Server, Part 2]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=429</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Writing an integration test suite and dealing with macros for the first time.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=20042">047_markdown_server.tar.gz</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=20043">047_Markdown_Server_Part_2.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=20044">047_Markdown_Server_Part_2.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-9eecb23975d8d108aea78a6cf6fac511e602b68d</guid>
      <pubDate>Fri, 24 Jan 2014 23:20:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/20044/047_Markdown_Server_Part_2.mp4" length="58805502" type="video/mp4"/>
      <itunes:subtitle>Writing an integration test suite and dealing with macros for the first time.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[046 - Markdown Server, Part 1]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=428</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Building an HTTP Server to render Markdown files, using the Phoenix web framework.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=20033">046_markdown_server.tar.gz</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=20034">046_Markdown_Server_Part_1.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=20035">046_Markdown_Server_Part_1.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-13698c101c78abe21fabecbde8e98ad865cd2c93</guid>
      <pubDate>Fri, 24 Jan 2014 19:35:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/20035/046_Markdown_Server_Part_1.mp4" length="50239395" type="video/mp4"/>
      <itunes:subtitle>Building a HTTP Server to render Markdown files, using the Phoenix web framework.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[045 - Distribution, Part 2]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=424</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Sending messages to remote machines, and Joe Armstrong's favorite program.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=19507">045_Distribution_Part_2.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=19508">045_Distribution_Part_2.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-5b77eca5d0443e39ab5c5e4e495e4879af7daba9</guid>
      <pubDate>Sat, 18 Jan 2014 10:02:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/19508/045_Distribution_Part_2.mp4" length="17146460" type="video/mp4"/>
      <itunes:subtitle>Sending messages to remote machines, and Joe Armstrong's favorite program.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[044 - Distribution]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=422</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Sending messages from one Elixir node to another.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=19294">044_Distribution.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=19295">044_Distribution.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-db9a5eb0b78fe97ab2c8430979a97433124b2f26</guid>
      <pubDate>Mon, 13 Jan 2014 21:55:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/19294/044_Distribution.mp4" length="8149473" type="video/mp4"/>
      <itunes:subtitle>Sending messages from one Elixir node to another.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[043 - Releases With Relex]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=418</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>In today's episode, we look at making your Elixir application redistributable using Erlang releases. &nbsp;We use the tools Pogo and Relex to assist in building the release.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=19101">037_supervised_list_server_with_exlager.tar.gz</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=19102">043_Releases_With_Relex.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=19103">043_Releases_With_Relex.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-d133276fb29a92296ec17f38cec53dfabe6816a6</guid>
      <pubDate>Thu, 09 Jan 2014 07:46:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/19102/043_Releases_With_Relex.mp4" length="26126079" type="video/mp4"/>
      <itunes:subtitle>Making your Elixir application redistributable using Erlang releases.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[042 - File, Part 2]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=417</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p style="margin-right: 0px; margin-bottom: 15px; margin-left: 0px; font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 15px; line-height: 25px; margin-top: 0px !important;">In today's episode, we're going to cover the remaining half of the File module. The functions we'll be going over are:</p>
<ul style="margin: 15px 0px; padding: 0px 0px 0px 30px; font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 15px; line-height: 25px;">
<li><code style="font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; line-height: normal; margin: 0px 2px; padding: 0px 5px; border: 1px solid #dddddd; background-color: #f8f8f8; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; white-space: nowrap;">mkdir</code></li>
<li><code style="font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; line-height: normal; margin: 0px 2px; padding: 0px 5px; border: 1px solid #dddddd; background-color: #f8f8f8; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; white-space: nowrap;">mkdir_p</code></li>
<li><code style="font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; line-height: normal; margin: 0px 2px; padding: 0px 5px; border: 1px solid #dddddd; background-color: #f8f8f8; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; white-space: nowrap;">open</code></li>
<li><code style="font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; line-height: normal; margin: 0px 2px; padding: 0px 5px; border: 1px solid #dddddd; background-color: #f8f8f8; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; white-space: nowrap;">read</code></li>
<li><code style="font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; line-height: normal; margin: 0px 2px; padding: 0px 5px; border: 1px solid #dddddd; background-color: #f8f8f8; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; white-space: nowrap;">regular?</code></li>
<li><code style="font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; line-height: normal; margin: 0px 2px; padding: 0px 5px; border: 1px solid #dddddd; background-color: #f8f8f8; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; white-space: nowrap;">rm</code></li>
<li><code style="font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; line-height: normal; margin: 0px 2px; padding: 0px 5px; border: 1px solid #dddddd; background-color: #f8f8f8; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; white-space: nowrap;">rm_rf</code></li>
<li><code style="font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; line-height: normal; margin: 0px 2px; padding: 0px 5px; border: 1px solid #dddddd; background-color: #f8f8f8; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; white-space: nowrap;">rmdir</code></li>
<li><code style="font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; line-height: normal; margin: 0px 2px; padding: 0px 5px; border: 1px solid #dddddd; background-color: #f8f8f8; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; white-space: nowrap;">stat</code></li>
<li><code style="font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; line-height: normal; margin: 0px 2px; padding: 0px 5px; border: 1px solid #dddddd; background-color: #f8f8f8; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; white-space: nowrap;">stream!</code></li>
<li><code style="font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; line-height: normal; margin: 0px 2px; padding: 0px 5px; border: 1px solid #dddddd; background-color: #f8f8f8; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; white-space: nowrap;">stream_to!</code></li>
<li><code style="font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; line-height: normal; margin: 0px 2px; padding: 0px 5px; border: 1px solid #dddddd; background-color: #f8f8f8; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; white-space: nowrap;">touch</code></li>
<li><code style="font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; line-height: normal; margin: 0px 2px; padding: 0px 5px; border: 1px solid #dddddd; background-color: #f8f8f8; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; white-space: nowrap;">write</code></li>
<li><code style="font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; line-height: normal; margin: 0px 2px; padding: 0px 5px; border: 1px solid #dddddd; background-color: #f8f8f8; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; white-space: nowrap;">write_stat</code></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=19022">042_File_Part_2.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=19023">042_File_Part_2.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-c00b5d5fe3f67a42fa32b512cd5d481b72a52365</guid>
      <pubDate>Tue, 07 Jan 2014 09:25:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/19023/042_File_Part_2.mp4" length="22060523" type="video/mp4"/>
      <itunes:subtitle>In today's episode, we cover the second half of the File module.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[041 - File, Part 1]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=414</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p style="margin-right: 0px; margin-bottom: 15px; margin-left: 0px; font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 15px; line-height: 25px; margin-top: 0px !important;">Elixir's&nbsp;<code style="font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; line-height: normal; margin: 0px 2px; padding: 0px 5px; border: 1px solid #dddddd; background-color: #f8f8f8; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; white-space: nowrap;">File</code>&nbsp;module provides a lot of methods to make working with files and the file system easy and comfortable. In today's episode, we're going to cover the first part of the File module:</p>
<ul style="margin: 15px 0px; padding: 0px 0px 0px 30px; font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 15px; line-height: 25px;">
<li><code style="font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; line-height: normal; margin: 0px 2px; padding: 0px 5px; border: 1px solid #dddddd; background-color: #f8f8f8; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; white-space: nowrap;">cd</code></li>
<li><code style="font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; line-height: normal; margin: 0px 2px; padding: 0px 5px; border: 1px solid #dddddd; background-color: #f8f8f8; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; white-space: nowrap;">chgrp</code></li>
<li><code style="font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; line-height: normal; margin: 0px 2px; padding: 0px 5px; border: 1px solid #dddddd; background-color: #f8f8f8; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; white-space: nowrap;">chmod</code></li>
<li><code style="font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; line-height: normal; margin: 0px 2px; padding: 0px 5px; border: 1px solid #dddddd; background-color: #f8f8f8; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; white-space: nowrap;">chown</code></li>
<li><code style="font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; line-height: normal; margin: 0px 2px; padding: 0px 5px; border: 1px solid #dddddd; background-color: #f8f8f8; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; white-space: nowrap;">close</code></li>
<li><code style="font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; line-height: normal; margin: 0px 2px; padding: 0px 5px; border: 1px solid #dddddd; background-color: #f8f8f8; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; white-space: nowrap;">copy</code></li>
<li><code style="font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; line-height: normal; margin: 0px 2px; padding: 0px 5px; border: 1px solid #dddddd; background-color: #f8f8f8; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; white-space: nowrap;">cp</code></li>
<li><code style="font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; line-height: normal; margin: 0px 2px; padding: 0px 5px; border: 1px solid #dddddd; background-color: #f8f8f8; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; white-space: nowrap;">cp_r</code></li>
<li><code style="font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; line-height: normal; margin: 0px 2px; padding: 0px 5px; border: 1px solid #dddddd; background-color: #f8f8f8; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; white-space: nowrap;">cwd</code></li>
<li><code style="font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; line-height: normal; margin: 0px 2px; padding: 0px 5px; border: 1px solid #dddddd; background-color: #f8f8f8; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; white-space: nowrap;">dir?</code></li>
<li><code style="font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; line-height: normal; margin: 0px 2px; padding: 0px 5px; border: 1px solid #dddddd; background-color: #f8f8f8; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; white-space: nowrap;">exists?</code></li>
<li><code style="font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; line-height: normal; margin: 0px 2px; padding: 0px 5px; border: 1px solid #dddddd; background-color: #f8f8f8; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; white-space: nowrap;">ls</code></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=18727">041_File_Part_1.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=18728">041_File_Part_1.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-499a0a8b85df049ab85293a4be963e699eb25287</guid>
      <pubDate>Thu, 02 Jan 2014 08:52:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/18727/041_File_Part_1.mp4" length="19767500" type="video/mp4"/>
      <itunes:subtitle>An overview of the first portion of the File module in the standard library.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[040 - Bitwise]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=413</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>In this episode, we look at manipulating bits. &nbsp;This is typically useful for wire protocols.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=18722">040_Bitwise.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=18723">040_Bitwise.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-00de1169c5f8066cb354b4ad6d3872accb638452</guid>
      <pubDate>Thu, 02 Jan 2014 08:10:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/18722/040_Bitwise.mp4" length="12806178" type="video/mp4"/>
      <itunes:subtitle>In this episode, we look at manipulating bits.  This is typically useful for wire protocols.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[039 - Binaries: Deconstructing an IP Packet]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=411</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>In this episode, we use what we know about binary deconstruction to build a library to parse IP packets.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=18433">039_Binaries_Deconstructing_an_IP_Packet.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=18434">039_Binaries_Deconstructing_an_IP_Packet.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=18435">039_ip_parser.tar.gz</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=18436">039_sample_packet.bits</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-72bb8b378b48b17690f5e00ea5abc5761354b5b5</guid>
      <pubDate>Fri, 27 Dec 2013 09:31:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/18433/039_Binaries_Deconstructing_an_IP_Packet.mp4" length="38078613" type="video/mp4"/>
      <itunes:subtitle>In this episode, we use what we know about binary deconstruction to build a library to parse IP packets.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[038 - Binaries: Deconstructing and Constructing]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=409</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Erlang provides extremely good tools for handling binaries, and Elixir benefits from them as well. In this episode, we look at how to construct and deconstruct binaries quickly.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=18364">038_Binaries_Deconstructing_And_Constructing.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=18365">038_Binaries_Deconstructing_And_Constructing.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-6b3e01c68dd4f87245ff2e5213242d90346c47f4</guid>
      <pubDate>Thu, 26 Dec 2013 07:49:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/18364/038_Binaries_Deconstructing_And_Constructing.mp4" length="11601407" type="video/mp4"/>
      <itunes:subtitle>Erlang provides extremely good tools for handling binaries, and Elixir benefits from them as well.  In this episode, we look at how to construct and deconstruct binaries quickly.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[037 - ExLager]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=405</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>ExLager is a wrapper for Basho's lager that provides fantastic logging for your applications.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=18020">037_ExLager.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=18021">037_ExLager.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=18022">023_supervised_list_server.tar.gz</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=18023">037_supervised_list_server_with_exlager.tar.gz</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-56d26d6d1fbb5a7950dc729092911cdec2d9ac05</guid>
      <pubDate>Thu, 19 Dec 2013 08:48:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/18020/037_ExLager.mp4" length="30481784" type="video/mp4"/>
      <itunes:subtitle>Fantastic logging for your applications.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[036 - Weber, Part 2 - Performance]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=404</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Building a simple cache, and a performance comparison with node.js and ruby.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=17909">036_Weber_Part_2.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=17910">036_Weber_part_2_cityguide.tar.gz</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=17911">036_Weber_Part_2.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-261731b9e92d9ee9a3c86ff411b1a2537603fe92</guid>
      <pubDate>Tue, 17 Dec 2013 16:25:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/17909/036_Weber_Part_2.mp4" length="107377146" type="video/mp4"/>
      <itunes:subtitle>Building a simple cache, and a performance comparison with node.js and ruby.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[035 - Weber]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=399</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Building a basic web app with the Weber MVC framework.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=17528">035_Weber.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=17529">035_weber_cityguide.tar.gz</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=17530">035_Weber.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-f2cb043205443522542977a84f173d74a5095b35</guid>
      <pubDate>Thu, 12 Dec 2013 08:45:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/17530/035_Weber.mp4" length="90534522" type="video/mp4"/>
      <itunes:subtitle>Building a basic web app with the Weber MVC framework.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[034 - Elixiak]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=398</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Introduction to Elixiak - an ActiveRecord-like wrapper for Riak in Elixir.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=17369">034_Elixiak.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=17370">034_Elixiak.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=17371">034_elixiak_playground.tar.gz</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-65b2f632050407fd4525404b1282c579d6ed14b2</guid>
      <pubDate>Mon, 09 Dec 2013 02:28:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/17369/034_Elixiak.mp4" length="21966124" type="video/mp4"/>
      <itunes:subtitle>Introduction to Elixiak - an ActiveRecord-like wrapper for Riak in Elixir.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[033 - Pry]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=396</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Using IEx.pry to inspect and debug a running process.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=17312">033_Pry.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=17313">033_iex_pry_test.tar.gz</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=17314">033_Pry.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-7cfb53216e3d6f1319bec0f1f878739e03dca03e</guid>
      <pubDate>Sun, 08 Dec 2013 18:59:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/17312/033_Pry.mp4" length="7674265" type="video/mp4"/>
      <itunes:subtitle>Using IEx.pry to inspect and debug a running process.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[032 - Command Line Scripts]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=392</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Basic Introduction to writing Elixir scripts that can be invoked and passed arguments from the command line.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=16424">032_current_weather.tar.gz</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=16425">032_Command_Line_Scripts.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=16426">032_Command_Line_Scripts.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-a71b04315dd935bbc978fc0c48b2e6c4f8a8a663</guid>
      <pubDate>Tue, 03 Dec 2013 08:13:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/16426/032_Command_Line_Scripts.mp4" length="39267885" type="video/mp4"/>
      <itunes:subtitle>Basic Introduction to writing Elixir scripts that can be invoked and passed arguments from the command line.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[031 - TCP Servers]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=389</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Building network servers in Elixir using Erlang's `:gen_tcp` module.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=16174">031_TCP_Servers.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=16175">031_TCP_Servers.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=16176">031_tcp_server.tar.gz</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-ef4d8f3f5fc91b2757f9db478454889a62b1f2be</guid>
      <pubDate>Thu, 28 Nov 2013 10:07:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/16174/031_TCP_Servers.mp4" length="15492575" type="video/mp4"/>
      <itunes:subtitle>Building network servers in Elixir using Erlang's `:gen_tcp` module.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[030 - ExActor]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=387</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Simplified generation of generic servers.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=16076">030_ExActor.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=16077">030_ExActor.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=16078">030_exactor_test.tar.gz</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-b591602d8d685dfc5b65373c9eec81be2ba3533e</guid>
      <pubDate>Tue, 26 Nov 2013 09:05:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/16076/030_ExActor.mp4" length="24420504" type="video/mp4"/>
      <itunes:subtitle>Simplified generation of generic servers.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[029 - HTTP Clients]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=382</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><div id="disqus_thread">A survey of the HTTP Client landscape. &nbsp;Covers:</div>
<div>
<ul>
<li>httpc</li>
<li>ibrowse</li>
<li>hackney</li>
</ul>
</div>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=15819">029_HTTP_Clients.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=15820">029_HTTP_Clients.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=15821">029_http_client_survey.tar.gz</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-9fce90acc12b203cf01876bb05427ee108630e6e</guid>
      <pubDate>Thu, 21 Nov 2013 09:25:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/15819/029_HTTP_Clients.mp4" length="35716942" type="video/mp4"/>
      <itunes:subtitle>A survey of the HTTP Client landscape.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[028 - Parsing XML]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=380</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>A glimpse into XML parsing in Elixir, by way of interoperating with an Erlang module.</p>
<h2 style="margin-bottom: 15px; line-height: 1.7; font-size: 2em; margin-right: 0px; margin-left: 0px; padding: 0px; cursor: text; position: relative; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #eeeeee; color: #333333; font-family: Helvetica, arial, freesans, clean, sans-serif; margin-top: 0px !important;">Links</h2>
<ul style="padding: 0px 0px 0px 30px; margin-top: 15px; margin-right: 0px; margin-left: 0px; color: #333333; font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 13px; line-height: 22.100000381469727px; margin-bottom: 0px !important;">
<li><a style="color: #4183c4; text-decoration: none;" href="http://www.erlang.org/doc/apps/xmerl/xmerl_ug.html">xmerl user guide</a></li>
<li><a style="color: #4183c4; text-decoration: none;" href="http://www.erlang.org/doc/man/xmerl_scan.html">xmerl manual</a></li>
<li><a style="color: #4183c4; text-decoration: none;" href="https://github.com/willemdj/erlsom">erlsom</a></li>
<li><a style="color: #4183c4; text-decoration: none;" href="https://github.com/paulgray/exml">exml</a></li>
<li><a style="color: #4183c4; text-decoration: none;" href="http://elixir-lang.org/crash-course.html#notable_differences">Differences between Erlang and Elixir records</a>&nbsp;- See the 'Records' section.</li>
<li><a style="color: #4183c4; text-decoration: none;" href="http://pragdave.pragprog.com/pragdave/2007/04/a_first_erlang_.html">Dave Thomas on parsing XML in Erlang</a></li>
<li><a style="color: #4183c4; text-decoration: none;" href="https://github.com/erlang/otp/blob/maint/lib/xmerl/include/xmerl.hrl#L73-L85"><code style="font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; margin: 0px 2px; padding: 0px 5px; border: 1px solid #dddddd; background-color: #f8f8f8; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; white-space: nowrap;">xmlElement</code>&nbsp;record</a></li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=15730">028_Parsing_XML.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=15731">028_Parsing_XML.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=15732">028_parsing_xml.tar.gz</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-4332e4d1b7b33b371e7b0d86f83862092c9f0b77</guid>
      <pubDate>Tue, 19 Nov 2013 07:53:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/15730/028_Parsing_XML.mp4" length="48799155" type="video/mp4"/>
      <itunes:subtitle>A glimpse into XML parsing in Elixir, by way of interoperating with an Erlang module.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[027 - Dict, Part 2]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=377</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>A brief overview of the second portion of the Dict module.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=15383">027_Dict_Part_2.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=15384">027_Dict_Part_2.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-8fdb7bb8bce5bdf73f15457057d88bdc801e4374</guid>
      <pubDate>Thu, 14 Nov 2013 19:14:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/15383/027_Dict_Part_2.mp4" length="20909659" type="video/mp4"/>
      <itunes:subtitle>A brief overview of the second portion of the Dict module.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[026 - Dict, Part 1]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=376</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>A brief overview of the first portion of the Dict module.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=15379">026_Dict_Part_1.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=15380">026_Dict_Part_1.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-b2055c1c5f75983643083fdaeb9f6a4ed25a4a5c</guid>
      <pubDate>Thu, 14 Nov 2013 19:10:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/15379/026_Dict_Part_1.mp4" length="27026102" type="video/mp4"/>
      <itunes:subtitle>A brief overview of the first portion of the Dict module.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[025 - Ecto, Part 2: Dwitter]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=372</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Overhauling our Dynamo webapp to use Ecto for its persistence layer.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=14919">025_Ecto_Part_2_Dwitter.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=14920">025_Ecto_Part_2_Dwitter.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=14921">025_dwitter.tar.gz</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-290d62fd9b993b10aa73be0786505f57c4c9775e</guid>
      <pubDate>Thu, 07 Nov 2013 22:20:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/14919/025_Ecto_Part_2_Dwitter.mp4" length="43367334" type="video/mp4"/>
      <itunes:subtitle>Overhauling our Dynamo webapp to use Ecto for its persistence layer.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[024 - Ecto, Part 1]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=370</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>A brief introduction to using Ecto with Postgres for persistence.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=14798">024_ecto_test.tar.gz</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=14799">024_Ecto_Part_1.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=14801">024_Ecto_Part_1.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-77f9f7e016cf01cd0868b6c56d03c0ff9e7816de</guid>
      <pubDate>Tue, 05 Nov 2013 15:07:00 -0500</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/14801/024_Ecto_Part_1.mp4" length="46383729" type="video/mp4"/>
      <itunes:subtitle>A brief introduction to using Ecto with Postgres for persistence.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[023 - OTP, Part 5: Supervisors and Persistent State]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=367</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Making a supervised process's state live through a crash.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=14512">023_OTP_Part_5_Supervisors_and_Persistent_State.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=14513">023_supervision_tree.svg</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=14514">023_OTP_Part_5_Supervisors_and_Persistent_State.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=14515">023_supervised_list_server.tar.gz</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=14516">023_supervision_tree.png</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-9ba61b7503e2a2d8c97d21be0bdc943e94e2818e</guid>
      <pubDate>Fri, 01 Nov 2013 22:41:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/14512/023_OTP_Part_5_Supervisors_and_Persistent_State.mp4" length="54963851" type="video/mp4"/>
      <itunes:subtitle>Making a supervised process's state live through a crash.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[022 - OTP, Part 4: Supervisors]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=363</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Exploring OTP's Supervisors, and how they help us recover from crashes in processes.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=12346">022_OTP_Part_4_Supervisors.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=12347">022_OTP_Part_4_Supervisors.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=12348">supervised_list_server.tar.gz</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-4e48d92ef15a55278c611d3898036214ac98efb4</guid>
      <pubDate>Tue, 29 Oct 2013 08:00:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/12346/022_OTP_Part_4_Supervisors.mp4" length="45927299" type="video/mp4"/>
      <itunes:subtitle>Exploring OTP's Supervisors, and how they help us recover from crashes in processes.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[021 - ZeldaCat, Part 2]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=362</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>We build a couple more components in the ZeldaCat game for more practice with GenEvent</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=12321">021_ZeldaCat_Part_2.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=12322">021_ZeldaCat_Part_2.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=12323">zeldacat.tar.gz</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-676d292488550356f768d103eecdf164e1ad32ca</guid>
      <pubDate>Fri, 25 Oct 2013 19:05:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/12321/021_ZeldaCat_Part_2.mp4" length="33924155" type="video/mp4"/>
      <itunes:subtitle>We build a couple more components in the ZeldaCat game for more practice with GenEvent</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[020 - OTP, Part 3 - GenEvent]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=361</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>An introduction to OTP&#39;s GenEvent</p>

<p>NOTE: There are some good comments re: GenEvent API changes below. &nbsp;<span style="line-height: 20.7999992370605px;">This and other errata are outlined in&nbsp;</span><a href="https://github.com/knewter/elixir-sips-site/wiki/Errata" style="line-height: 20.7999992370605px;">the Errata page on the Wiki.</a></p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=8379">020_OTP_Part_3_GenEvent.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=8380">zeldacat.tar.gz</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=8381">020_OTP_Part_3_GenEvent.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-4c1da796dbd7b1ecb3709e70212dd3f3b934a90c</guid>
      <pubDate>Wed, 23 Oct 2013 12:38:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/8379/020_OTP_Part_3_GenEvent.mp4" length="41968153" type="video/mp4"/>
      <itunes:subtitle>An introduction to OTP's GenEvent</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[019 - Enum, Part 3]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=359</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Wrapping up our coverage of the Enum module</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=5399">019_Enum_Part_3.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=5400">019_Enum_Part_3.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-c393e93f2dcb42019ba8c0c2bc7b8aa5e9976141</guid>
      <pubDate>Mon, 21 Oct 2013 11:02:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/5399/019_Enum_Part_3.mp4" length="28923190" type="video/mp4"/>
      <itunes:subtitle>Wrapping up the Enum module</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[018 - Enum, Part 2]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=350</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>A brief overview of the second portion of the Enum module from the standard library.</p>

<p>NOTE: There are some nice comments re: Enum changes in the comments. &nbsp;<span style="line-height: 20.7999992370605px;">This and other errata are outlined in&nbsp;</span><a href="https://github.com/knewter/elixir-sips-site/wiki/Errata" style="line-height: 20.7999992370605px;">the Errata page on the Wiki.</a></p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=5148">018_Enum_Part_2.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=5149">018_Enum_Part_2.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-0f8303cdbc9ee941521caaf7b76731da0b3d4d19</guid>
      <pubDate>Tue, 15 Oct 2013 23:06:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/5148/018_Enum_Part_2.mp4" length="19118037" type="video/mp4"/>
      <itunes:subtitle>A brief overview of the second portion of the Enum module from the standard library</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[017 - Enum, Part 1]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=348</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>A brief overview of the first portion of the Enum module from the standard library.</p>

<p>NOTE: There are some good notes in the comments re: slight changes since this was recorded. &nbsp;<span style="line-height: 20.7999992370605px;">This and other errata are outlined in&nbsp;</span><a href="https://github.com/knewter/elixir-sips-site/wiki/Errata" style="line-height: 20.7999992370605px;">the Errata page on the Wiki.</a></p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=5068">017_Enum_Part_1.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=5069">017_Enum_Part_1.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-8049517948868c47e602daa299edb1dadd758da3</guid>
      <pubDate>Sun, 13 Oct 2013 22:01:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/5068/017_Enum_Part_1.mp4" length="20298860" type="video/mp4"/>
      <itunes:subtitle>A brief overview of the first portion of the Enum module from the standard library</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[016 - Pipe Operator]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=344</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>The Pipe Operator: `|&gt;` is used to quickly and easily create a pipeline of functions. &nbsp;It&#39;s an extremely common thing you run into in programming. &nbsp;In this episode, we&#39;ll recreate the following Unix pipeline, in Elixir: `ps ax|grep vim|awk &#39;{ print $1 }&#39;`</p>

<p>NOTE: &nbsp;Running Elixir v0.12.5 or later the % symbol for sigils was deprecated so use ~ instead.&nbsp;So %r should be entered as ~r instead: Regex.split(~r/ /, stripped, trim: true). &nbsp;<span style="line-height: 20.7999992370605px;">This and other errata are outlined in&nbsp;</span><a href="https://github.com/knewter/elixir-sips-site/wiki/Errata" style="line-height: 20.7999992370605px;">the Errata page on the Wiki.</a></p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=3637">016_Pipe_Operator.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=3638">pipe_operatory_playground_test.exs</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=3639">016_Pipe_Operator.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-dc264ea5c3e0543c762c273788859c236e2a1dec</guid>
      <pubDate>Tue, 08 Oct 2013 09:49:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/3639/016_Pipe_Operator.mp4" length="75849227" type="video/mp4"/>
      <itunes:subtitle>Elixir supports the Pipe Operator - `|&gt;` - which acts very similar to pipes in Unix.  We'll dig into it.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[015 - OTP Part 2: Finite State Machines]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=341</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>In today&#39;s episode, we&#39;re going to briefly discuss:</p>

<ul>
	<li>What a Finite State Machine (or FSM) is.</li>
	<li>An example FSM that we&#39;ll be implementing.</li>
	<li>How to implement an FSM in Elixir using OTP&#39;s GenFSM.</li>
</ul>

<p>NOTE: GenFSM is now deprecated / gone. &nbsp;There are various FSM libraries you might use instead. I don&#39;t have a great suggestion yet, but you might look at <a href="https://github.com/uwiger/plain_fsm">plain_fsm</a>.&nbsp;&nbsp;<span style="line-height: 20.7999992370605px;">This and other errata are outlined in&nbsp;</span><a href="https://github.com/knewter/elixir-sips-site/wiki/Errata" style="line-height: 20.7999992370605px;">the Errata page on the Wiki.</a></p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=3064">015_OTP_Part_2_Finite_State_Machines.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=3065">015_OTP_Part_2_Finite_State_Machines.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=3066">015_OTP_Part_2_Finite_State_Machines_Diagram.svg</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=3067">015_OTP_Part_2_Finite_State_Machines_Diagram.png</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-b9660be464972f6ba5dae7527063c62fc046317e</guid>
      <pubDate>Fri, 04 Oct 2013 08:59:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/3064/015_OTP_Part_2_Finite_State_Machines.mp4" length="64451194" type="video/mp4"/>
      <itunes:subtitle>An overview of the GenFSM OTP module and an example use case.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[014 - OTP Part 1: Servers]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=338</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>In this episode, we&#39;ll cover the basics of OTP Servers:</p>

<ul>
	<li>What is OTP?</li>
	<li>Implementing GenServer Behaviour</li>
	<li>Where to go from here</li>
</ul>

<p><span style="font-size:14px;">NOTE: <code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">use GenServer.Behaviour</code><span style="font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; line-height: 14.6285715103149px;">&nbsp;should now just be&nbsp;</span><code style="box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; padding: 0.2em 0px; margin: 0px; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157);">use GenServer</code><span style="font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; line-height: 14.6285715103149px;">.</span>&nbsp;<span style="line-height: 20.7999992370605px;">This and other errata are outlined in&nbsp;</span><a href="https://github.com/knewter/elixir-sips-site/wiki/Errata" style="line-height: 20.7999992370605px;">the Errata page on the Wiki.</a></span></p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=2985">014_OTP_Part_1_Servers.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=2986">014_OTP_Part_1_Servers.markdown</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-5a5f721b54d22157b4be94f84e1f4532daa2de1c</guid>
      <pubDate>Tue, 01 Oct 2013 16:15:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/2985/014_OTP_Part_1_Servers.mp4" length="48107804" type="video/mp4"/>
      <itunes:subtitle>In this episode, we cover the basics of building a GenServer using OTP.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[013 - Processes, Part 2]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=332</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>In the last episode, we talked about processes. &nbsp;We're going to continue that today, specifically focusing on state encapsulation a bit further. &nbsp;For the sake of making it interesting, we'll also use CQRS and Event Sourcing to track what's occurred in the system.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=2749">013_Processes_Part_2.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=5098">013_Processes_Part_2.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-ded71a95e10e1d9b65825db7415a0b4c2bf3ec9e</guid>
      <pubDate>Fri, 27 Sep 2013 00:24:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/5098/013_Processes_Part_2.mp4" length="51324543" type="video/mp4"/>
      <itunes:subtitle>Modeling a BankAccount with a process</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[012 - Processes]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=331</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>Erlang is a concurrency-oriented programming language. &nbsp;Its unit of concurrency is the process (which has nothing to do with an Operating System process). &nbsp;If you&#39;ve heard people talking about the Actor Model, this is what they&#39;re talking about.</p>

<p>Elixir is built on top of Erlang&#39;s VM, and has the same support for processes. &nbsp;In today&#39;s episode, we&#39;re going to play with processes a bit to get a feel for how they can be used.</p>

<p>NOTE: The syntax in Elixir has changed a bit since this episode was recorded. &nbsp;Ernest Ezis was kind enough to send me some notes to help when watching the episode. &nbsp;I&#39;ve attached them in the files below. &nbsp;I&#39;ve also added this to the Errata page. &nbsp;<span style="line-height: 20.7999992370605px;">This and other errata are outlined in&nbsp;</span><a href="https://github.com/knewter/elixir-sips-site/wiki/Errata" style="line-height: 20.7999992370605px;">the Errata page on the Wiki.</a></p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=2746">012_Processes.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=5097">012_Processes.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=23509">012_Processes_-_Notes_On_Elixir_Syntax_Changes.txt</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-dae0ac7be55f42aa7c2c813c1ee4a76485a473a8</guid>
      <pubDate>Thu, 26 Sep 2013 22:29:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/5097/012_Processes.mp4" length="48513713" type="video/mp4"/>
      <itunes:subtitle>In today's episode, we're going to play with processes a bit to get a feel for how they can be used.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[011 - Records]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=324</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>A brief overview or Records in Elixir - what they are, what they&#39;re for, and how to use them.</p>

<p>NOTE: Records were deprecated before Elixir hit 1.0. &nbsp;Details in the comments. &nbsp;<span style="line-height: 20.7999992370605px;">This and other errata are outlined in&nbsp;</span><a href="https://github.com/knewter/elixir-sips-site/wiki/Errata" style="line-height: 20.7999992370605px;">the Errata page on the Wiki.</a></p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=2301">011_Records.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=22098">011_Records.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-e76ebd6726108f35a5c8f75fd1b3561b01f16d82</guid>
      <pubDate>Thu, 19 Sep 2013 09:02:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/22098/011_Records.mp4" length="16801860" type="video/mp4"/>
      <itunes:subtitle>Just a quick rundown of Records in Elixir</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[010 - List Comprehensions]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=323</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>List Comprehensions are a nice feature for generating lists from other lists. &nbsp;In this episode, we cover the basics, and we test drive a module to generate a deck of cards.</p>

<p>NOTE:&nbsp;For those who are wondering, lc has been replaced with for. Example:</p>

<p>```elixir<br />
for x &lt;- [1,2,3,4], do: x*2<br />
```</p>

<p><span style="line-height: 20.7999992370605px;">This and other errata are outlined in&nbsp;</span><a href="https://github.com/knewter/elixir-sips-site/wiki/Errata" style="line-height: 20.7999992370605px;">the Errata page on the Wiki.</a></p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=2247">010_List_Comprehensions.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=12552">010_List_Comprehension.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-89b5f6b22a787a4f94b7fa3844d8c858149ecb73</guid>
      <pubDate>Tue, 17 Sep 2013 08:46:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/12552/010_List_Comprehension.mp4" length="19912068" type="video/mp4"/>
      <itunes:subtitle>List Comprehensions are a nice feature for generating lists from other lists.  In this episode, we cover the basics, and we test drive a module to generate a deck of cards.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[009 - Dynamo, Part 3]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=322</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>In Episode 9, we integrate the work we did in Dynamo with our experiments in Amnesia, to hook persistence into our Dwitter application.</p>

<p><span style="line-height: 20.7999992370605px;">NOTE: Dynamo is essentially a dead-end these days, and was put in maintenance mode on May 31, 2014. &nbsp;This episode was recorded prior to this decision.</span></p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=2192">009_Dynamo_Part_3.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=5094">009_Dynamo_Part_3.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-a99258169e716dd101a33fae00e27a8955cbf660</guid>
      <pubDate>Sun, 15 Sep 2013 21:15:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/5094/009_Dynamo_Part_3.mp4" length="32347561" type="video/mp4"/>
      <itunes:subtitle>In Episode 9, we integrate the work we did in Dynamo with our experiments in Amnesia, to hook persistence into our Dwitter application.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[008 - Dynamo, Part 2]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=317</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>This is the second in the Dynamo series, but it doesn&#39;t really cover any of Dynamo. &nbsp;Rather, it covers the Amnesia library, for persistence in the Erlang mnesia database. &nbsp;I also briefly cover Ecto, a SQL wrapper.</p>

<p><span style="line-height: 20.7999992370605px;">NOTE: Dynamo is essentially a dead-end these days, and was put in maintenance mode on May 31, 2014. &nbsp;This episode was recorded prior to this decision.</span></p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=2043">008_Dynamo_Part_2.markdown</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=5093">008_Dynamo_Part_2.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-00f8b115e467f028f97dff6ee4173c8a51c44a50</guid>
      <pubDate>Tue, 10 Sep 2013 11:22:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/5093/008_Dynamo_Part_2.mp4" length="55563293" type="video/mp4"/>
      <itunes:subtitle>The second part in the series on building Dwitter, a Twitter clone, using the Dynamo web framework.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[007 - Dynamo, Part 1]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=313</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>In today&#39;s episode, I start out on a multipart series to build a basic twitter-esque clone in Elixir using a web framework called Dynamo. &nbsp;We go from nothing to a basic app that accepts a form request and renders a template with user-provided data.</p>

<p>I plan to cover persistence a bit next week, and perhaps make the app look a little better as well.</p>

<p>If you want to have a look at a project that is mostly the same code (it was my practice run, so the code might differ ever so slightly from that in the screencast, but only in some text perhaps) then you can check it out at <a href="http://github.com/knewter/dwitter">http://github.com/knewter/dwitter</a></p>

<p>NOTE: Dynamo is essentially a dead-end these days, and was put in maintenance mode on May 31, 2014. &nbsp;This episode was recorded prior to this decision.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=1927">007_Dynamo_Part_1.md</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=5092">007_Dynamo_Part_1.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-070bcc897c0822994b5119f31bece510220f188c</guid>
      <pubDate>Thu, 05 Sep 2013 12:45:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/5092/007_Dynamo_Part_1.mp4" length="36859846" type="video/mp4"/>
      <itunes:subtitle>Building a basic web application in Elixir using Dynamo</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[006 - Unit Testing]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=311</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>This is an exceptionally long episode (21 minutes) on Unit Testing in Elixir. &nbsp;It&#39;s substantially longer than my intended episode length, but I think it&#39;s a very important topic so I&#39;m willing to put up with the length.</p>

<p><span style="line-height: 20.7999992370605px;">NOTE: There are some good comments re: syntax changes below that are important - this video was recorded before some syntax changes occurred in Elixir. &nbsp;</span><span style="line-height: 20.7999992370605px;">This and other errata are outlined in&nbsp;</span><a href="https://github.com/knewter/elixir-sips-site/wiki/Errata" style="line-height: 20.7999992370605px;">the Errata page on the Wiki.</a></p>

<p>We cover:</p>

<ul>
	<li>ExUnit</li>
	<li>TDD in Elixir</li>
	<li>DocTests</li>
	<li>Exercism.io</li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=1888">006_Testing.md</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=1889">006_schizo.tar.gz</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=5090">006_Testing.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-4df77bde9eb54fd358b172a7606761a69f3cd17b</guid>
      <pubDate>Tue, 03 Sep 2013 10:52:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/5090/006_Testing.mp4" length="124978488" type="video/mp4"/>
      <itunes:subtitle>This is an exceptionally long episode (21 minutes) on Unit Testing in Elixir.  It's substantially longer than my intended episode length, but I think it's a very important topic so I'm willing to put up with the length.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[005 - Mix and Modules]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=298</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><ul>
<li>Use mix to begin a new project</li>
<li>Define a module</li>
<li>Compile and use that module</li>
<li>Examine a module's return value</li>
<li>Document a module and its functions</li>
<li>Generate nice HTML documentation output using ExDoc</li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=1652">005_modules_example.tar.gz</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=1654">005_Modules.md</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=5087">005_Modules.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-969472a9610dc652fd4076e9fe793c5abe669af5</guid>
      <pubDate>Fri, 30 Aug 2013 08:57:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/5087/005_Modules.mp4" length="33452954" type="video/mp4"/>
      <itunes:subtitle>- Use mix to begin a new project&#13;
- Define a module&#13;
- Compile and use that module&#13;
- Examine a module's return value&#13;
- Document a module and its functions&#13;
- Generate nice HTML documentation output using ExDoc</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[004 - Functions]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=284</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><h2>Episode 004: Functions</h2>
<p>In Elixir, functions are first class types. &nbsp;Today we look at:</p>
<ul>
<li>Defining Anonymous Functions</li>
<li>Calling Anonymous Functions</li>
<li>Using Functions as first class types</li>
</ul>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=1559">004_Functions.md</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=5086">004_Functions.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-db84d34c2d16860fe1fc943d083ad82788e3acb9</guid>
      <pubDate>Wed, 28 Aug 2013 08:00:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/5086/004_Functions.mp4" length="25081176" type="video/mp4"/>
      <itunes:subtitle>In Elixir, functions are first class types.  Today we look at: Defining Anonymous Functions; Calling Anonymous Functions; Using Functions as first class types.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[003 - Pattern Matching]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=280</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>This episode provides a brief overview of pattern matching - what it is, and what it's used for. &nbsp;We cover the Match Operator, Function Definitions, and Case Statements.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=1413">003_Pattern_Matching.md</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=14879">003_Pattern_Matching.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-3d393067166e1151725896b4a5dc0f89d886aa86</guid>
      <pubDate>Fri, 23 Aug 2013 09:02:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/14879/003_Pattern_Matching.mp4" length="23293012" type="video/mp4"/>
      <itunes:subtitle>An overview of Pattern Matching in Elixir</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[002 - Basic Elixir]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=275</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>A quick overview of some of the basic types in Elixir: Atoms, Numbers, Lists, Tuples, Regexes, and Booleans.</p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=1357">002_Basic_Elixir.md</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=1358">002_Basic_Elixir.mkv</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=1367">002_Basic_Elixir.mp4</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-44f4b90e9da71339292e198d7fd419ef2220d051</guid>
      <pubDate>Mon, 19 Aug 2013 22:48:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/1367/002_Basic_Elixir.mp4" length="31500970" type="video/mp4"/>
      <itunes:subtitle>A quick overview of some of the basic types in Elixir: Atoms, Numbers, Lists, Tuples, Regexes, and Booleans.</itunes:subtitle>
    </item>
    <item>
      <title><![CDATA[001 - Introduction and Installing Elixir]]></title>
      <link>https://elixirsips.dpdcart.com/subscriber/post?id=271</link>
      <description><![CDATA[<div class="blog-entry">
          <div class="blog-content"><p>In the first episode ever, I introduce Elixir Sips and walk through installing Erlang and Elixir</p>

<p>NOTE: This episode was from before there were packages or releases. I would suggest just doing what&#39;s defined in the <a href="http://elixir-lang.org/install.html">Elixir Install Guide</a>. &nbsp;This and other errata are outlined in <a href="https://github.com/knewter/elixir-sips-site/wiki/Errata">the Errata page on the Wiki.</a></p>
          </div>
          <h3>Attached Files</h3>
          <ul>
          <li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=1321">001_Introduction_and_Installing_Elixir.mkv</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=1366">001_Introduction_and_Installing_Elixir.mp4</a></li>
<li><a href="https://elixirsips.dpdcart.com/subscriber/download?file_id=1382">001_Introduction_and_Installing_Elixir.md</a></li>
</ul></div>]]></description>
      <guid isPermaLink="false">dpd-e902c86df08867fcb3693be8cb5dd3985aecd62b</guid>
      <pubDate>Sun, 18 Aug 2013 22:10:00 -0400</pubDate>
      <enclosure url="https://elixirsips.dpdcart.com/feed/download/1366/001_Introduction_and_Installing_Elixir.mp4" length="68838997" type="video/mp4"/>
      <itunes:subtitle>In the first episode ever, I introduce Elixir Sips and walk through installing Erlang and Elixir</itunes:subtitle>
    </item>
  </channel>
</rss>
